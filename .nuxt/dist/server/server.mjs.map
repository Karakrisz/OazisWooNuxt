{"version":3,"file":"server.mjs","sources":["../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/fetch.mjs","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/nuxt.config.mjs","../../../node_modules/nuxt/dist/app/nuxt.js","../../../node_modules/ufo/dist/index.mjs","../../../node_modules/nuxt/dist/app/components/injections.js","../../../node_modules/nuxt/dist/app/composables/router.js","../../../node_modules/nuxt/dist/app/composables/error.js","../../../node_modules/@unhead/vue/dist/shared/vue.cf295fb1.mjs","../../../node_modules/@unhead/vue/dist/shared/vue.f36acd1f.mjs","../../../node_modules/@unhead/vue/dist/index.mjs","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/unhead-plugins.mjs","../../../node_modules/nuxt/dist/head/runtime/plugins/unhead.js","../../../node_modules/unctx/dist/index.mjs","../../../node_modules/nuxt/dist/pages/runtime/utils.js","../../../node_modules/nuxt/dist/app/composables/manifest.js","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/routes.mjs","../../../node_modules/nuxt/dist/app/components/utils.js","../../../node_modules/nuxt/dist/pages/runtime/router.options.js","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/router.options.mjs","../../../node_modules/nuxt/dist/pages/runtime/validate.js","../../../node_modules/nuxt/dist/app/middleware/manifest-route-rule.js","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/middleware.mjs","../../../node_modules/nuxt/dist/pages/runtime/plugins/router.js","../../../node_modules/nuxt/dist/app/composables/payload.js","../../../node_modules/nuxt/dist/app/plugins/revive-payload.server.js","../../../node_modules/@nuxt/icon/dist/runtime/components/index.js?nuxt_component=async&nuxt_component_name=Icon&nuxt_component_export=default","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/components.plugin.mjs","../../../node_modules/@intlify/shared/dist/shared.mjs","../../../node_modules/@intlify/message-compiler/dist/message-compiler.mjs","../../../node_modules/@intlify/core-base/dist/core-base.mjs","../../../node_modules/vue-i18n/dist/vue-i18n.mjs","../../i18n.options.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/messages.mjs","../../../node_modules/nuxt/dist/app/utils.js","../../../node_modules/nuxt/dist/app/composables/ssr.js","../../../node_modules/nuxt/dist/app/composables/cookie.js","../../../node_modules/is-https/dist/index.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/utils.mjs","../../../node_modules/nuxt/dist/app/composables/state.js","../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/compatibles/utils.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/compatibles/routing.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/compatibles/head.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/utils.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/internal.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/composables/index.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/extends/i18n.mjs","../../../node_modules/nuxt/dist/app/composables/asyncData.js","../../../node_modules/nuxt/dist/app/components/client-only.js","../../../node_modules/nuxt/dist/app/components/nuxt-link.js","../../../woonuxt_base/app/app.config.ts","../../app.config.mjs","../../../node_modules/nuxt/dist/app/config.js","../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/extends/router.mjs","../../../node_modules/@nuxtjs/i18n/dist/runtime/plugins/i18n.mjs","../../../node_modules/@nuxt/icon/dist/runtime/plugin.js","../../../node_modules/nuxt-graphql-client/dist/runtime/plugin.mjs","../../../woonuxt_base/app/composables/useHelpers.ts","../../gql/default.ts","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/gql.mjs","../../../node_modules/nuxt-graphql-client/dist/runtime/composables/index.mjs","../../../woonuxt_base/app/composables/useAuth.ts","../../../woonuxt_base/app/composables/useCart.ts","../../../woonuxt_base/app/plugins/init.ts","../../../node_modules/nuxt/dist/pages/runtime/plugins/prerender.server.js","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/plugins/server.mjs","../../../node_modules/@nuxt/image/dist/runtime/utils/meta.mjs","../../../node_modules/@nuxt/image/dist/runtime/utils/index.mjs","../../../node_modules/@nuxt/image/dist/runtime/utils/prerender.mjs","../../../node_modules/@nuxt/image/dist/runtime/image.mjs","../../../node_modules/@nuxt/image/dist/runtime/providers/ipx.mjs","../../../virtual:nuxt:/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/image-options.mjs","../../../node_modules/@nuxt/image/dist/runtime/composables.mjs","../../../node_modules/@nuxt/image/dist/runtime/components/_base.mjs","../../../node_modules/@nuxt/image/dist/runtime/components/nuxt-img.mjs","../../../node_modules/@nuxt/icon/dist/runtime/components/shared.js","../../../node_modules/@nuxt/icon/dist/runtime/components/css.js","../../../node_modules/@nuxt/icon/dist/runtime/components/svg.js","../../../node_modules/@nuxt/icon/dist/runtime/components/index.js","../../../woonuxt_base/app/composables/useSorting.ts","../../../woonuxt_base/app/composables/useFiltering.ts","../../../woonuxt_base/app/composables/useProducts.ts","../../../woonuxt_base/app/composables/useSearch.ts","../../../woonuxt_base/app/components/shopElements/ProductSearch.vue","../../../woonuxt_base/app/components/SignInLink.vue","../../../woonuxt_base/app/components/cartElements/CartTrigger.vue","../../../woonuxt_base/app/components/generalElements/MainMenu.vue","../../../woonuxt_base/app/components/generalElements/MenuTrigger.vue","../../../woonuxt_base/app/components/generalElements/SearchTrigger.vue","../../../woonuxt_base/app/components/generalElements/AppHeader.vue","../../../woonuxt_base/app/components/cartElements/CloseIcon.vue","../../../woonuxt_base/app/components/generalElements/MobileMenu.vue","../../../node_modules/nuxt/dist/app/components/route-provider.js","../../../node_modules/nuxt/dist/pages/runtime/page.js","../../../woonuxt_base/app/components/generalElements/AppFooter.vue","../../../woonuxt_base/app/app.vue","../../../woonuxt_base/app/error.vue","../../../node_modules/nuxt/dist/app/components/nuxt-root.vue","../../../node_modules/nuxt/dist/app/entry.js"],"sourcesContent":["import { $fetch } from 'ofetch'\nimport { baseURL } from '#internal/nuxt/paths'\nif (!globalThis.$fetch) {\n  globalThis.$fetch = $fetch.create({\n    baseURL: baseURL()\n  })\n}","export const appHead = {\"meta\":[{\"charset\":\"utf-8\"},{\"name\":\"viewport\",\"content\":\"width=device-width, initial-scale=1\"},{\"hid\":\"description\",\"name\":\"description\",\"content\":\"Ide kell a szöveg, függönyoket varnak budapesten\"},{\"name\":\"format-detection\",\"content\":\"telephone=no\"},{\"hid\":\"robots\",\"name\":\"robots\",\"content\":\"index, follow\"},{\"http-equiv\":\"Content-Security-Policy\",\"content\":\"\\n            default-src 'self' https: data:;\\n            img-src 'self' https: http: data:;\\n            font-src 'self' https: data:;\\n            style-src 'self' https: 'unsafe-inline';\\n            script-src 'self' https: 'unsafe-inline' 'unsafe-eval';\\n            connect-src 'self' https: http: https://fuggonyoazis.hu/api/public/json-posts https://fuggonyoazis.hu/restapi/graphql;\\n          \"}],\"link\":[{\"rel\":\"icon\",\"type\":\"image/x-icon\",\"href\":\"/favicon.ico\"},{\"rel\":\"preconnect\",\"href\":\"https://fonts.googleapis.com\"},{\"rel\":\"preconnect\",\"href\":\"https://fonts.gstatic.com\"},{\"rel\":\"stylesheet\",\"href\":\"https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap\"},{\"rel\":\"icon\",\"href\":\"/logo.svg\",\"type\":\"image/svg+xml\"}],\"style\":[],\"script\":[{\"type\":\"application/ld+json\",\"innerHTML\":\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebSite\\\",\\\"name\\\":\\\"Függöny Oázis\\\",\\\"url\\\":\\\"https://www.fuggonyoazis.hu\\\",\\\"potentialAction\\\":{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://www.fuggonyoazis.hu/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}}\"}],\"noscript\":[],\"htmlAttrs\":{\"lang\":\"hu\"},\"title\":\"Függöny Oázis\"}\n\nexport const appPageTransition = {\"name\":\"page\",\"mode\":\"out-in\"}\n\nexport const appBaseURL = \"/\"\n\nexport const appBuildAssetsDir = \"/_nuxt/\"\n\nexport const appCdnURL = \"\"\n\nexport const appLayoutTransition = false\n\nexport const appViewTransition = false\n\nexport const appKeepalive = false\n\nexport const appRootId = \"__nuxt\"\n\nexport const appRootTag = \"div\"\n\nexport const appRootAttrs = {\"id\":\"__nuxt\"}\n\nexport const appTeleportTag = \"div\"\n\nexport const appTeleportId = \"teleports\"\n\nexport const appTeleportAttrs = {\"id\":\"teleports\"}\n\nexport const renderJsonPayloads = true\n\nexport const componentIslands = false\n\nexport const payloadExtraction = true\n\nexport const cookieStore = true\n\nexport const appManifest = true\n\nexport const remoteComponentIslands = false\n\nexport const selectiveClient = false\n\nexport const devPagesDir = null\n\nexport const devRootDir = null\n\nexport const devLogs = false\n\nexport const nuxtLinkDefaults = {\"componentName\":\"NuxtLink\"}\n\nexport const asyncDataDefaults = {\"deep\":false}\n\nexport const resetAsyncDataToUndefined = false\n\nexport const nuxtDefaultErrorValue = undefined\n\nexport const fetchDefaults = {}\n\nexport const vueAppRootContainer = '#__nuxt'\n\nexport const viewTransition = false\n\nexport const appId = \"nuxt-app\"\n\nexport const outdatedBuildInterval = 3600000","import { effectScope, getCurrentInstance, getCurrentScope, hasInjectionContext, reactive, shallowReactive } from \"vue\";\nimport { createHooks } from \"hookable\";\nimport { getContext } from \"unctx\";\nimport { appId } from \"#build/nuxt.config.mjs\";\nfunction getNuxtAppCtx(appName = appId || \"nuxt-app\") {\n  return getContext(appName, {\n    asyncContext: !!__NUXT_ASYNC_CONTEXT__ && import.meta.server\n  });\n}\nexport const NuxtPluginIndicator = \"__nuxt_plugin\";\nexport function createNuxtApp(options) {\n  let hydratingCount = 0;\n  const nuxtApp = {\n    _name: appId || \"nuxt-app\",\n    _scope: effectScope(),\n    provide: void 0,\n    globalName: \"nuxt\",\n    versions: {\n      get nuxt() {\n        return __NUXT_VERSION__;\n      },\n      get vue() {\n        return nuxtApp.vueApp.version;\n      }\n    },\n    payload: shallowReactive({\n      data: shallowReactive({}),\n      state: reactive({}),\n      once: /* @__PURE__ */ new Set(),\n      _errors: shallowReactive({})\n    }),\n    static: {\n      data: {}\n    },\n    runWithContext(fn) {\n      if (nuxtApp._scope.active && !getCurrentScope()) {\n        return nuxtApp._scope.run(() => callWithNuxt(nuxtApp, fn));\n      }\n      return callWithNuxt(nuxtApp, fn);\n    },\n    isHydrating: import.meta.client,\n    deferHydration() {\n      if (!nuxtApp.isHydrating) {\n        return () => {\n        };\n      }\n      hydratingCount++;\n      let called = false;\n      return () => {\n        if (called) {\n          return;\n        }\n        called = true;\n        hydratingCount--;\n        if (hydratingCount === 0) {\n          nuxtApp.isHydrating = false;\n          return nuxtApp.callHook(\"app:suspense:resolve\");\n        }\n      };\n    },\n    _asyncDataPromises: {},\n    _asyncData: shallowReactive({}),\n    _payloadRevivers: {},\n    ...options\n  };\n  if (import.meta.server) {\n    nuxtApp.payload.serverRendered = true;\n  }\n  if (import.meta.client && window.__NUXT__) {\n    for (const key in window.__NUXT__) {\n      switch (key) {\n        case \"data\":\n        case \"state\":\n        case \"_errors\":\n          Object.assign(nuxtApp.payload[key], window.__NUXT__[key]);\n          break;\n        default:\n          nuxtApp.payload[key] = window.__NUXT__[key];\n      }\n    }\n  }\n  nuxtApp.hooks = createHooks();\n  nuxtApp.hook = nuxtApp.hooks.hook;\n  if (import.meta.server) {\n    const contextCaller = async function(hooks, args) {\n      for (const hook of hooks) {\n        await nuxtApp.runWithContext(() => hook(...args));\n      }\n    };\n    nuxtApp.hooks.callHook = (name, ...args) => nuxtApp.hooks.callHookWith(contextCaller, name, ...args);\n  }\n  nuxtApp.callHook = nuxtApp.hooks.callHook;\n  nuxtApp.provide = (name, value) => {\n    const $name = \"$\" + name;\n    defineGetter(nuxtApp, $name, value);\n    defineGetter(nuxtApp.vueApp.config.globalProperties, $name, value);\n  };\n  defineGetter(nuxtApp.vueApp, \"$nuxt\", nuxtApp);\n  defineGetter(nuxtApp.vueApp.config.globalProperties, \"$nuxt\", nuxtApp);\n  if (import.meta.server) {\n    if (nuxtApp.ssrContext) {\n      nuxtApp.ssrContext.nuxt = nuxtApp;\n      nuxtApp.ssrContext._payloadReducers = {};\n      nuxtApp.payload.path = nuxtApp.ssrContext.url;\n    }\n    nuxtApp.ssrContext = nuxtApp.ssrContext || {};\n    if (nuxtApp.ssrContext.payload) {\n      Object.assign(nuxtApp.payload, nuxtApp.ssrContext.payload);\n    }\n    nuxtApp.ssrContext.payload = nuxtApp.payload;\n    nuxtApp.ssrContext.config = {\n      public: options.ssrContext.runtimeConfig.public,\n      app: options.ssrContext.runtimeConfig.app\n    };\n  }\n  if (import.meta.client) {\n    window.addEventListener(\"nuxt.preloadError\", (event) => {\n      nuxtApp.callHook(\"app:chunkError\", { error: event.payload });\n    });\n    window.useNuxtApp = window.useNuxtApp || useNuxtApp;\n    const unreg = nuxtApp.hook(\"app:error\", (...args) => {\n      console.error(\"[nuxt] error caught during app initialization\", ...args);\n    });\n    nuxtApp.hook(\"app:mounted\", unreg);\n  }\n  const runtimeConfig = import.meta.server ? options.ssrContext.runtimeConfig : nuxtApp.payload.config;\n  nuxtApp.provide(\"config\", import.meta.client && import.meta.dev ? wrappedConfig(runtimeConfig) : runtimeConfig);\n  return nuxtApp;\n}\nexport function registerPluginHooks(nuxtApp, plugin) {\n  if (plugin.hooks) {\n    nuxtApp.hooks.addHooks(plugin.hooks);\n  }\n}\nexport async function applyPlugin(nuxtApp, plugin) {\n  if (typeof plugin === \"function\") {\n    const { provide } = await nuxtApp.runWithContext(() => plugin(nuxtApp)) || {};\n    if (provide && typeof provide === \"object\") {\n      for (const key in provide) {\n        nuxtApp.provide(key, provide[key]);\n      }\n    }\n  }\n}\nexport async function applyPlugins(nuxtApp, plugins) {\n  const resolvedPlugins = [];\n  const unresolvedPlugins = [];\n  const parallels = [];\n  const errors = [];\n  let promiseDepth = 0;\n  async function executePlugin(plugin) {\n    const unresolvedPluginsForThisPlugin = plugin.dependsOn?.filter((name) => plugins.some((p) => p._name === name) && !resolvedPlugins.includes(name)) ?? [];\n    if (unresolvedPluginsForThisPlugin.length > 0) {\n      unresolvedPlugins.push([new Set(unresolvedPluginsForThisPlugin), plugin]);\n    } else {\n      const promise = applyPlugin(nuxtApp, plugin).then(async () => {\n        if (plugin._name) {\n          resolvedPlugins.push(plugin._name);\n          await Promise.all(unresolvedPlugins.map(async ([dependsOn, unexecutedPlugin]) => {\n            if (dependsOn.has(plugin._name)) {\n              dependsOn.delete(plugin._name);\n              if (dependsOn.size === 0) {\n                promiseDepth++;\n                await executePlugin(unexecutedPlugin);\n              }\n            }\n          }));\n        }\n      });\n      if (plugin.parallel) {\n        parallels.push(promise.catch((e) => errors.push(e)));\n      } else {\n        await promise;\n      }\n    }\n  }\n  for (const plugin of plugins) {\n    if (import.meta.server && nuxtApp.ssrContext?.islandContext && plugin.env?.islands === false) {\n      continue;\n    }\n    registerPluginHooks(nuxtApp, plugin);\n  }\n  for (const plugin of plugins) {\n    if (import.meta.server && nuxtApp.ssrContext?.islandContext && plugin.env?.islands === false) {\n      continue;\n    }\n    await executePlugin(plugin);\n  }\n  await Promise.all(parallels);\n  if (promiseDepth) {\n    for (let i = 0; i < promiseDepth; i++) {\n      await Promise.all(parallels);\n    }\n  }\n  if (errors.length) {\n    throw errors[0];\n  }\n}\n// @__NO_SIDE_EFFECTS__\nexport function defineNuxtPlugin(plugin) {\n  if (typeof plugin === \"function\") {\n    return plugin;\n  }\n  const _name = plugin._name || plugin.name;\n  delete plugin.name;\n  return Object.assign(plugin.setup || (() => {\n  }), plugin, { [NuxtPluginIndicator]: true, _name });\n}\nexport const definePayloadPlugin = defineNuxtPlugin;\nexport function isNuxtPlugin(plugin) {\n  return typeof plugin === \"function\" && NuxtPluginIndicator in plugin;\n}\nexport function callWithNuxt(nuxt, setup, args) {\n  const fn = () => args ? setup(...args) : setup();\n  const nuxtAppCtx = getNuxtAppCtx(nuxt._name);\n  if (import.meta.server) {\n    return nuxt.vueApp.runWithContext(() => nuxtAppCtx.callAsync(nuxt, fn));\n  } else {\n    nuxtAppCtx.set(nuxt);\n    return nuxt.vueApp.runWithContext(fn);\n  }\n}\nexport function tryUseNuxtApp(appName) {\n  let nuxtAppInstance;\n  if (hasInjectionContext()) {\n    nuxtAppInstance = getCurrentInstance()?.appContext.app.$nuxt;\n  }\n  nuxtAppInstance = nuxtAppInstance || getNuxtAppCtx(appName).tryUse();\n  return nuxtAppInstance || null;\n}\nexport function useNuxtApp(appName) {\n  const nuxtAppInstance = tryUseNuxtApp(appName);\n  if (!nuxtAppInstance) {\n    if (import.meta.dev) {\n      throw new Error(\"[nuxt] A composable that requires access to the Nuxt instance was called outside of a plugin, Nuxt hook, Nuxt middleware, or Vue setup function. This is probably not a Nuxt bug. Find out more at `https://nuxt.com/docs/guide/concepts/auto-imports#vue-and-nuxt-composables`.\");\n    } else {\n      throw new Error(\"[nuxt] instance unavailable\");\n    }\n  }\n  return nuxtAppInstance;\n}\n// @__NO_SIDE_EFFECTS__\nexport function useRuntimeConfig(_event) {\n  return useNuxtApp().$config;\n}\nfunction defineGetter(obj, key, val) {\n  Object.defineProperty(obj, key, { get: () => val });\n}\nexport function defineAppConfig(config) {\n  return config;\n}\nconst loggedKeys = /* @__PURE__ */ new Set();\nfunction wrappedConfig(runtimeConfig) {\n  if (!import.meta.dev || import.meta.server) {\n    return runtimeConfig;\n  }\n  const keys = Object.keys(runtimeConfig).map((key) => `\\`${key}\\``);\n  const lastKey = keys.pop();\n  return new Proxy(runtimeConfig, {\n    get(target, p, receiver) {\n      if (typeof p === \"string\" && p !== \"public\" && !(p in target) && !p.startsWith(\"__v\")) {\n        if (!loggedKeys.has(p)) {\n          loggedKeys.add(p);\n          console.warn(`[nuxt] Could not access \\`${p}\\`. The only available runtime config keys on the client side are ${keys.join(\", \")} and ${lastKey}. See https://nuxt.com/docs/guide/going-further/runtime-config for more information.`);\n        }\n      }\n      return Reflect.get(target, p, receiver);\n    }\n  });\n}\n","const n = /[^\\0-\\x7E]/;\nconst t = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\nconst o = {\n  overflow: \"Overflow Error\",\n  \"not-basic\": \"Illegal Input\",\n  \"invalid-input\": \"Invalid Input\"\n};\nconst e = Math.floor;\nconst r = String.fromCharCode;\nfunction s(n2) {\n  throw new RangeError(o[n2]);\n}\nconst c = function(n2, t2) {\n  return n2 + 22 + 75 * (n2 < 26) - ((t2 != 0) << 5);\n};\nconst u = function(n2, t2, o2) {\n  let r2 = 0;\n  for (n2 = o2 ? e(n2 / 700) : n2 >> 1, n2 += e(n2 / t2); n2 > 455; r2 += 36) {\n    n2 = e(n2 / 35);\n  }\n  return e(r2 + 36 * n2 / (n2 + 38));\n};\nfunction toASCII(o2) {\n  return function(n2, o3) {\n    const e2 = n2.split(\"@\");\n    let r2 = \"\";\n    e2.length > 1 && (r2 = e2[0] + \"@\", n2 = e2[1]);\n    const s2 = function(n3, t2) {\n      const o4 = [];\n      let e3 = n3.length;\n      for (; e3--; ) {\n        o4[e3] = t2(n3[e3]);\n      }\n      return o4;\n    }((n2 = n2.replace(t, \".\")).split(\".\"), o3).join(\".\");\n    return r2 + s2;\n  }(o2, function(t2) {\n    return n.test(t2) ? \"xn--\" + function(n2) {\n      const t3 = [];\n      const o3 = (n2 = function(n3) {\n        const t4 = [];\n        let o4 = 0;\n        const e2 = n3.length;\n        for (; o4 < e2; ) {\n          const r2 = n3.charCodeAt(o4++);\n          if (r2 >= 55296 && r2 <= 56319 && o4 < e2) {\n            const e3 = n3.charCodeAt(o4++);\n            (64512 & e3) == 56320 ? t4.push(((1023 & r2) << 10) + (1023 & e3) + 65536) : (t4.push(r2), o4--);\n          } else {\n            t4.push(r2);\n          }\n        }\n        return t4;\n      }(n2)).length;\n      let f = 128;\n      let i = 0;\n      let l = 72;\n      for (const o4 of n2) {\n        o4 < 128 && t3.push(r(o4));\n      }\n      const h = t3.length;\n      let p = h;\n      for (h && t3.push(\"-\"); p < o3; ) {\n        let o4 = 2147483647;\n        for (const t4 of n2) {\n          t4 >= f && t4 < o4 && (o4 = t4);\n        }\n        const a = p + 1;\n        o4 - f > e((2147483647 - i) / a) && s(\"overflow\"), i += (o4 - f) * a, f = o4;\n        for (const o5 of n2) {\n          if (o5 < f && ++i > 2147483647 && s(\"overflow\"), o5 == f) {\n            let n3 = i;\n            for (let o6 = 36; ; o6 += 36) {\n              const s2 = o6 <= l ? 1 : o6 >= l + 26 ? 26 : o6 - l;\n              if (n3 < s2) {\n                break;\n              }\n              const u2 = n3 - s2;\n              const f2 = 36 - s2;\n              t3.push(r(c(s2 + u2 % f2, 0))), n3 = e(u2 / f2);\n            }\n            t3.push(r(c(n3, 0))), l = u(i, a, p == h), i = 0, ++p;\n          }\n        }\n        ++i, ++f;\n      }\n      return t3.join(\"\");\n    }(t2) : t2;\n  });\n}\n\nconst HASH_RE = /#/g;\nconst AMPERSAND_RE = /&/g;\nconst SLASH_RE = /\\//g;\nconst EQUAL_RE = /=/g;\nconst IM_RE = /\\?/g;\nconst PLUS_RE = /\\+/g;\nconst ENC_CARET_RE = /%5e/gi;\nconst ENC_BACKTICK_RE = /%60/gi;\nconst ENC_CURLY_OPEN_RE = /%7b/gi;\nconst ENC_PIPE_RE = /%7c/gi;\nconst ENC_CURLY_CLOSE_RE = /%7d/gi;\nconst ENC_SPACE_RE = /%20/gi;\nconst ENC_SLASH_RE = /%2f/gi;\nconst ENC_ENC_SLASH_RE = /%252f/gi;\nfunction encode(text) {\n  return encodeURI(\"\" + text).replace(ENC_PIPE_RE, \"|\");\n}\nfunction encodeHash(text) {\n  return encode(text).replace(ENC_CURLY_OPEN_RE, \"{\").replace(ENC_CURLY_CLOSE_RE, \"}\").replace(ENC_CARET_RE, \"^\");\n}\nfunction encodeQueryValue(input) {\n  return encode(typeof input === \"string\" ? input : JSON.stringify(input)).replace(PLUS_RE, \"%2B\").replace(ENC_SPACE_RE, \"+\").replace(HASH_RE, \"%23\").replace(AMPERSAND_RE, \"%26\").replace(ENC_BACKTICK_RE, \"`\").replace(ENC_CARET_RE, \"^\").replace(SLASH_RE, \"%2F\");\n}\nfunction encodeQueryKey(text) {\n  return encodeQueryValue(text).replace(EQUAL_RE, \"%3D\");\n}\nfunction encodePath(text) {\n  return encode(text).replace(HASH_RE, \"%23\").replace(IM_RE, \"%3F\").replace(ENC_ENC_SLASH_RE, \"%2F\").replace(AMPERSAND_RE, \"%26\").replace(PLUS_RE, \"%2B\");\n}\nfunction encodeParam(text) {\n  return encodePath(text).replace(SLASH_RE, \"%2F\");\n}\nfunction decode(text = \"\") {\n  try {\n    return decodeURIComponent(\"\" + text);\n  } catch {\n    return \"\" + text;\n  }\n}\nfunction decodePath(text) {\n  return decode(text.replace(ENC_SLASH_RE, \"%252F\"));\n}\nfunction decodeQueryKey(text) {\n  return decode(text.replace(PLUS_RE, \" \"));\n}\nfunction decodeQueryValue(text) {\n  return decode(text.replace(PLUS_RE, \" \"));\n}\nfunction encodeHost(name = \"\") {\n  return toASCII(name);\n}\n\nfunction parseQuery(parametersString = \"\") {\n  const object = {};\n  if (parametersString[0] === \"?\") {\n    parametersString = parametersString.slice(1);\n  }\n  for (const parameter of parametersString.split(\"&\")) {\n    const s = parameter.match(/([^=]+)=?(.*)/) || [];\n    if (s.length < 2) {\n      continue;\n    }\n    const key = decodeQueryKey(s[1]);\n    if (key === \"__proto__\" || key === \"constructor\") {\n      continue;\n    }\n    const value = decodeQueryValue(s[2] || \"\");\n    if (object[key] === void 0) {\n      object[key] = value;\n    } else if (Array.isArray(object[key])) {\n      object[key].push(value);\n    } else {\n      object[key] = [object[key], value];\n    }\n  }\n  return object;\n}\nfunction encodeQueryItem(key, value) {\n  if (typeof value === \"number\" || typeof value === \"boolean\") {\n    value = String(value);\n  }\n  if (!value) {\n    return encodeQueryKey(key);\n  }\n  if (Array.isArray(value)) {\n    return value.map((_value) => `${encodeQueryKey(key)}=${encodeQueryValue(_value)}`).join(\"&\");\n  }\n  return `${encodeQueryKey(key)}=${encodeQueryValue(value)}`;\n}\nfunction stringifyQuery(query) {\n  return Object.keys(query).filter((k) => query[k] !== void 0).map((k) => encodeQueryItem(k, query[k])).filter(Boolean).join(\"&\");\n}\n\nconst PROTOCOL_STRICT_REGEX = /^[\\s\\w\\0+.-]{2,}:([/\\\\]{1,2})/;\nconst PROTOCOL_REGEX = /^[\\s\\w\\0+.-]{2,}:([/\\\\]{2})?/;\nconst PROTOCOL_RELATIVE_REGEX = /^([/\\\\]\\s*){2,}[^/\\\\]/;\nconst PROTOCOL_SCRIPT_RE = /^[\\s\\0]*(blob|data|javascript|vbscript):$/i;\nconst TRAILING_SLASH_RE = /\\/$|\\/\\?|\\/#/;\nconst JOIN_LEADING_SLASH_RE = /^\\.?\\//;\nfunction isRelative(inputString) {\n  return [\"./\", \"../\"].some((string_) => inputString.startsWith(string_));\n}\nfunction hasProtocol(inputString, opts = {}) {\n  if (typeof opts === \"boolean\") {\n    opts = { acceptRelative: opts };\n  }\n  if (opts.strict) {\n    return PROTOCOL_STRICT_REGEX.test(inputString);\n  }\n  return PROTOCOL_REGEX.test(inputString) || (opts.acceptRelative ? PROTOCOL_RELATIVE_REGEX.test(inputString) : false);\n}\nfunction isScriptProtocol(protocol) {\n  return !!protocol && PROTOCOL_SCRIPT_RE.test(protocol);\n}\nfunction hasTrailingSlash(input = \"\", respectQueryAndFragment) {\n  if (!respectQueryAndFragment) {\n    return input.endsWith(\"/\");\n  }\n  return TRAILING_SLASH_RE.test(input);\n}\nfunction withoutTrailingSlash(input = \"\", respectQueryAndFragment) {\n  if (!respectQueryAndFragment) {\n    return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || \"/\";\n  }\n  if (!hasTrailingSlash(input, true)) {\n    return input || \"/\";\n  }\n  let path = input;\n  let fragment = \"\";\n  const fragmentIndex = input.indexOf(\"#\");\n  if (fragmentIndex >= 0) {\n    path = input.slice(0, fragmentIndex);\n    fragment = input.slice(fragmentIndex);\n  }\n  const [s0, ...s] = path.split(\"?\");\n  const cleanPath = s0.endsWith(\"/\") ? s0.slice(0, -1) : s0;\n  return (cleanPath || \"/\") + (s.length > 0 ? `?${s.join(\"?\")}` : \"\") + fragment;\n}\nfunction withTrailingSlash(input = \"\", respectQueryAndFragment) {\n  if (!respectQueryAndFragment) {\n    return input.endsWith(\"/\") ? input : input + \"/\";\n  }\n  if (hasTrailingSlash(input, true)) {\n    return input || \"/\";\n  }\n  let path = input;\n  let fragment = \"\";\n  const fragmentIndex = input.indexOf(\"#\");\n  if (fragmentIndex >= 0) {\n    path = input.slice(0, fragmentIndex);\n    fragment = input.slice(fragmentIndex);\n    if (!path) {\n      return fragment;\n    }\n  }\n  const [s0, ...s] = path.split(\"?\");\n  return s0 + \"/\" + (s.length > 0 ? `?${s.join(\"?\")}` : \"\") + fragment;\n}\nfunction hasLeadingSlash(input = \"\") {\n  return input.startsWith(\"/\");\n}\nfunction withoutLeadingSlash(input = \"\") {\n  return (hasLeadingSlash(input) ? input.slice(1) : input) || \"/\";\n}\nfunction withLeadingSlash(input = \"\") {\n  return hasLeadingSlash(input) ? input : \"/\" + input;\n}\nfunction cleanDoubleSlashes(input = \"\") {\n  return input.split(\"://\").map((string_) => string_.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n}\nfunction withBase(input, base) {\n  if (isEmptyURL(base) || hasProtocol(input)) {\n    return input;\n  }\n  const _base = withoutTrailingSlash(base);\n  if (input.startsWith(_base)) {\n    return input;\n  }\n  return joinURL(_base, input);\n}\nfunction withoutBase(input, base) {\n  if (isEmptyURL(base)) {\n    return input;\n  }\n  const _base = withoutTrailingSlash(base);\n  if (!input.startsWith(_base)) {\n    return input;\n  }\n  const trimmed = input.slice(_base.length);\n  return trimmed[0] === \"/\" ? trimmed : \"/\" + trimmed;\n}\nfunction withQuery(input, query) {\n  const parsed = parseURL(input);\n  const mergedQuery = { ...parseQuery(parsed.search), ...query };\n  parsed.search = stringifyQuery(mergedQuery);\n  return stringifyParsedURL(parsed);\n}\nfunction getQuery(input) {\n  return parseQuery(parseURL(input).search);\n}\nfunction isEmptyURL(url) {\n  return !url || url === \"/\";\n}\nfunction isNonEmptyURL(url) {\n  return url && url !== \"/\";\n}\nfunction joinURL(base, ...input) {\n  let url = base || \"\";\n  for (const segment of input.filter((url2) => isNonEmptyURL(url2))) {\n    if (url) {\n      const _segment = segment.replace(JOIN_LEADING_SLASH_RE, \"\");\n      url = withTrailingSlash(url) + _segment;\n    } else {\n      url = segment;\n    }\n  }\n  return url;\n}\nfunction joinRelativeURL(..._input) {\n  const JOIN_SEGMENT_SPLIT_RE = /\\/(?!\\/)/;\n  const input = _input.filter(Boolean);\n  const segments = [];\n  let segmentsDepth = 0;\n  for (const i of input) {\n    if (!i || i === \"/\") {\n      continue;\n    }\n    for (const [sindex, s] of i.split(JOIN_SEGMENT_SPLIT_RE).entries()) {\n      if (!s || s === \".\") {\n        continue;\n      }\n      if (s === \"..\") {\n        if (segments.length === 1 && hasProtocol(segments[0])) {\n          continue;\n        }\n        segments.pop();\n        segmentsDepth--;\n        continue;\n      }\n      if (sindex === 1 && segments[segments.length - 1]?.endsWith(\":/\")) {\n        segments[segments.length - 1] += \"/\" + s;\n        continue;\n      }\n      segments.push(s);\n      segmentsDepth++;\n    }\n  }\n  let url = segments.join(\"/\");\n  if (segmentsDepth >= 0) {\n    if (input[0]?.startsWith(\"/\") && !url.startsWith(\"/\")) {\n      url = \"/\" + url;\n    } else if (input[0]?.startsWith(\"./\") && !url.startsWith(\"./\")) {\n      url = \"./\" + url;\n    }\n  } else {\n    url = \"../\".repeat(-1 * segmentsDepth) + url;\n  }\n  if (input[input.length - 1]?.endsWith(\"/\") && !url.endsWith(\"/\")) {\n    url += \"/\";\n  }\n  return url;\n}\nfunction withHttp(input) {\n  return withProtocol(input, \"http://\");\n}\nfunction withHttps(input) {\n  return withProtocol(input, \"https://\");\n}\nfunction withoutProtocol(input) {\n  return withProtocol(input, \"\");\n}\nfunction withProtocol(input, protocol) {\n  let match = input.match(PROTOCOL_REGEX);\n  if (!match) {\n    match = input.match(/^\\/{2,}/);\n  }\n  if (!match) {\n    return protocol + input;\n  }\n  return protocol + input.slice(match[0].length);\n}\nfunction normalizeURL(input) {\n  const parsed = parseURL(input);\n  parsed.pathname = encodePath(decodePath(parsed.pathname));\n  parsed.hash = encodeHash(decode(parsed.hash));\n  parsed.host = encodeHost(decode(parsed.host));\n  parsed.search = stringifyQuery(parseQuery(parsed.search));\n  return stringifyParsedURL(parsed);\n}\nfunction resolveURL(base = \"\", ...inputs) {\n  if (typeof base !== \"string\") {\n    throw new TypeError(\n      `URL input should be string received ${typeof base} (${base})`\n    );\n  }\n  const filteredInputs = inputs.filter((input) => isNonEmptyURL(input));\n  if (filteredInputs.length === 0) {\n    return base;\n  }\n  const url = parseURL(base);\n  for (const inputSegment of filteredInputs) {\n    const urlSegment = parseURL(inputSegment);\n    if (urlSegment.pathname) {\n      url.pathname = withTrailingSlash(url.pathname) + withoutLeadingSlash(urlSegment.pathname);\n    }\n    if (urlSegment.hash && urlSegment.hash !== \"#\") {\n      url.hash = urlSegment.hash;\n    }\n    if (urlSegment.search && urlSegment.search !== \"?\") {\n      if (url.search && url.search !== \"?\") {\n        const queryString = stringifyQuery({\n          ...parseQuery(url.search),\n          ...parseQuery(urlSegment.search)\n        });\n        url.search = queryString.length > 0 ? \"?\" + queryString : \"\";\n      } else {\n        url.search = urlSegment.search;\n      }\n    }\n  }\n  return stringifyParsedURL(url);\n}\nfunction isSamePath(p1, p2) {\n  return decode(withoutTrailingSlash(p1)) === decode(withoutTrailingSlash(p2));\n}\nfunction isEqual(a, b, options = {}) {\n  if (!options.trailingSlash) {\n    a = withTrailingSlash(a);\n    b = withTrailingSlash(b);\n  }\n  if (!options.leadingSlash) {\n    a = withLeadingSlash(a);\n    b = withLeadingSlash(b);\n  }\n  if (!options.encoding) {\n    a = decode(a);\n    b = decode(b);\n  }\n  return a === b;\n}\nfunction withFragment(input, hash) {\n  if (!hash || hash === \"#\") {\n    return input;\n  }\n  const parsed = parseURL(input);\n  parsed.hash = hash === \"\" ? \"\" : \"#\" + encodeHash(hash);\n  return stringifyParsedURL(parsed);\n}\nfunction withoutFragment(input) {\n  return stringifyParsedURL({ ...parseURL(input), hash: \"\" });\n}\nfunction withoutHost(input) {\n  const parsed = parseURL(input);\n  return (parsed.pathname || \"/\") + parsed.search + parsed.hash;\n}\n\nconst protocolRelative = Symbol.for(\"ufo:protocolRelative\");\nfunction parseURL(input = \"\", defaultProto) {\n  const _specialProtoMatch = input.match(\n    /^[\\s\\0]*(blob:|data:|javascript:|vbscript:)(.*)/i\n  );\n  if (_specialProtoMatch) {\n    const [, _proto, _pathname = \"\"] = _specialProtoMatch;\n    return {\n      protocol: _proto.toLowerCase(),\n      pathname: _pathname,\n      href: _proto + _pathname,\n      auth: \"\",\n      host: \"\",\n      search: \"\",\n      hash: \"\"\n    };\n  }\n  if (!hasProtocol(input, { acceptRelative: true })) {\n    return defaultProto ? parseURL(defaultProto + input) : parsePath(input);\n  }\n  const [, protocol = \"\", auth, hostAndPath = \"\"] = input.replace(/\\\\/g, \"/\").match(/^[\\s\\0]*([\\w+.-]{2,}:)?\\/\\/([^/@]+@)?(.*)/) || [];\n  let [, host = \"\", path = \"\"] = hostAndPath.match(/([^#/?]*)(.*)?/) || [];\n  if (protocol === \"file:\") {\n    path = path.replace(/\\/(?=[A-Za-z]:)/, \"\");\n  }\n  const { pathname, search, hash } = parsePath(path);\n  return {\n    protocol: protocol.toLowerCase(),\n    auth: auth ? auth.slice(0, Math.max(0, auth.length - 1)) : \"\",\n    host,\n    pathname,\n    search,\n    hash,\n    [protocolRelative]: !protocol\n  };\n}\nfunction parsePath(input = \"\") {\n  const [pathname = \"\", search = \"\", hash = \"\"] = (input.match(/([^#?]*)(\\?[^#]*)?(#.*)?/) || []).splice(1);\n  return {\n    pathname,\n    search,\n    hash\n  };\n}\nfunction parseAuth(input = \"\") {\n  const [username, password] = input.split(\":\");\n  return {\n    username: decode(username),\n    password: decode(password)\n  };\n}\nfunction parseHost(input = \"\") {\n  const [hostname, port] = (input.match(/([^/:]*):?(\\d+)?/) || []).splice(1);\n  return {\n    hostname: decode(hostname),\n    port\n  };\n}\nfunction stringifyParsedURL(parsed) {\n  const pathname = parsed.pathname || \"\";\n  const search = parsed.search ? (parsed.search.startsWith(\"?\") ? \"\" : \"?\") + parsed.search : \"\";\n  const hash = parsed.hash || \"\";\n  const auth = parsed.auth ? parsed.auth + \"@\" : \"\";\n  const host = parsed.host || \"\";\n  const proto = parsed.protocol || parsed[protocolRelative] ? (parsed.protocol || \"\") + \"//\" : \"\";\n  return proto + auth + host + pathname + search + hash;\n}\nconst FILENAME_STRICT_REGEX = /\\/([^/]+\\.[^/]+)$/;\nconst FILENAME_REGEX = /\\/([^/]+)$/;\nfunction parseFilename(input = \"\", { strict }) {\n  const { pathname } = parseURL(input);\n  const matches = strict ? pathname.match(FILENAME_STRICT_REGEX) : pathname.match(FILENAME_REGEX);\n  return matches ? matches[1] : void 0;\n}\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass $URL {\n  constructor(input = \"\") {\n    __publicField(this, \"protocol\");\n    __publicField(this, \"host\");\n    __publicField(this, \"auth\");\n    __publicField(this, \"pathname\");\n    __publicField(this, \"query\", {});\n    __publicField(this, \"hash\");\n    if (typeof input !== \"string\") {\n      throw new TypeError(\n        `URL input should be string received ${typeof input} (${input})`\n      );\n    }\n    const parsed = parseURL(input);\n    this.protocol = decode(parsed.protocol);\n    this.host = decode(parsed.host);\n    this.auth = decode(parsed.auth);\n    this.pathname = decodePath(parsed.pathname);\n    this.query = parseQuery(parsed.search);\n    this.hash = decode(parsed.hash);\n  }\n  get hostname() {\n    return parseHost(this.host).hostname;\n  }\n  get port() {\n    return parseHost(this.host).port || \"\";\n  }\n  get username() {\n    return parseAuth(this.auth).username;\n  }\n  get password() {\n    return parseAuth(this.auth).password || \"\";\n  }\n  get hasProtocol() {\n    return this.protocol.length;\n  }\n  get isAbsolute() {\n    return this.hasProtocol || this.pathname[0] === \"/\";\n  }\n  get search() {\n    const q = stringifyQuery(this.query);\n    return q.length > 0 ? \"?\" + q : \"\";\n  }\n  get searchParams() {\n    const p = new URLSearchParams();\n    for (const name in this.query) {\n      const value = this.query[name];\n      if (Array.isArray(value)) {\n        for (const v of value) {\n          p.append(name, v);\n        }\n      } else {\n        p.append(\n          name,\n          typeof value === \"string\" ? value : JSON.stringify(value)\n        );\n      }\n    }\n    return p;\n  }\n  get origin() {\n    return (this.protocol ? this.protocol + \"//\" : \"\") + encodeHost(this.host);\n  }\n  get fullpath() {\n    return encodePath(this.pathname) + this.search + encodeHash(this.hash);\n  }\n  get encodedAuth() {\n    if (!this.auth) {\n      return \"\";\n    }\n    const { username, password } = parseAuth(this.auth);\n    return encodeURIComponent(username) + (password ? \":\" + encodeURIComponent(password) : \"\");\n  }\n  get href() {\n    const auth = this.encodedAuth;\n    const originWithAuth = (this.protocol ? this.protocol + \"//\" : \"\") + (auth ? auth + \"@\" : \"\") + encodeHost(this.host);\n    return this.hasProtocol && this.isAbsolute ? originWithAuth + this.fullpath : this.fullpath;\n  }\n  append(url) {\n    if (url.hasProtocol) {\n      throw new Error(\"Cannot append a URL with protocol\");\n    }\n    Object.assign(this.query, url.query);\n    if (url.pathname) {\n      this.pathname = withTrailingSlash(this.pathname) + withoutLeadingSlash(url.pathname);\n    }\n    if (url.hash) {\n      this.hash = url.hash;\n    }\n  }\n  toJSON() {\n    return this.href;\n  }\n  toString() {\n    return this.href;\n  }\n}\nfunction createURL(input) {\n  return new $URL(input);\n}\n\nexport { $URL, cleanDoubleSlashes, createURL, decode, decodePath, decodeQueryKey, decodeQueryValue, encode, encodeHash, encodeHost, encodeParam, encodePath, encodeQueryItem, encodeQueryKey, encodeQueryValue, getQuery, hasLeadingSlash, hasProtocol, hasTrailingSlash, isEmptyURL, isEqual, isNonEmptyURL, isRelative, isSamePath, isScriptProtocol, joinRelativeURL, joinURL, normalizeURL, parseAuth, parseFilename, parseHost, parsePath, parseQuery, parseURL, resolveURL, stringifyParsedURL, stringifyQuery, withBase, withFragment, withHttp, withHttps, withLeadingSlash, withProtocol, withQuery, withTrailingSlash, withoutBase, withoutFragment, withoutHost, withoutLeadingSlash, withoutProtocol, withoutTrailingSlash };\n","export const LayoutMetaSymbol = Symbol(\"layout-meta\");\nexport const PageRouteSymbol = Symbol(\"route\");\n","import { getCurrentInstance, hasInjectionContext, inject, onScopeDispose } from \"vue\";\nimport { sanitizeStatusCode } from \"h3\";\nimport { hasProtocol, isScriptProtocol, joinURL, withQuery } from \"ufo\";\nimport { useNuxtApp, useRuntimeConfig } from \"../nuxt.js\";\nimport { PageRouteSymbol } from \"../components/injections.js\";\nimport { createError, showError } from \"./error.js\";\nexport const useRouter = () => {\n  return useNuxtApp()?.$router;\n};\nexport const useRoute = () => {\n  if (import.meta.dev && isProcessingMiddleware()) {\n    console.warn(\"[nuxt] Calling `useRoute` within middleware may lead to misleading results. Instead, use the (to, from) arguments passed to the middleware to access the new and old routes.\");\n  }\n  if (hasInjectionContext()) {\n    return inject(PageRouteSymbol, useNuxtApp()._route);\n  }\n  return useNuxtApp()._route;\n};\nexport const onBeforeRouteLeave = (guard) => {\n  const unsubscribe = useRouter().beforeEach((to, from, next) => {\n    if (to === from) {\n      return;\n    }\n    return guard(to, from, next);\n  });\n  onScopeDispose(unsubscribe);\n};\nexport const onBeforeRouteUpdate = (guard) => {\n  const unsubscribe = useRouter().beforeEach(guard);\n  onScopeDispose(unsubscribe);\n};\n// @__NO_SIDE_EFFECTS__\nexport function defineNuxtRouteMiddleware(middleware) {\n  return middleware;\n}\nexport const addRouteMiddleware = (name, middleware, options = {}) => {\n  const nuxtApp = useNuxtApp();\n  const global = options.global || typeof name !== \"string\";\n  const mw = typeof name !== \"string\" ? name : middleware;\n  if (!mw) {\n    console.warn(\"[nuxt] No route middleware passed to `addRouteMiddleware`.\", name);\n    return;\n  }\n  if (global) {\n    nuxtApp._middleware.global.push(mw);\n  } else {\n    nuxtApp._middleware.named[name] = mw;\n  }\n};\nconst isProcessingMiddleware = () => {\n  try {\n    if (useNuxtApp()._processingMiddleware) {\n      return true;\n    }\n  } catch {\n    return false;\n  }\n  return false;\n};\nexport const navigateTo = (to, options) => {\n  if (!to) {\n    to = \"/\";\n  }\n  const toPath = typeof to === \"string\" ? to : \"path\" in to ? resolveRouteObject(to) : useRouter().resolve(to).href;\n  if (import.meta.client && options?.open) {\n    const { target = \"_blank\", windowFeatures = {} } = options.open;\n    const features = Object.entries(windowFeatures).filter(([_, value]) => value !== void 0).map(([feature, value]) => `${feature.toLowerCase()}=${value}`).join(\", \");\n    open(toPath, target, features);\n    return Promise.resolve();\n  }\n  const isExternalHost = hasProtocol(toPath, { acceptRelative: true });\n  const isExternal = options?.external || isExternalHost;\n  if (isExternal) {\n    if (!options?.external) {\n      throw new Error(\"Navigating to an external URL is not allowed by default. Use `navigateTo(url, { external: true })`.\");\n    }\n    const { protocol } = new URL(toPath, import.meta.client ? window.location.href : \"http://localhost\");\n    if (protocol && isScriptProtocol(protocol)) {\n      throw new Error(`Cannot navigate to a URL with '${protocol}' protocol.`);\n    }\n  }\n  const inMiddleware = isProcessingMiddleware();\n  if (import.meta.client && !isExternal && inMiddleware) {\n    return to;\n  }\n  const router = useRouter();\n  const nuxtApp = useNuxtApp();\n  if (import.meta.server) {\n    if (nuxtApp.ssrContext) {\n      const fullPath = typeof to === \"string\" || isExternal ? toPath : router.resolve(to).fullPath || \"/\";\n      const location2 = isExternal ? toPath : joinURL(useRuntimeConfig().app.baseURL, fullPath);\n      const redirect = async function(response) {\n        await nuxtApp.callHook(\"app:redirected\");\n        const encodedLoc = location2.replace(/\"/g, \"%22\");\n        const encodedHeader = encodeURL(location2, isExternalHost);\n        nuxtApp.ssrContext._renderResponse = {\n          statusCode: sanitizeStatusCode(options?.redirectCode || 302, 302),\n          body: `<!DOCTYPE html><html><head><meta http-equiv=\"refresh\" content=\"0; url=${encodedLoc}\"></head></html>`,\n          headers: { location: encodedHeader }\n        };\n        return response;\n      };\n      if (!isExternal && inMiddleware) {\n        router.afterEach((final) => final.fullPath === fullPath ? redirect(false) : void 0);\n        return to;\n      }\n      return redirect(!inMiddleware ? void 0 : (\n        /* abort route navigation */\n        false\n      ));\n    }\n  }\n  if (isExternal) {\n    nuxtApp._scope.stop();\n    if (options?.replace) {\n      location.replace(toPath);\n    } else {\n      location.href = toPath;\n    }\n    if (inMiddleware) {\n      if (!nuxtApp.isHydrating) {\n        return false;\n      }\n      return new Promise(() => {\n      });\n    }\n    return Promise.resolve();\n  }\n  return options?.replace ? router.replace(to) : router.push(to);\n};\nexport const abortNavigation = (err) => {\n  if (import.meta.dev && !isProcessingMiddleware()) {\n    throw new Error(\"abortNavigation() is only usable inside a route middleware handler.\");\n  }\n  if (!err) {\n    return false;\n  }\n  err = createError(err);\n  if (err.fatal) {\n    useNuxtApp().runWithContext(() => showError(err));\n  }\n  throw err;\n};\nexport const setPageLayout = (layout) => {\n  const nuxtApp = useNuxtApp();\n  if (import.meta.server) {\n    if (import.meta.dev && getCurrentInstance() && nuxtApp.payload.state._layout !== layout) {\n      console.warn(\"[warn] [nuxt] `setPageLayout` should not be called to change the layout on the server within a component as this will cause hydration errors.\");\n    }\n    nuxtApp.payload.state._layout = layout;\n  }\n  if (import.meta.dev && nuxtApp.isHydrating && nuxtApp.payload.serverRendered && nuxtApp.payload.state._layout !== layout) {\n    console.warn(\"[warn] [nuxt] `setPageLayout` should not be called to change the layout during hydration as this will cause hydration errors.\");\n  }\n  const inMiddleware = isProcessingMiddleware();\n  if (inMiddleware || import.meta.server || nuxtApp.isHydrating) {\n    const unsubscribe = useRouter().beforeResolve((to) => {\n      to.meta.layout = layout;\n      unsubscribe();\n    });\n  }\n  if (!inMiddleware) {\n    useRoute().meta.layout = layout;\n  }\n};\nexport function resolveRouteObject(to) {\n  return withQuery(to.path || \"\", to.query || {}) + (to.hash || \"\");\n}\nexport function encodeURL(location2, isExternalHost = false) {\n  const url = new URL(location2, \"http://localhost\");\n  if (!isExternalHost) {\n    return url.pathname + url.search + url.hash;\n  }\n  if (location2.startsWith(\"//\")) {\n    return url.toString().replace(url.protocol, \"\");\n  }\n  return url.toString();\n}\n","import { createError as createH3Error } from \"h3\";\nimport { toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { useRouter } from \"./router.js\";\nimport { nuxtDefaultErrorValue } from \"#build/nuxt.config.mjs\";\nexport const NUXT_ERROR_SIGNATURE = \"__nuxt_error\";\nexport const useError = () => toRef(useNuxtApp().payload, \"error\");\nexport const showError = (error) => {\n  const nuxtError = createError(error);\n  try {\n    const nuxtApp = useNuxtApp();\n    const error2 = useError();\n    if (import.meta.client) {\n      nuxtApp.hooks.callHook(\"app:error\", nuxtError);\n    }\n    error2.value = error2.value || nuxtError;\n  } catch {\n    throw nuxtError;\n  }\n  return nuxtError;\n};\nexport const clearError = async (options = {}) => {\n  const nuxtApp = useNuxtApp();\n  const error = useError();\n  nuxtApp.callHook(\"app:error:cleared\", options);\n  if (options.redirect) {\n    await useRouter().replace(options.redirect);\n  }\n  error.value = nuxtDefaultErrorValue;\n};\nexport const isNuxtError = (error) => !!error && typeof error === \"object\" && NUXT_ERROR_SIGNATURE in error;\nexport const createError = (error) => {\n  const nuxtError = createH3Error(error);\n  Object.defineProperty(nuxtError, NUXT_ERROR_SIGNATURE, {\n    value: true,\n    configurable: false,\n    writable: false\n  });\n  return nuxtError;\n};\n","import { version, unref, nextTick, inject } from 'vue';\nimport { createServerHead as createServerHead$1, createHead as createHead$1, getActiveHead } from 'unhead';\nimport { defineHeadPlugin } from '@unhead/shared';\n\nconst Vue3 = version.startsWith(\"3\");\n\nfunction resolveUnref(r) {\n  return typeof r === \"function\" ? r() : unref(r);\n}\nfunction resolveUnrefHeadInput(ref, lastKey = \"\") {\n  if (ref instanceof Promise)\n    return ref;\n  const root = resolveUnref(ref);\n  if (!ref || !root)\n    return root;\n  if (Array.isArray(root))\n    return root.map((r) => resolveUnrefHeadInput(r, lastKey));\n  if (typeof root === \"object\") {\n    return Object.fromEntries(\n      Object.entries(root).map(([k, v]) => {\n        if (k === \"titleTemplate\" || k.startsWith(\"on\"))\n          return [k, unref(v)];\n        return [k, resolveUnrefHeadInput(v, k)];\n      })\n    );\n  }\n  return root;\n}\n\nconst VueReactivityPlugin = defineHeadPlugin({\n  hooks: {\n    \"entries:resolve\": function(ctx) {\n      for (const entry of ctx.entries)\n        entry.resolvedInput = resolveUnrefHeadInput(entry.input);\n    }\n  }\n});\n\nconst headSymbol = \"usehead\";\nfunction vueInstall(head) {\n  const plugin = {\n    install(app) {\n      if (Vue3) {\n        app.config.globalProperties.$unhead = head;\n        app.config.globalProperties.$head = head;\n        app.provide(headSymbol, head);\n      }\n    }\n  };\n  return plugin.install;\n}\nfunction createServerHead(options = {}) {\n  const head = createServerHead$1(options);\n  head.use(VueReactivityPlugin);\n  head.install = vueInstall(head);\n  return head;\n}\nfunction createHead(options = {}) {\n  options.domDelayFn = options.domDelayFn || ((fn) => nextTick(() => setTimeout(() => fn(), 0)));\n  const head = createHead$1(options);\n  head.use(VueReactivityPlugin);\n  head.install = vueInstall(head);\n  return head;\n}\n\nconst _global = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nconst globalKey = \"__unhead_injection_handler__\";\nfunction setHeadInjectionHandler(handler) {\n  _global[globalKey] = handler;\n}\nfunction injectHead() {\n  if (globalKey in _global) {\n    return _global[globalKey]();\n  }\n  const head = inject(headSymbol);\n  if (!head && process.env.NODE_ENV !== \"production\")\n    console.warn(\"Unhead is missing Vue context, falling back to shared context. This may have unexpected results.\");\n  return head || getActiveHead();\n}\n\nexport { Vue3 as V, createServerHead as a, createHead as c, headSymbol as h, injectHead as i, resolveUnrefHeadInput as r, setHeadInjectionHandler as s };\n","import { ref, watchEffect, watch, getCurrentInstance, onBeforeUnmount, onDeactivated, onActivated } from 'vue';\nimport { i as injectHead, r as resolveUnrefHeadInput } from './vue.cf295fb1.mjs';\n\nfunction useHead(input, options = {}) {\n  const head = options.head || injectHead();\n  if (head) {\n    if (!head.ssr)\n      return clientUseHead(head, input, options);\n    return head.push(input, options);\n  }\n}\nfunction clientUseHead(head, input, options = {}) {\n  const deactivated = ref(false);\n  const resolvedInput = ref({});\n  watchEffect(() => {\n    resolvedInput.value = deactivated.value ? {} : resolveUnrefHeadInput(input);\n  });\n  const entry = head.push(resolvedInput.value, options);\n  watch(resolvedInput, (e) => {\n    entry.patch(e);\n  });\n  const vm = getCurrentInstance();\n  if (vm) {\n    onBeforeUnmount(() => {\n      entry.dispose();\n    });\n    onDeactivated(() => {\n      deactivated.value = true;\n    });\n    onActivated(() => {\n      deactivated.value = false;\n    });\n  }\n  return entry;\n}\n\nexport { useHead as u };\n","import { useScript as useScript$1 } from 'unhead';\nexport { CapoPlugin, HashHydrationPlugin, createHeadCore } from 'unhead';\nimport { V as Vue3, h as headSymbol, i as injectHead } from './shared/vue.cf295fb1.mjs';\nexport { c as createHead, a as createServerHead, r as resolveUnrefHeadInput, s as setHeadInjectionHandler } from './shared/vue.cf295fb1.mjs';\nimport { getCurrentInstance, ref, onMounted } from 'vue';\nimport { u as useHead } from './shared/vue.f36acd1f.mjs';\nimport { composableNames, whitelistSafeInput, unpackMeta } from '@unhead/shared';\n\nconst VueHeadMixin = {\n  created() {\n    let source = false;\n    if (Vue3) {\n      const instance = getCurrentInstance();\n      if (!instance)\n        return;\n      const options = instance.type;\n      if (!options || !(\"head\" in options))\n        return;\n      source = typeof options.head === \"function\" ? () => options.head.call(instance.proxy) : options.head;\n    } else {\n      const head = this.$options.head;\n      if (head) {\n        source = typeof head === \"function\" ? () => head.call(this) : head;\n      }\n    }\n    source && useHead(source);\n  }\n};\n\nconst Vue2ProvideUnheadPlugin = function(_Vue, head) {\n  _Vue.mixin({\n    beforeCreate() {\n      const options = this.$options;\n      const origProvide = options.provide;\n      options.provide = function() {\n        let origProvideResult;\n        if (typeof origProvide === \"function\")\n          origProvideResult = origProvide.call(this);\n        else\n          origProvideResult = origProvide || {};\n        return {\n          ...origProvideResult,\n          [headSymbol]: head\n        };\n      };\n    }\n  });\n};\n\nconst coreComposableNames = [\n  \"injectHead\"\n];\nconst unheadVueComposablesImports = {\n  \"@unhead/vue\": [...coreComposableNames, ...composableNames]\n};\n\nfunction useHeadSafe(input, options = {}) {\n  return useHead(input, { ...options, transform: whitelistSafeInput });\n}\n\nfunction useSeoMeta(input, options) {\n  const { title, titleTemplate, ...meta } = input;\n  return useHead({\n    title,\n    titleTemplate,\n    // @ts-expect-error runtime type\n    _flatMeta: meta\n  }, {\n    ...options,\n    transform(t) {\n      const meta2 = unpackMeta({ ...t._flatMeta });\n      delete t._flatMeta;\n      return {\n        // @ts-expect-error runtime type\n        ...t,\n        meta: meta2\n      };\n    }\n  });\n}\n\nfunction useServerHead(input, options = {}) {\n  const head = options.head || injectHead();\n  delete options.head;\n  if (head)\n    return head.push(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerHeadSafe(input, options = {}) {\n  return useHeadSafe(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerSeoMeta(input, options) {\n  return useSeoMeta(input, { ...options || {}, mode: \"server\" });\n}\n\nfunction useScript(_input, _options) {\n  const input = typeof _input === \"string\" ? { src: _input } : _input;\n  const head = injectHead();\n  const options = _options || {};\n  options.head = head;\n  options.eventContext = getCurrentInstance();\n  const status = ref(\"awaitingLoad\");\n  const stubOptions = options.stub;\n  options.stub = ({ script, fn }) => {\n    script.status = status;\n    if (fn === \"$script\")\n      return script;\n    return stubOptions?.({ script, fn });\n  };\n  let instance;\n  const _ = head.hooks.hook(\"script:updated\", ({ script }) => {\n    if (instance && script.id === instance.$script.id) {\n      status.value = script.status;\n      script.status === \"removed\" && _();\n    }\n  });\n  const scope = getCurrentInstance();\n  if (scope && !options.trigger)\n    options.trigger = onMounted;\n  instance = useScript$1(input, options);\n  return instance;\n}\n\nexport { Vue2ProvideUnheadPlugin, VueHeadMixin, injectHead, unheadVueComposablesImports, useHead, useHeadSafe, useScript, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta };\n","import { CapoPlugin } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/@unhead/vue/dist/index.mjs\";\nexport default import.meta.server ? [CapoPlugin({ track: true })] : [];","import { createHead as createClientHead, setHeadInjectionHandler } from \"@unhead/vue\";\nimport { renderDOMHead } from \"@unhead/dom\";\nimport { defineNuxtPlugin, useNuxtApp } from \"#app/nuxt\";\nimport unheadPlugins from \"#build/unhead-plugins.mjs\";\nexport default defineNuxtPlugin({\n  name: \"nuxt:head\",\n  enforce: \"pre\",\n  setup(nuxtApp) {\n    const head = import.meta.server ? nuxtApp.ssrContext.head : createClientHead({\n      plugins: unheadPlugins\n    });\n    setHeadInjectionHandler(\n      // need a fresh instance of the nuxt app to avoid parallel requests interfering with each other\n      () => useNuxtApp().vueApp._context.provides.usehead\n    );\n    nuxtApp.vueApp.use(head);\n    if (import.meta.client) {\n      let pauseDOMUpdates = true;\n      const syncHead = async () => {\n        pauseDOMUpdates = false;\n        await renderDOMHead(head);\n      };\n      head.hooks.hook(\"dom:beforeRender\", (context) => {\n        context.shouldRender = !pauseDOMUpdates;\n      });\n      nuxtApp.hooks.hook(\"page:start\", () => {\n        pauseDOMUpdates = true;\n      });\n      nuxtApp.hooks.hook(\"page:finish\", () => {\n        if (!nuxtApp.isHydrating) {\n          syncHead();\n        }\n      });\n      nuxtApp.hooks.hook(\"app:error\", syncHead);\n      nuxtApp.hooks.hook(\"app:suspense:resolve\", syncHead);\n    }\n  }\n});\n","function createContext(opts = {}) {\n  let currentInstance;\n  let isSingleton = false;\n  const checkConflict = (instance) => {\n    if (currentInstance && currentInstance !== instance) {\n      throw new Error(\"Context conflict\");\n    }\n  };\n  let als;\n  if (opts.asyncContext) {\n    const _AsyncLocalStorage = opts.AsyncLocalStorage || globalThis.AsyncLocalStorage;\n    if (_AsyncLocalStorage) {\n      als = new _AsyncLocalStorage();\n    } else {\n      console.warn(\"[unctx] `AsyncLocalStorage` is not provided.\");\n    }\n  }\n  const _getCurrentInstance = () => {\n    if (als && currentInstance === void 0) {\n      const instance = als.getStore();\n      if (instance !== void 0) {\n        return instance;\n      }\n    }\n    return currentInstance;\n  };\n  return {\n    use: () => {\n      const _instance = _getCurrentInstance();\n      if (_instance === void 0) {\n        throw new Error(\"Context is not available\");\n      }\n      return _instance;\n    },\n    tryUse: () => {\n      return _getCurrentInstance();\n    },\n    set: (instance, replace) => {\n      if (!replace) {\n        checkConflict(instance);\n      }\n      currentInstance = instance;\n      isSingleton = true;\n    },\n    unset: () => {\n      currentInstance = void 0;\n      isSingleton = false;\n    },\n    call: (instance, callback) => {\n      checkConflict(instance);\n      currentInstance = instance;\n      try {\n        return als ? als.run(instance, callback) : callback();\n      } finally {\n        if (!isSingleton) {\n          currentInstance = void 0;\n        }\n      }\n    },\n    async callAsync(instance, callback) {\n      currentInstance = instance;\n      const onRestore = () => {\n        currentInstance = instance;\n      };\n      const onLeave = () => currentInstance === instance ? onRestore : void 0;\n      asyncHandlers.add(onLeave);\n      try {\n        const r = als ? als.run(instance, callback) : callback();\n        if (!isSingleton) {\n          currentInstance = void 0;\n        }\n        return await r;\n      } finally {\n        asyncHandlers.delete(onLeave);\n      }\n    }\n  };\n}\nfunction createNamespace(defaultOpts = {}) {\n  const contexts = {};\n  return {\n    get(key, opts = {}) {\n      if (!contexts[key]) {\n        contexts[key] = createContext({ ...defaultOpts, ...opts });\n      }\n      contexts[key];\n      return contexts[key];\n    }\n  };\n}\nconst _globalThis = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : {};\nconst globalKey = \"__unctx__\";\nconst defaultNamespace = _globalThis[globalKey] || (_globalThis[globalKey] = createNamespace());\nconst getContext = (key, opts = {}) => defaultNamespace.get(key, opts);\nconst useContext = (key, opts = {}) => getContext(key, opts).use;\nconst asyncHandlersKey = \"__unctx_async_handlers__\";\nconst asyncHandlers = _globalThis[asyncHandlersKey] || (_globalThis[asyncHandlersKey] = /* @__PURE__ */ new Set());\nfunction executeAsync(function_) {\n  const restores = [];\n  for (const leaveHandler of asyncHandlers) {\n    const restore2 = leaveHandler();\n    if (restore2) {\n      restores.push(restore2);\n    }\n  }\n  const restore = () => {\n    for (const restore2 of restores) {\n      restore2();\n    }\n  };\n  let awaitable = function_();\n  if (awaitable && typeof awaitable === \"object\" && \"catch\" in awaitable) {\n    awaitable = awaitable.catch((error) => {\n      restore();\n      throw error;\n    });\n  }\n  return [awaitable, restore];\n}\nfunction withAsyncContext(function_, transformed) {\n  if (!transformed) {\n    console.warn(\n      \"[unctx] `withAsyncContext` needs transformation for async context support in\",\n      function_,\n      \"\\n\",\n      function_.toString()\n    );\n  }\n  return function_;\n}\n\nexport { createContext, createNamespace, defaultNamespace, executeAsync, getContext, useContext, withAsyncContext };\n","import { KeepAlive, h } from \"vue\";\nconst interpolatePath = (route, match) => {\n  return match.path.replace(/(:\\w+)\\([^)]+\\)/g, \"$1\").replace(/(:\\w+)[?+*]/g, \"$1\").replace(/:\\w+/g, (r) => route.params[r.slice(1)]?.toString() || \"\");\n};\nexport const generateRouteKey = (routeProps, override) => {\n  const matchedRoute = routeProps.route.matched.find((m) => m.components?.default === routeProps.Component.type);\n  const source = override ?? matchedRoute?.meta.key ?? (matchedRoute && interpolatePath(routeProps.route, matchedRoute));\n  return typeof source === \"function\" ? source(routeProps.route) : source;\n};\nexport const wrapInKeepAlive = (props, children) => {\n  return { default: () => import.meta.client && props ? h(KeepAlive, props === true ? {} : props, children) : children };\n};\nexport function toArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n","import { createMatcherFromExport, createRouter as createRadixRouter, toRouteMatcher } from \"radix3\";\nimport { defu } from \"defu\";\nimport { useRuntimeConfig } from \"../nuxt.js\";\nimport { appManifest as isAppManifestEnabled } from \"#build/nuxt.config.mjs\";\nimport { buildAssetsURL } from \"#internal/nuxt/paths\";\nlet manifest;\nlet matcher;\nfunction fetchManifest() {\n  if (!isAppManifestEnabled) {\n    throw new Error(\"[nuxt] app manifest should be enabled with `experimental.appManifest`\");\n  }\n  manifest = $fetch(buildAssetsURL(`builds/meta/${useRuntimeConfig().app.buildId}.json`), {\n    responseType: \"json\"\n  });\n  manifest.then((m) => {\n    matcher = createMatcherFromExport(m.matcher);\n  }).catch((e) => {\n    console.error(\"[nuxt] Error fetching app manifest.\", e);\n  });\n  return manifest;\n}\nexport function getAppManifest() {\n  if (!isAppManifestEnabled) {\n    throw new Error(\"[nuxt] app manifest should be enabled with `experimental.appManifest`\");\n  }\n  return manifest || fetchManifest();\n}\nexport async function getRouteRules(url) {\n  if (import.meta.server) {\n    const _routeRulesMatcher = toRouteMatcher(\n      createRadixRouter({ routes: useRuntimeConfig().nitro.routeRules })\n    );\n    return defu({}, ..._routeRulesMatcher.matchAll(url).reverse());\n  }\n  await getAppManifest();\n  if (!matcher) {\n    console.error(\"[nuxt] Error creating app manifest matcher.\", matcher);\n    return {};\n  }\n  try {\n    return defu({}, ...matcher.matchAll(url).reverse());\n  } catch (e) {\n    console.error(\"[nuxt] Error matching route rules.\", e);\n    return {};\n  }\n}\n","import { default as akciokhnOoy9y3BzMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/akciok.vue?macro=true\";\nimport { default as categorieslrqt2GPxRdMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/categories.vue?macro=true\";\nimport { default as checkouteqWK5ss8XsMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/checkout.vue?macro=true\";\nimport { default as contact76DFzTcLwqMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/contact.vue?macro=true\";\nimport { default as dekoracioFxiP8tXe8jMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/dekoracio.vue?macro=true\";\nimport { default as fuggony5dTaAcOrWjMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/fuggony.vue?macro=true\";\nimport { default as indexI3QOAXAjZBMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/index.vue?macro=true\";\nimport { default as kapcsolatxgAataiKtxMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/kapcsolat.vue?macro=true\";\nimport { default as lakastextil5nQ7pViw9TMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/lakastextil.vue?macro=true\";\nimport { default as indexVlxA2FuV7xMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/my-account/index.vue?macro=true\";\nimport { default as lost_45passwordNUcLnWWAKxMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/my-account/lost-password.vue?macro=true\";\nimport { default as order_45summaryFOQe8GRrfLMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/order-summary.vue?macro=true\";\nimport { default as _91id_93KBCuXU7AzmMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/posts/[id].vue?macro=true\";\nimport { default as _91slug_93Au7VCcV5AIMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/product-category/[slug].vue?macro=true\";\nimport { default as _91slug_93TAuJyhpjErMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/product/[slug].vue?macro=true\";\nimport { default as productsp5Ovi7hQQAMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/products.vue?macro=true\";\nimport { default as rovidaruTR3vCWRzRXMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/rovidaru.vue?macro=true\";\nimport { default as sotetitoHMf7BVMAbeMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/sotetito.vue?macro=true\";\nimport { default as wishlistTJUys1lViGMeta } from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/wishlist.vue?macro=true\";\nexport default [\n  {\n    name: \"akciok\",\n    path: \"/akciok\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/akciok.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"categories\",\n    path: \"/categories\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/categories.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"checkout\",\n    path: \"/checkout\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/checkout.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"contact\",\n    path: \"/contact\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/contact.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"dekoracio\",\n    path: \"/dekoracio\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/dekoracio.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"fuggony\",\n    path: \"/fuggony\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/fuggony.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"index\",\n    path: \"/\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/index.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"kapcsolat\",\n    path: \"/kapcsolat\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/kapcsolat.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"lakastextil\",\n    path: \"/lakastextil\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/lakastextil.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"my-account\",\n    path: \"/my-account\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/my-account/index.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"my-account-lost-password\",\n    path: \"/my-account/lost-password\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/my-account/lost-password.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"order-summary\",\n    path: \"/order-summary\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/order-summary.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"posts-id\",\n    path: \"/posts/:id()\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/posts/[id].vue\").then(m => m.default || m)\n  },\n  {\n    name: \"product-category-slug\",\n    path: \"/product-category/:slug()\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/product-category/[slug].vue\").then(m => m.default || m)\n  },\n  {\n    name: \"product-slug\",\n    path: \"/product/:slug()\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/product/[slug].vue\").then(m => m.default || m)\n  },\n  {\n    name: \"products\",\n    path: \"/products\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/products.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"rovidaru\",\n    path: \"/rovidaru\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/rovidaru.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"sotetito\",\n    path: \"/sotetito\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/sotetito.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"wishlist\",\n    path: \"/wishlist\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/wishlist.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"product-page-pager\",\n    path: \"/products/page/:pageNumber\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/products.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"product-category-page\",\n    path: \"/product-category/:categorySlug\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/product-category/[slug].vue\").then(m => m.default || m)\n  },\n  {\n    name: \"product-category-page-pager\",\n    path: \"/product-category/:categorySlug/page/:pageNumber\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/product-category/[slug].vue\").then(m => m.default || m)\n  },\n  {\n    name: \"order-received\",\n    path: \"/checkout/order-received/:orderId\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/order-summary.vue\").then(m => m.default || m)\n  },\n  {\n    name: \"order-summary\",\n    path: \"/order-summary/:orderId\",\n    component: () => import(\"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/pages/order-summary.vue\").then(m => m.default || m)\n  }\n]","import { h } from \"vue\";\nimport { isString, isPromise, isArray, isObject } from \"@vue/shared\";\nimport { START_LOCATION } from \"#build/pages\";\nexport const _wrapIf = (component, props, slots) => {\n  props = props === true ? {} : props;\n  return { default: () => props ? h(component, props, slots) : slots.default?.() };\n};\nfunction generateRouteKey(route) {\n  const source = route?.meta.key ?? route.path.replace(/(:\\w+)\\([^)]+\\)/g, \"$1\").replace(/(:\\w+)[?+*]/g, \"$1\").replace(/:\\w+/g, (r) => route.params[r.slice(1)]?.toString() || \"\");\n  return typeof source === \"function\" ? source(route) : source;\n}\nexport function isChangingPage(to, from) {\n  if (to === from || from === START_LOCATION) {\n    return false;\n  }\n  if (generateRouteKey(to) !== generateRouteKey(from)) {\n    return true;\n  }\n  const areComponentsSame = to.matched.every(\n    (comp, index) => comp.components && comp.components.default === from.matched[index]?.components?.default\n  );\n  if (areComponentsSame) {\n    return false;\n  }\n  return true;\n}\nexport function createBuffer() {\n  let appendable = false;\n  const buffer = [];\n  return {\n    getBuffer() {\n      return buffer;\n    },\n    push(item) {\n      const isStringItem = isString(item);\n      if (appendable && isStringItem) {\n        buffer[buffer.length - 1] += item;\n      } else {\n        buffer.push(item);\n      }\n      appendable = isStringItem;\n      if (isPromise(item) || isArray(item) && item.hasAsync) {\n        buffer.hasAsync = true;\n      }\n    }\n  };\n}\nexport function vforToArray(source) {\n  if (isArray(source)) {\n    return source;\n  } else if (isString(source)) {\n    return source.split(\"\");\n  } else if (typeof source === \"number\") {\n    if (import.meta.dev && !Number.isInteger(source)) {\n      console.warn(`The v-for range expect an integer value but got ${source}.`);\n    }\n    const array = [];\n    for (let i = 0; i < source; i++) {\n      array[i] = i;\n    }\n    return array;\n  } else if (isObject(source)) {\n    if (source[Symbol.iterator]) {\n      return Array.from(\n        source,\n        (item) => item\n      );\n    } else {\n      const keys = Object.keys(source);\n      const array = new Array(keys.length);\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const key = keys[i];\n        array[i] = source[key];\n      }\n      return array;\n    }\n  }\n  return [];\n}\nexport function getFragmentHTML(element, withoutSlots = false) {\n  if (element) {\n    if (element.nodeName === \"#comment\" && element.nodeValue === \"[\") {\n      return getFragmentChildren(element, [], withoutSlots);\n    }\n    if (withoutSlots) {\n      const clone = element.cloneNode(true);\n      clone.querySelectorAll(\"[data-island-slot]\").forEach((n) => {\n        n.innerHTML = \"\";\n      });\n      return [clone.outerHTML];\n    }\n    return [element.outerHTML];\n  }\n  return null;\n}\nfunction getFragmentChildren(element, blocks = [], withoutSlots = false) {\n  if (element && element.nodeName) {\n    if (isEndFragment(element)) {\n      return blocks;\n    } else if (!isStartFragment(element)) {\n      const clone = element.cloneNode(true);\n      if (withoutSlots) {\n        clone.querySelectorAll(\"[data-island-slot]\").forEach((n) => {\n          n.innerHTML = \"\";\n        });\n      }\n      blocks.push(clone.outerHTML);\n    }\n    getFragmentChildren(element.nextSibling, blocks, withoutSlots);\n  }\n  return blocks;\n}\nfunction isStartFragment(element) {\n  return element.nodeName === \"#comment\" && element.nodeValue === \"[\";\n}\nfunction isEndFragment(element) {\n  return element.nodeName === \"#comment\" && element.nodeValue === \"]\";\n}\n","import { useNuxtApp } from \"#app/nuxt\";\nimport { isChangingPage } from \"#app/components/utils\";\nimport { useRouter } from \"#app/composables/router\";\nimport { appPageTransition as defaultPageTransition } from \"#build/nuxt.config.mjs\";\nexport default {\n  scrollBehavior(to, from, savedPosition) {\n    const nuxtApp = useNuxtApp();\n    const behavior = useRouter().options?.scrollBehaviorType ?? \"auto\";\n    let position = savedPosition || void 0;\n    const routeAllowsScrollToTop = typeof to.meta.scrollToTop === \"function\" ? to.meta.scrollToTop(to, from) : to.meta.scrollToTop;\n    if (!position && from && to && routeAllowsScrollToTop !== false && isChangingPage(to, from)) {\n      position = { left: 0, top: 0 };\n    }\n    if (to.path === from.path) {\n      if (from.hash && !to.hash) {\n        return { left: 0, top: 0 };\n      }\n      if (to.hash) {\n        return { el: to.hash, top: _getHashElementScrollMarginTop(to.hash), behavior };\n      }\n      return false;\n    }\n    const hasTransition = (route) => !!(route.meta.pageTransition ?? defaultPageTransition);\n    const hookToWait = hasTransition(from) && hasTransition(to) ? \"page:transition:finish\" : \"page:finish\";\n    return new Promise((resolve) => {\n      nuxtApp.hooks.hookOnce(hookToWait, async () => {\n        await new Promise((resolve2) => setTimeout(resolve2, 0));\n        if (to.hash) {\n          position = { el: to.hash, top: _getHashElementScrollMarginTop(to.hash), behavior };\n        }\n        resolve(position);\n      });\n    });\n  }\n};\nfunction _getHashElementScrollMarginTop(selector) {\n  try {\n    const elem = document.querySelector(selector);\n    if (elem) {\n      return Number.parseFloat(getComputedStyle(elem).scrollMarginTop) + Number.parseFloat(getComputedStyle(document.documentElement).scrollPaddingTop);\n    }\n  } catch {\n  }\n  return 0;\n}\n","import routerOptions0 from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/nuxt/dist/pages/runtime/router.options\";\nconst configRouterOptions = {\n  hashMode: false,\n  scrollBehaviorType: \"auto\"\n}\nexport default {\n...configRouterOptions,\n...routerOptions0,\n}","import { createError, showError } from \"#app/composables/error\";\nimport { useNuxtApp } from \"#app/nuxt\";\nimport { defineNuxtRouteMiddleware, useRouter } from \"#app/composables/router\";\nexport default defineNuxtRouteMiddleware(async (to) => {\n  if (!to.meta?.validate) {\n    return;\n  }\n  const nuxtApp = useNuxtApp();\n  const router = useRouter();\n  const result = await Promise.resolve(to.meta.validate(to));\n  if (result === true) {\n    return;\n  }\n  if (import.meta.server) {\n    return result;\n  }\n  const error = createError({\n    statusCode: 404,\n    statusMessage: `Page Not Found: ${to.fullPath}`,\n    data: {\n      path: to.fullPath\n    }\n  });\n  const unsub = router.beforeResolve((final) => {\n    unsub();\n    if (final === to) {\n      const unsub2 = router.afterEach(async () => {\n        unsub2();\n        await nuxtApp.runWithContext(() => showError(error));\n        window.history.pushState({}, \"\", to.fullPath);\n      });\n      return false;\n    }\n  });\n});\n","import { hasProtocol } from \"ufo\";\nimport { defineNuxtRouteMiddleware } from \"../composables/router.js\";\nimport { getRouteRules } from \"../composables/manifest.js\";\nexport default defineNuxtRouteMiddleware(async (to) => {\n  if (import.meta.server || import.meta.test) {\n    return;\n  }\n  const rules = await getRouteRules(to.path);\n  if (rules.redirect) {\n    if (hasProtocol(rules.redirect, { acceptRelative: true })) {\n      window.location.href = rules.redirect;\n      return false;\n    }\n    return rules.redirect;\n  }\n});\n","import validate from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/nuxt/dist/pages/runtime/validate.js\";\nimport manifest_45route_45rule from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/nuxt/dist/app/middleware/manifest-route-rule.js\";\nexport const globalMiddleware = [\n  validate,\n  manifest_45route_45rule\n]\nexport const namedMiddleware = {}","import { isReadonly, reactive, shallowReactive, shallowRef } from \"vue\";\nimport { START_LOCATION, createMemoryHistory, createRouter, createWebHashHistory, createWebHistory } from \"vue-router\";\nimport { createError } from \"h3\";\nimport { isEqual, withoutBase } from \"ufo\";\nimport { toArray } from \"../utils.js\";\nimport { getRouteRules } from \"#app/composables/manifest\";\nimport { defineNuxtPlugin, useRuntimeConfig } from \"#app/nuxt\";\nimport { clearError, showError, useError } from \"#app/composables/error\";\nimport { navigateTo } from \"#app/composables/router\";\nimport { appManifest as isAppManifestEnabled } from \"#build/nuxt.config.mjs\";\nimport _routes from \"#build/routes\";\nimport routerOptions from \"#build/router.options\";\nimport { globalMiddleware, namedMiddleware } from \"#build/middleware\";\nfunction createCurrentLocation(base, location, renderedPath) {\n  const { pathname, search, hash } = location;\n  const hashPos = base.indexOf(\"#\");\n  if (hashPos > -1) {\n    const slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;\n    let pathFromHash = hash.slice(slicePos);\n    if (pathFromHash[0] !== \"/\") {\n      pathFromHash = \"/\" + pathFromHash;\n    }\n    return withoutBase(pathFromHash, \"\");\n  }\n  const displayedPath = withoutBase(pathname, base);\n  const path = !renderedPath || isEqual(displayedPath, renderedPath, { trailingSlash: true }) ? displayedPath : renderedPath;\n  return path + (path.includes(\"?\") ? \"\" : search) + hash;\n}\nconst plugin = defineNuxtPlugin({\n  name: \"nuxt:router\",\n  enforce: \"pre\",\n  async setup(nuxtApp) {\n    let routerBase = useRuntimeConfig().app.baseURL;\n    if (routerOptions.hashMode && !routerBase.includes(\"#\")) {\n      routerBase += \"#\";\n    }\n    const history = routerOptions.history?.(routerBase) ?? (import.meta.client ? routerOptions.hashMode ? createWebHashHistory(routerBase) : createWebHistory(routerBase) : createMemoryHistory(routerBase));\n    const routes = routerOptions.routes?.(_routes) ?? _routes;\n    let startPosition;\n    const router = createRouter({\n      ...routerOptions,\n      scrollBehavior: (to, from, savedPosition) => {\n        if (from === START_LOCATION) {\n          startPosition = savedPosition;\n          return;\n        }\n        if (routerOptions.scrollBehavior) {\n          router.options.scrollBehavior = routerOptions.scrollBehavior;\n          if (\"scrollRestoration\" in window.history) {\n            const unsub = router.beforeEach(() => {\n              unsub();\n              window.history.scrollRestoration = \"manual\";\n            });\n          }\n          return routerOptions.scrollBehavior(to, START_LOCATION, startPosition || savedPosition);\n        }\n      },\n      history,\n      routes\n    });\n    if (import.meta.client && \"scrollRestoration\" in window.history) {\n      window.history.scrollRestoration = \"auto\";\n    }\n    nuxtApp.vueApp.use(router);\n    const previousRoute = shallowRef(router.currentRoute.value);\n    router.afterEach((_to, from) => {\n      previousRoute.value = from;\n    });\n    Object.defineProperty(nuxtApp.vueApp.config.globalProperties, \"previousRoute\", {\n      get: () => previousRoute.value\n    });\n    const initialURL = import.meta.server ? nuxtApp.ssrContext.url : createCurrentLocation(routerBase, window.location, nuxtApp.payload.path);\n    const _route = shallowRef(router.currentRoute.value);\n    const syncCurrentRoute = () => {\n      _route.value = router.currentRoute.value;\n    };\n    nuxtApp.hook(\"page:finish\", syncCurrentRoute);\n    router.afterEach((to, from) => {\n      if (to.matched[0]?.components?.default === from.matched[0]?.components?.default) {\n        syncCurrentRoute();\n      }\n    });\n    const route = {};\n    for (const key in _route.value) {\n      Object.defineProperty(route, key, {\n        get: () => _route.value[key]\n      });\n    }\n    nuxtApp._route = shallowReactive(route);\n    nuxtApp._middleware = nuxtApp._middleware || {\n      global: [],\n      named: {}\n    };\n    const error = useError();\n    if (import.meta.client || !nuxtApp.ssrContext?.islandContext) {\n      router.afterEach(async (to, _from, failure) => {\n        delete nuxtApp._processingMiddleware;\n        if (import.meta.client && !nuxtApp.isHydrating && error.value) {\n          await nuxtApp.runWithContext(clearError);\n        }\n        if (failure) {\n          await nuxtApp.callHook(\"page:loading:end\");\n        }\n        if (import.meta.server && failure?.type === 4) {\n          return;\n        }\n        if (to.matched.length === 0) {\n          await nuxtApp.runWithContext(() => showError(createError({\n            statusCode: 404,\n            fatal: false,\n            statusMessage: `Page not found: ${to.fullPath}`,\n            data: {\n              path: to.fullPath\n            }\n          })));\n        } else if (import.meta.server && to.redirectedFrom && to.fullPath !== initialURL) {\n          await nuxtApp.runWithContext(() => navigateTo(to.fullPath || \"/\"));\n        }\n      });\n    }\n    try {\n      if (import.meta.server) {\n        await router.push(initialURL);\n      }\n      await router.isReady();\n    } catch (error2) {\n      await nuxtApp.runWithContext(() => showError(error2));\n    }\n    const resolvedInitialRoute = import.meta.client && initialURL !== router.currentRoute.value.fullPath ? router.resolve(initialURL) : router.currentRoute.value;\n    syncCurrentRoute();\n    if (import.meta.server && nuxtApp.ssrContext?.islandContext) {\n      return { provide: { router } };\n    }\n    const initialLayout = nuxtApp.payload.state._layout;\n    router.beforeEach(async (to, from) => {\n      await nuxtApp.callHook(\"page:loading:start\");\n      to.meta = reactive(to.meta);\n      if (nuxtApp.isHydrating && initialLayout && !isReadonly(to.meta.layout)) {\n        to.meta.layout = initialLayout;\n      }\n      nuxtApp._processingMiddleware = true;\n      if (import.meta.client || !nuxtApp.ssrContext?.islandContext) {\n        const middlewareEntries = /* @__PURE__ */ new Set([...globalMiddleware, ...nuxtApp._middleware.global]);\n        for (const component of to.matched) {\n          const componentMiddleware = component.meta.middleware;\n          if (!componentMiddleware) {\n            continue;\n          }\n          for (const entry of toArray(componentMiddleware)) {\n            middlewareEntries.add(entry);\n          }\n        }\n        if (isAppManifestEnabled) {\n          const routeRules = await nuxtApp.runWithContext(() => getRouteRules(to.path));\n          if (routeRules.appMiddleware) {\n            for (const key in routeRules.appMiddleware) {\n              if (routeRules.appMiddleware[key]) {\n                middlewareEntries.add(key);\n              } else {\n                middlewareEntries.delete(key);\n              }\n            }\n          }\n        }\n        for (const entry of middlewareEntries) {\n          const middleware = typeof entry === \"string\" ? nuxtApp._middleware.named[entry] || await namedMiddleware[entry]?.().then((r) => r.default || r) : entry;\n          if (!middleware) {\n            if (import.meta.dev) {\n              throw new Error(`Unknown route middleware: '${entry}'. Valid middleware: ${Object.keys(namedMiddleware).map((mw) => `'${mw}'`).join(\", \")}.`);\n            }\n            throw new Error(`Unknown route middleware: '${entry}'.`);\n          }\n          const result = await nuxtApp.runWithContext(() => middleware(to, from));\n          if (import.meta.server || !nuxtApp.payload.serverRendered && nuxtApp.isHydrating) {\n            if (result === false || result instanceof Error) {\n              const error2 = result || createError({\n                statusCode: 404,\n                statusMessage: `Page Not Found: ${initialURL}`\n              });\n              await nuxtApp.runWithContext(() => showError(error2));\n              return false;\n            }\n          }\n          if (result === true) {\n            continue;\n          }\n          if (result || result === false) {\n            return result;\n          }\n        }\n      }\n    });\n    router.onError(async () => {\n      delete nuxtApp._processingMiddleware;\n      await nuxtApp.callHook(\"page:loading:end\");\n    });\n    nuxtApp.hooks.hookOnce(\"app:created\", async () => {\n      try {\n        if (\"name\" in resolvedInitialRoute) {\n          resolvedInitialRoute.name = void 0;\n        }\n        await router.replace({\n          ...resolvedInitialRoute,\n          force: true\n        });\n        router.options.scrollBehavior = routerOptions.scrollBehavior;\n      } catch (error2) {\n        await nuxtApp.runWithContext(() => showError(error2));\n      }\n    });\n    return { provide: { router } };\n  }\n});\nexport default plugin;\n","import { hasProtocol, joinURL, withoutTrailingSlash } from \"ufo\";\nimport { parse } from \"devalue\";\nimport { useHead } from \"@unhead/vue\";\nimport { getCurrentInstance, onServerPrefetch } from \"vue\";\nimport { useNuxtApp, useRuntimeConfig } from \"../nuxt.js\";\nimport { useRoute } from \"./router.js\";\nimport { getAppManifest, getRouteRules } from \"./manifest.js\";\nimport { appManifest, payloadExtraction, renderJsonPayloads } from \"#build/nuxt.config.mjs\";\nexport async function loadPayload(url, opts = {}) {\n  if (import.meta.server || !payloadExtraction) {\n    return null;\n  }\n  const payloadURL = await _getPayloadURL(url, opts);\n  const nuxtApp = useNuxtApp();\n  const cache = nuxtApp._payloadCache = nuxtApp._payloadCache || {};\n  if (payloadURL in cache) {\n    return cache[payloadURL];\n  }\n  cache[payloadURL] = isPrerendered(url).then((prerendered) => {\n    if (!prerendered) {\n      cache[payloadURL] = null;\n      return null;\n    }\n    return _importPayload(payloadURL).then((payload) => {\n      if (payload) {\n        return payload;\n      }\n      delete cache[payloadURL];\n      return null;\n    });\n  });\n  return cache[payloadURL];\n}\nexport function preloadPayload(url, opts = {}) {\n  const nuxtApp = useNuxtApp();\n  const promise = _getPayloadURL(url, opts).then((payloadURL) => {\n    nuxtApp.runWithContext(() => useHead({\n      link: [\n        { rel: \"modulepreload\", href: payloadURL }\n      ]\n    }));\n  });\n  if (import.meta.server) {\n    onServerPrefetch(() => promise);\n  }\n  return promise;\n}\nconst filename = renderJsonPayloads ? \"_payload.json\" : \"_payload.js\";\nasync function _getPayloadURL(url, opts = {}) {\n  const u = new URL(url, \"http://localhost\");\n  if (u.host !== \"localhost\" || hasProtocol(u.pathname, { acceptRelative: true })) {\n    throw new Error(\"Payload URL must not include hostname: \" + url);\n  }\n  const config = useRuntimeConfig();\n  const hash = opts.hash || (opts.fresh ? Date.now() : config.app.buildId);\n  const cdnURL = config.app.cdnURL;\n  const baseOrCdnURL = cdnURL && await isPrerendered(url) ? cdnURL : config.app.baseURL;\n  return joinURL(baseOrCdnURL, u.pathname, filename + (hash ? `?${hash}` : \"\"));\n}\nasync function _importPayload(payloadURL) {\n  if (import.meta.server || !payloadExtraction) {\n    return null;\n  }\n  const payloadPromise = renderJsonPayloads ? fetch(payloadURL).then((res) => res.text().then(parsePayload)) : import(\n    /* webpackIgnore: true */\n    /* @vite-ignore */\n    payloadURL\n  ).then((r) => r.default || r);\n  try {\n    return await payloadPromise;\n  } catch (err) {\n    console.warn(\"[nuxt] Cannot load payload \", payloadURL, err);\n  }\n  return null;\n}\nexport async function isPrerendered(url = useRoute().path) {\n  if (!appManifest) {\n    return !!useNuxtApp().payload.prerenderedAt;\n  }\n  url = withoutTrailingSlash(url);\n  const manifest = await getAppManifest();\n  if (manifest.prerendered.includes(url)) {\n    return true;\n  }\n  const rules = await getRouteRules(url);\n  return !!rules.prerender && !rules.redirect;\n}\nlet payloadCache = null;\nexport async function getNuxtClientPayload() {\n  if (import.meta.server) {\n    return null;\n  }\n  if (payloadCache) {\n    return payloadCache;\n  }\n  const el = document.getElementById(\"__NUXT_DATA__\");\n  if (!el) {\n    return {};\n  }\n  const inlineData = await parsePayload(el.textContent || \"\");\n  const externalData = el.dataset.src ? await _importPayload(el.dataset.src) : void 0;\n  payloadCache = {\n    ...inlineData,\n    ...externalData,\n    ...window.__NUXT__\n  };\n  return payloadCache;\n}\nexport async function parsePayload(payload) {\n  return await parse(payload, useNuxtApp()._payloadRevivers);\n}\nexport function definePayloadReducer(name, reduce) {\n  if (import.meta.server) {\n    useNuxtApp().ssrContext._payloadReducers[name] = reduce;\n  }\n}\nexport function definePayloadReviver(name, revive) {\n  if (import.meta.dev && getCurrentInstance()) {\n    console.warn(\"[nuxt] [definePayloadReviver] This function must be called in a Nuxt plugin that is `unshift`ed to the beginning of the Nuxt plugins array.\");\n  }\n  if (import.meta.client) {\n    useNuxtApp()._payloadRevivers[name] = revive;\n  }\n}\n","import { isReactive, isRef, isShallow, toRaw } from \"vue\";\nimport { definePayloadReducer } from \"../composables/payload.js\";\nimport { isNuxtError } from \"../composables/error.js\";\nimport { defineNuxtPlugin } from \"../nuxt.js\";\nimport { componentIslands } from \"#build/nuxt.config.mjs\";\nconst reducers = {\n  NuxtError: (data) => isNuxtError(data) && data.toJSON(),\n  EmptyShallowRef: (data) => isRef(data) && isShallow(data) && !data.value && (typeof data.value === \"bigint\" ? \"0n\" : JSON.stringify(data.value) || \"_\"),\n  EmptyRef: (data) => isRef(data) && !data.value && (typeof data.value === \"bigint\" ? \"0n\" : JSON.stringify(data.value) || \"_\"),\n  ShallowRef: (data) => isRef(data) && isShallow(data) && data.value,\n  ShallowReactive: (data) => isReactive(data) && isShallow(data) && toRaw(data),\n  Ref: (data) => isRef(data) && data.value,\n  Reactive: (data) => isReactive(data) && toRaw(data)\n};\nif (componentIslands) {\n  reducers.Island = (data) => data && data?.__nuxt_island;\n}\nexport default defineNuxtPlugin({\n  name: \"nuxt:revive-payload:server\",\n  setup() {\n    for (const reducer in reducers) {\n      definePayloadReducer(reducer, reducers[reducer]);\n    }\n  }\n});\n","import { computed, defineComponent, h } from \"vue\";\nimport { NuxtIconCss } from \"./css.js\";\nimport { NuxtIconSvg } from \"./svg.js\";\nimport { useResolvedName } from \"./shared.js\";\nimport { useAppConfig, useNuxtApp } from \"#imports\";\nexport default defineComponent({\n  name: \"NuxtIcon\",\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: false,\n      default: null\n    },\n    size: {\n      type: [Number, String],\n      required: false,\n      default: null\n    }\n  },\n  async setup(props, { slots }) {\n    const nuxtApp = useNuxtApp();\n    const options = useAppConfig().icon;\n    const name = useResolvedName(() => props.name);\n    const component = computed(\n      () => nuxtApp.vueApp?.component(name.value) || ((props.mode || options.mode) === \"svg\" ? NuxtIconSvg : NuxtIconCss)\n    );\n    const style = computed(() => {\n      const size = props.size || options.size;\n      return size ? { fontSize: Number.isNaN(+size) ? size : size + \"px\" } : null;\n    });\n    return () => h(\n      component.value,\n      {\n        ...options.attrs,\n        name: name.value,\n        class: options.class,\n        style: style.value\n      },\n      slots\n    );\n  }\n});\n","import { defineNuxtPlugin } from '#app/nuxt'\nimport { LazyIcon } from '#components'\nconst lazyGlobalComponents = [\n  [\"Icon\", LazyIcon],\n  \n]\n\nexport default defineNuxtPlugin({\n  name: 'nuxt:global-components',\n  setup (nuxtApp) {\n    for (const [name, component] of lazyGlobalComponents) {\n      nuxtApp.vueApp.component(name, component)\n      nuxtApp.vueApp.component('Lazy' + name, component)\n    }\n  }\n})\n","/*!\n  * shared v9.13.1\n  * (c) 2024 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/**\n * Original Utilities\n * written by kazuya kawaguchi\n */\nconst inBrowser = typeof window !== 'undefined';\nlet mark;\nlet measure;\nif ((process.env.NODE_ENV !== 'production')) {\n    const perf = inBrowser && window.performance;\n    if (perf &&\n        perf.mark &&\n        perf.measure &&\n        perf.clearMarks &&\n        // @ts-ignore browser compat\n        perf.clearMeasures) {\n        mark = (tag) => {\n            perf.mark(tag);\n        };\n        measure = (name, startTag, endTag) => {\n            perf.measure(name, startTag, endTag);\n            perf.clearMarks(startTag);\n            perf.clearMarks(endTag);\n        };\n    }\n}\nconst RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\n/* eslint-disable */\nfunction format(message, ...args) {\n    if (args.length === 1 && isObject(args[0])) {\n        args = args[0];\n    }\n    if (!args || !args.hasOwnProperty) {\n        args = {};\n    }\n    return message.replace(RE_ARGS, (match, identifier) => {\n        return args.hasOwnProperty(identifier) ? args[identifier] : '';\n    });\n}\nconst makeSymbol = (name, shareable = false) => !shareable ? Symbol(name) : Symbol.for(name);\nconst generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });\nconst friendlyJSONstringify = (json) => JSON.stringify(json)\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n    .replace(/\\u0027/g, '\\\\u0027');\nconst isNumber = (val) => typeof val === 'number' && isFinite(val);\nconst isDate = (val) => toTypeString(val) === '[object Date]';\nconst isRegExp = (val) => toTypeString(val) === '[object RegExp]';\nconst isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;\nconst assign = Object.assign;\nlet _globalThis;\nconst getGlobalThis = () => {\n    // prettier-ignore\n    return (_globalThis ||\n        (_globalThis =\n            typeof globalThis !== 'undefined'\n                ? globalThis\n                : typeof self !== 'undefined'\n                    ? self\n                    : typeof window !== 'undefined'\n                        ? window\n                        : typeof global !== 'undefined'\n                            ? global\n                            : {}));\n};\nfunction escapeHtml(rawText) {\n    return rawText\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&apos;');\n}\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n    return hasOwnProperty.call(obj, key);\n}\n/* eslint-enable */\n/**\n * Useful Utilities By Evan you\n * Modified by kazuya kawaguchi\n * MIT License\n * https://github.com/vuejs/vue-next/blob/master/packages/shared/src/index.ts\n * https://github.com/vuejs/vue-next/blob/master/packages/shared/src/codeframe.ts\n */\nconst isArray = Array.isArray;\nconst isFunction = (val) => typeof val === 'function';\nconst isString = (val) => typeof val === 'string';\nconst isBoolean = (val) => typeof val === 'boolean';\nconst isSymbol = (val) => typeof val === 'symbol';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isObject = (val) => val !== null && typeof val === 'object';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPromise = (val) => {\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\n};\nconst objectToString = Object.prototype.toString;\nconst toTypeString = (value) => objectToString.call(value);\nconst isPlainObject = (val) => {\n    if (!isObject(val))\n        return false;\n    const proto = Object.getPrototypeOf(val);\n    return proto === null || proto.constructor === Object;\n};\n// for converting list and named values to displayed strings.\nconst toDisplayString = (val) => {\n    return val == null\n        ? ''\n        : isArray(val) || (isPlainObject(val) && val.toString === objectToString)\n            ? JSON.stringify(val, null, 2)\n            : String(val);\n};\nfunction join(items, separator = '') {\n    return items.reduce((str, item, index) => (index === 0 ? str + item : str + separator + item), '');\n}\nconst RANGE = 2;\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n    const lines = source.split(/\\r?\\n/);\n    let count = 0;\n    const res = [];\n    for (let i = 0; i < lines.length; i++) {\n        count += lines[i].length + 1;\n        if (count >= start) {\n            for (let j = i - RANGE; j <= i + RANGE || end > count; j++) {\n                if (j < 0 || j >= lines.length)\n                    continue;\n                const line = j + 1;\n                res.push(`${line}${' '.repeat(3 - String(line).length)}|  ${lines[j]}`);\n                const lineLength = lines[j].length;\n                if (j === i) {\n                    // push underline\n                    const pad = start - (count - lineLength) + 1;\n                    const length = Math.max(1, end > count ? lineLength - pad : end - start);\n                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));\n                }\n                else if (j > i) {\n                    if (end > count) {\n                        const length = Math.max(Math.min(end - count, lineLength), 1);\n                        res.push(`   |  ` + '^'.repeat(length));\n                    }\n                    count += lineLength + 1;\n                }\n            }\n            break;\n        }\n    }\n    return res.join('\\n');\n}\nfunction incrementer(code) {\n    let current = code;\n    return () => ++current;\n}\n\nfunction warn(msg, err) {\n    if (typeof console !== 'undefined') {\n        console.warn(`[intlify] ` + msg);\n        /* istanbul ignore if */\n        if (err) {\n            console.warn(err.stack);\n        }\n    }\n}\nconst hasWarned = {};\nfunction warnOnce(msg) {\n    if (!hasWarned[msg]) {\n        hasWarned[msg] = true;\n        warn(msg);\n    }\n}\n\n/**\n * Event emitter, forked from the below:\n * - original repository url: https://github.com/developit/mitt\n * - code url: https://github.com/developit/mitt/blob/master/src/index.ts\n * - author: Jason Miller (https://github.com/developit)\n * - license: MIT\n */\n/**\n * Create a event emitter\n *\n * @returns An event emitter\n */\nfunction createEmitter() {\n    const events = new Map();\n    const emitter = {\n        events,\n        on(event, handler) {\n            const handlers = events.get(event);\n            const added = handlers && handlers.push(handler);\n            if (!added) {\n                events.set(event, [handler]);\n            }\n        },\n        off(event, handler) {\n            const handlers = events.get(event);\n            if (handlers) {\n                handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n            }\n        },\n        emit(event, payload) {\n            (events.get(event) || [])\n                .slice()\n                .map(handler => handler(payload));\n            (events.get('*') || [])\n                .slice()\n                .map(handler => handler(event, payload));\n        }\n    };\n    return emitter;\n}\n\nconst isNotObjectOrIsArray = (val) => !isObject(val) || isArray(val);\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCopy(src, des) {\n    // src and des should both be objects, and none of them can be a array\n    if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {\n        throw new Error('Invalid value');\n    }\n    const stack = [{ src, des }];\n    while (stack.length) {\n        const { src, des } = stack.pop();\n        Object.keys(src).forEach(key => {\n            if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {\n                // replace with src[key] when:\n                // src[key] or des[key] is not an object, or\n                // src[key] or des[key] is an array\n                des[key] = src[key];\n            }\n            else {\n                // src[key] and des[key] are both objects, merge them\n                stack.push({ src: src[key], des: des[key] });\n            }\n        });\n    }\n}\n\nexport { assign, createEmitter, deepCopy, escapeHtml, format, friendlyJSONstringify, generateCodeFrame, generateFormatCacheKey, getGlobalThis, hasOwn, inBrowser, incrementer, isArray, isBoolean, isDate, isEmptyObject, isFunction, isNumber, isObject, isPlainObject, isPromise, isRegExp, isString, isSymbol, join, makeSymbol, mark, measure, objectToString, toDisplayString, toTypeString, warn, warnOnce };\n","/*!\n  * message-compiler v9.13.1\n  * (c) 2024 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nimport { format, assign, join, isString } from '@intlify/shared';\n\nconst LOCATION_STUB = {\n    start: { line: 1, column: 1, offset: 0 },\n    end: { line: 1, column: 1, offset: 0 }\n};\nfunction createPosition(line, column, offset) {\n    return { line, column, offset };\n}\nfunction createLocation(start, end, source) {\n    const loc = { start, end };\n    if (source != null) {\n        loc.source = source;\n    }\n    return loc;\n}\n\nconst CompileWarnCodes = {\n    USE_MODULO_SYNTAX: 1,\n    __EXTEND_POINT__: 2\n};\n/** @internal */\nconst warnMessages = {\n    [CompileWarnCodes.USE_MODULO_SYNTAX]: `Use modulo before '{{0}}'.`\n};\nfunction createCompileWarn(code, loc, ...args) {\n    const msg = (process.env.NODE_ENV !== 'production') ? format(warnMessages[code] || '', ...(args || [])) : code;\n    const message = { message: String(msg), code };\n    if (loc) {\n        message.location = loc;\n    }\n    return message;\n}\n\nconst CompileErrorCodes = {\n    // tokenizer error codes\n    EXPECTED_TOKEN: 1,\n    INVALID_TOKEN_IN_PLACEHOLDER: 2,\n    UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n    UNKNOWN_ESCAPE_SEQUENCE: 4,\n    INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n    UNBALANCED_CLOSING_BRACE: 6,\n    UNTERMINATED_CLOSING_BRACE: 7,\n    EMPTY_PLACEHOLDER: 8,\n    NOT_ALLOW_NEST_PLACEHOLDER: 9,\n    INVALID_LINKED_FORMAT: 10,\n    // parser error codes\n    MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n    UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n    UNEXPECTED_EMPTY_LINKED_KEY: 13,\n    UNEXPECTED_LEXICAL_ANALYSIS: 14,\n    // generator error codes\n    UNHANDLED_CODEGEN_NODE_TYPE: 15,\n    // minifier error codes\n    UNHANDLED_MINIFIER_NODE_TYPE: 16,\n    // Special value for higher-order compilers to pick up the last code\n    // to avoid collision of error codes. This should always be kept as the last\n    // item.\n    __EXTEND_POINT__: 17\n};\n/** @internal */\nconst errorMessages = {\n    // tokenizer error messages\n    [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n    [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n    [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n    [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n    [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n    [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n    [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n    [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n    [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n    [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n    // parser error messages\n    [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n    [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n    [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n    [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`,\n    // generator error messages\n    [CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE]: `unhandled codegen node type: '{0}'`,\n    // minimizer error messages\n    [CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE]: `unhandled mimifier node type: '{0}'`\n};\nfunction createCompileError(code, loc, options = {}) {\n    const { domain, messages, args } = options;\n    const msg = (process.env.NODE_ENV !== 'production')\n        ? format((messages || errorMessages)[code] || '', ...(args || []))\n        : code;\n    const error = new SyntaxError(String(msg));\n    error.code = code;\n    if (loc) {\n        error.location = loc;\n    }\n    error.domain = domain;\n    return error;\n}\n/** @internal */\nfunction defaultOnError(error) {\n    throw error;\n}\n\n// eslint-disable-next-line no-useless-escape\nconst RE_HTML_TAG = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nconst detectHtmlTag = (source) => RE_HTML_TAG.test(source);\n\nconst CHAR_SP = ' ';\nconst CHAR_CR = '\\r';\nconst CHAR_LF = '\\n';\nconst CHAR_LS = String.fromCharCode(0x2028);\nconst CHAR_PS = String.fromCharCode(0x2029);\nfunction createScanner(str) {\n    const _buf = str;\n    let _index = 0;\n    let _line = 1;\n    let _column = 1;\n    let _peekOffset = 0;\n    const isCRLF = (index) => _buf[index] === CHAR_CR && _buf[index + 1] === CHAR_LF;\n    const isLF = (index) => _buf[index] === CHAR_LF;\n    const isPS = (index) => _buf[index] === CHAR_PS;\n    const isLS = (index) => _buf[index] === CHAR_LS;\n    const isLineEnd = (index) => isCRLF(index) || isLF(index) || isPS(index) || isLS(index);\n    const index = () => _index;\n    const line = () => _line;\n    const column = () => _column;\n    const peekOffset = () => _peekOffset;\n    const charAt = (offset) => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n    const currentChar = () => charAt(_index);\n    const currentPeek = () => charAt(_index + _peekOffset);\n    function next() {\n        _peekOffset = 0;\n        if (isLineEnd(_index)) {\n            _line++;\n            _column = 0;\n        }\n        if (isCRLF(_index)) {\n            _index++;\n        }\n        _index++;\n        _column++;\n        return _buf[_index];\n    }\n    function peek() {\n        if (isCRLF(_index + _peekOffset)) {\n            _peekOffset++;\n        }\n        _peekOffset++;\n        return _buf[_index + _peekOffset];\n    }\n    function reset() {\n        _index = 0;\n        _line = 1;\n        _column = 1;\n        _peekOffset = 0;\n    }\n    function resetPeek(offset = 0) {\n        _peekOffset = offset;\n    }\n    function skipToPeek() {\n        const target = _index + _peekOffset;\n        // eslint-disable-next-line no-unmodified-loop-condition\n        while (target !== _index) {\n            next();\n        }\n        _peekOffset = 0;\n    }\n    return {\n        index,\n        line,\n        column,\n        peekOffset,\n        charAt,\n        currentChar,\n        currentPeek,\n        next,\n        peek,\n        reset,\n        resetPeek,\n        skipToPeek\n    };\n}\n\nconst EOF = undefined;\nconst DOT = '.';\nconst LITERAL_DELIMITER = \"'\";\nconst ERROR_DOMAIN$3 = 'tokenizer';\nfunction createTokenizer(source, options = {}) {\n    const location = options.location !== false;\n    const _scnr = createScanner(source);\n    const currentOffset = () => _scnr.index();\n    const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n    const _initLoc = currentPosition();\n    const _initOffset = currentOffset();\n    const _context = {\n        currentType: 14 /* TokenTypes.EOF */,\n        offset: _initOffset,\n        startLoc: _initLoc,\n        endLoc: _initLoc,\n        lastType: 14 /* TokenTypes.EOF */,\n        lastOffset: _initOffset,\n        lastStartLoc: _initLoc,\n        lastEndLoc: _initLoc,\n        braceNest: 0,\n        inLinked: false,\n        text: ''\n    };\n    const context = () => _context;\n    const { onError } = options;\n    function emitError(code, pos, offset, ...args) {\n        const ctx = context();\n        pos.column += offset;\n        pos.offset += offset;\n        if (onError) {\n            const loc = location ? createLocation(ctx.startLoc, pos) : null;\n            const err = createCompileError(code, loc, {\n                domain: ERROR_DOMAIN$3,\n                args\n            });\n            onError(err);\n        }\n    }\n    function getToken(context, type, value) {\n        context.endLoc = currentPosition();\n        context.currentType = type;\n        const token = { type };\n        if (location) {\n            token.loc = createLocation(context.startLoc, context.endLoc);\n        }\n        if (value != null) {\n            token.value = value;\n        }\n        return token;\n    }\n    const getEndToken = (context) => getToken(context, 14 /* TokenTypes.EOF */);\n    function eat(scnr, ch) {\n        if (scnr.currentChar() === ch) {\n            scnr.next();\n            return ch;\n        }\n        else {\n            emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n            return '';\n        }\n    }\n    function peekSpaces(scnr) {\n        let buf = '';\n        while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n            buf += scnr.currentPeek();\n            scnr.peek();\n        }\n        return buf;\n    }\n    function skipSpaces(scnr) {\n        const buf = peekSpaces(scnr);\n        scnr.skipToPeek();\n        return buf;\n    }\n    function isIdentifierStart(ch) {\n        if (ch === EOF) {\n            return false;\n        }\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            cc === 95 // _\n        );\n    }\n    function isNumberStart(ch) {\n        if (ch === EOF) {\n            return false;\n        }\n        const cc = ch.charCodeAt(0);\n        return cc >= 48 && cc <= 57; // 0-9\n    }\n    function isNamedIdentifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = isIdentifierStart(scnr.currentPeek());\n        scnr.resetPeek();\n        return ret;\n    }\n    function isListIdentifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ch = scnr.currentPeek() === '-' ? scnr.peek() : scnr.currentPeek();\n        const ret = isNumberStart(ch);\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLiteralStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === LITERAL_DELIMITER;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedDotStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 8 /* TokenTypes.LinkedAlias */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \".\" /* TokenChars.LinkedDot */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedModifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 9 /* TokenTypes.LinkedDot */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = isIdentifierStart(scnr.currentPeek());\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedDelimiterStart(scnr, context) {\n        const { currentType } = context;\n        if (!(currentType === 8 /* TokenTypes.LinkedAlias */ ||\n            currentType === 12 /* TokenTypes.LinkedModifier */)) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \":\" /* TokenChars.LinkedDelimiter */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedReferStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 10 /* TokenTypes.LinkedDelimiter */) {\n            return false;\n        }\n        const fn = () => {\n            const ch = scnr.currentPeek();\n            if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                return isIdentifierStart(scnr.peek());\n            }\n            else if (ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"%\" /* TokenChars.Modulo */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                ch === \":\" /* TokenChars.LinkedDelimiter */ ||\n                ch === \".\" /* TokenChars.LinkedDot */ ||\n                ch === CHAR_SP ||\n                !ch) {\n                return false;\n            }\n            else if (ch === CHAR_LF) {\n                scnr.peek();\n                return fn();\n            }\n            else {\n                // other characters\n                return isTextStart(scnr, false);\n            }\n        };\n        const ret = fn();\n        scnr.resetPeek();\n        return ret;\n    }\n    function isPluralStart(scnr) {\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \"|\" /* TokenChars.Pipe */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function detectModuloStart(scnr) {\n        const spaces = peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \"%\" /* TokenChars.Modulo */ &&\n            scnr.peek() === \"{\" /* TokenChars.BraceLeft */;\n        scnr.resetPeek();\n        return {\n            isModulo: ret,\n            hasSpace: spaces.length > 0\n        };\n    }\n    function isTextStart(scnr, reset = true) {\n        const fn = (hasSpace = false, prev = '', detectModulo = false) => {\n            const ch = scnr.currentPeek();\n            if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                return prev === \"%\" /* TokenChars.Modulo */ ? false : hasSpace;\n            }\n            else if (ch === \"@\" /* TokenChars.LinkedAlias */ || !ch) {\n                return prev === \"%\" /* TokenChars.Modulo */ ? true : hasSpace;\n            }\n            else if (ch === \"%\" /* TokenChars.Modulo */) {\n                scnr.peek();\n                return fn(hasSpace, \"%\" /* TokenChars.Modulo */, true);\n            }\n            else if (ch === \"|\" /* TokenChars.Pipe */) {\n                return prev === \"%\" /* TokenChars.Modulo */ || detectModulo\n                    ? true\n                    : !(prev === CHAR_SP || prev === CHAR_LF);\n            }\n            else if (ch === CHAR_SP) {\n                scnr.peek();\n                return fn(true, CHAR_SP, detectModulo);\n            }\n            else if (ch === CHAR_LF) {\n                scnr.peek();\n                return fn(true, CHAR_LF, detectModulo);\n            }\n            else {\n                return true;\n            }\n        };\n        const ret = fn();\n        reset && scnr.resetPeek();\n        return ret;\n    }\n    function takeChar(scnr, fn) {\n        const ch = scnr.currentChar();\n        if (ch === EOF) {\n            return EOF;\n        }\n        if (fn(ch)) {\n            scnr.next();\n            return ch;\n        }\n        return null;\n    }\n    function isIdentifier(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            (cc >= 48 && cc <= 57) || // 0-9\n            cc === 95 || // _\n            cc === 36 // $\n        );\n    }\n    function takeIdentifierChar(scnr) {\n        return takeChar(scnr, isIdentifier);\n    }\n    function isNamedIdentifier(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            (cc >= 48 && cc <= 57) || // 0-9\n            cc === 95 || // _\n            cc === 36 || // $\n            cc === 45 // -\n        );\n    }\n    function takeNamedIdentifierChar(scnr) {\n        return takeChar(scnr, isNamedIdentifier);\n    }\n    function isDigit(ch) {\n        const cc = ch.charCodeAt(0);\n        return cc >= 48 && cc <= 57; // 0-9\n    }\n    function takeDigit(scnr) {\n        return takeChar(scnr, isDigit);\n    }\n    function isHexDigit(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 48 && cc <= 57) || // 0-9\n            (cc >= 65 && cc <= 70) || // A-F\n            (cc >= 97 && cc <= 102)); // a-f\n    }\n    function takeHexDigit(scnr) {\n        return takeChar(scnr, isHexDigit);\n    }\n    function getDigits(scnr) {\n        let ch = '';\n        let num = '';\n        while ((ch = takeDigit(scnr))) {\n            num += ch;\n        }\n        return num;\n    }\n    function readModulo(scnr) {\n        skipSpaces(scnr);\n        const ch = scnr.currentChar();\n        if (ch !== \"%\" /* TokenChars.Modulo */) {\n            emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n        }\n        scnr.next();\n        return \"%\" /* TokenChars.Modulo */;\n    }\n    function readText(scnr) {\n        let buf = '';\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const ch = scnr.currentChar();\n            if (ch === \"{\" /* TokenChars.BraceLeft */ ||\n                ch === \"}\" /* TokenChars.BraceRight */ ||\n                ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                !ch) {\n                break;\n            }\n            else if (ch === \"%\" /* TokenChars.Modulo */) {\n                if (isTextStart(scnr)) {\n                    buf += ch;\n                    scnr.next();\n                }\n                else {\n                    break;\n                }\n            }\n            else if (ch === CHAR_SP || ch === CHAR_LF) {\n                if (isTextStart(scnr)) {\n                    buf += ch;\n                    scnr.next();\n                }\n                else if (isPluralStart(scnr)) {\n                    break;\n                }\n                else {\n                    buf += ch;\n                    scnr.next();\n                }\n            }\n            else {\n                buf += ch;\n                scnr.next();\n            }\n        }\n        return buf;\n    }\n    function readNamedIdentifier(scnr) {\n        skipSpaces(scnr);\n        let ch = '';\n        let name = '';\n        while ((ch = takeNamedIdentifierChar(scnr))) {\n            name += ch;\n        }\n        if (scnr.currentChar() === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        return name;\n    }\n    function readListIdentifier(scnr) {\n        skipSpaces(scnr);\n        let value = '';\n        if (scnr.currentChar() === '-') {\n            scnr.next();\n            value += `-${getDigits(scnr)}`;\n        }\n        else {\n            value += getDigits(scnr);\n        }\n        if (scnr.currentChar() === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        return value;\n    }\n    function isLiteral(ch) {\n        return ch !== LITERAL_DELIMITER && ch !== CHAR_LF;\n    }\n    function readLiteral(scnr) {\n        skipSpaces(scnr);\n        // eslint-disable-next-line no-useless-escape\n        eat(scnr, `\\'`);\n        let ch = '';\n        let literal = '';\n        while ((ch = takeChar(scnr, isLiteral))) {\n            if (ch === '\\\\') {\n                literal += readEscapeSequence(scnr);\n            }\n            else {\n                literal += ch;\n            }\n        }\n        const current = scnr.currentChar();\n        if (current === CHAR_LF || current === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n            // TODO: Is it correct really?\n            if (current === CHAR_LF) {\n                scnr.next();\n                // eslint-disable-next-line no-useless-escape\n                eat(scnr, `\\'`);\n            }\n            return literal;\n        }\n        // eslint-disable-next-line no-useless-escape\n        eat(scnr, `\\'`);\n        return literal;\n    }\n    function readEscapeSequence(scnr) {\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case '\\\\':\n            case `\\'`: // eslint-disable-line no-useless-escape\n                scnr.next();\n                return `\\\\${ch}`;\n            case 'u':\n                return readUnicodeEscapeSequence(scnr, ch, 4);\n            case 'U':\n                return readUnicodeEscapeSequence(scnr, ch, 6);\n            default:\n                emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n                return '';\n        }\n    }\n    function readUnicodeEscapeSequence(scnr, unicode, digits) {\n        eat(scnr, unicode);\n        let sequence = '';\n        for (let i = 0; i < digits; i++) {\n            const ch = takeHexDigit(scnr);\n            if (!ch) {\n                emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\n                break;\n            }\n            sequence += ch;\n        }\n        return `\\\\${unicode}${sequence}`;\n    }\n    function isInvalidIdentifier(ch) {\n        return (ch !== \"{\" /* TokenChars.BraceLeft */ &&\n            ch !== \"}\" /* TokenChars.BraceRight */ &&\n            ch !== CHAR_SP &&\n            ch !== CHAR_LF);\n    }\n    function readInvalidIdentifier(scnr) {\n        skipSpaces(scnr);\n        let ch = '';\n        let identifiers = '';\n        while ((ch = takeChar(scnr, isInvalidIdentifier))) {\n            identifiers += ch;\n        }\n        return identifiers;\n    }\n    function readLinkedModifier(scnr) {\n        let ch = '';\n        let name = '';\n        while ((ch = takeIdentifierChar(scnr))) {\n            name += ch;\n        }\n        return name;\n    }\n    function readLinkedRefer(scnr) {\n        const fn = (buf) => {\n            const ch = scnr.currentChar();\n            if (ch === \"{\" /* TokenChars.BraceLeft */ ||\n                ch === \"%\" /* TokenChars.Modulo */ ||\n                ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                ch === \"(\" /* TokenChars.ParenLeft */ ||\n                ch === \")\" /* TokenChars.ParenRight */ ||\n                !ch) {\n                return buf;\n            }\n            else if (ch === CHAR_SP) {\n                return buf;\n            }\n            else if (ch === CHAR_LF || ch === DOT) {\n                buf += ch;\n                scnr.next();\n                return fn(buf);\n            }\n            else {\n                buf += ch;\n                scnr.next();\n                return fn(buf);\n            }\n        };\n        return fn('');\n    }\n    function readPlural(scnr) {\n        skipSpaces(scnr);\n        const plural = eat(scnr, \"|\" /* TokenChars.Pipe */);\n        skipSpaces(scnr);\n        return plural;\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readTokenInPlaceholder(scnr, context) {\n        let token = null;\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case \"{\" /* TokenChars.BraceLeft */:\n                if (context.braceNest >= 1) {\n                    emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n                }\n                scnr.next();\n                token = getToken(context, 2 /* TokenTypes.BraceLeft */, \"{\" /* TokenChars.BraceLeft */);\n                skipSpaces(scnr);\n                context.braceNest++;\n                return token;\n            case \"}\" /* TokenChars.BraceRight */:\n                if (context.braceNest > 0 &&\n                    context.currentType === 2 /* TokenTypes.BraceLeft */) {\n                    emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n                }\n                scnr.next();\n                token = getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n                context.braceNest--;\n                context.braceNest > 0 && skipSpaces(scnr);\n                if (context.inLinked && context.braceNest === 0) {\n                    context.inLinked = false;\n                }\n                return token;\n            case \"@\" /* TokenChars.LinkedAlias */:\n                if (context.braceNest > 0) {\n                    emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                }\n                token = readTokenInLinked(scnr, context) || getEndToken(context);\n                context.braceNest = 0;\n                return token;\n            default: {\n                let validNamedIdentifier = true;\n                let validListIdentifier = true;\n                let validLiteral = true;\n                if (isPluralStart(scnr)) {\n                    if (context.braceNest > 0) {\n                        emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                    }\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                if (context.braceNest > 0 &&\n                    (context.currentType === 5 /* TokenTypes.Named */ ||\n                        context.currentType === 6 /* TokenTypes.List */ ||\n                        context.currentType === 7 /* TokenTypes.Literal */)) {\n                    emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                    context.braceNest = 0;\n                    return readToken(scnr, context);\n                }\n                if ((validNamedIdentifier = isNamedIdentifierStart(scnr, context))) {\n                    token = getToken(context, 5 /* TokenTypes.Named */, readNamedIdentifier(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if ((validListIdentifier = isListIdentifierStart(scnr, context))) {\n                    token = getToken(context, 6 /* TokenTypes.List */, readListIdentifier(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if ((validLiteral = isLiteralStart(scnr, context))) {\n                    token = getToken(context, 7 /* TokenTypes.Literal */, readLiteral(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n                    // TODO: we should be re-designed invalid cases, when we will extend message syntax near the future ...\n                    token = getToken(context, 13 /* TokenTypes.InvalidPlace */, readInvalidIdentifier(scnr));\n                    emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n                    skipSpaces(scnr);\n                    return token;\n                }\n                break;\n            }\n        }\n        return token;\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readTokenInLinked(scnr, context) {\n        const { currentType } = context;\n        let token = null;\n        const ch = scnr.currentChar();\n        if ((currentType === 8 /* TokenTypes.LinkedAlias */ ||\n            currentType === 9 /* TokenTypes.LinkedDot */ ||\n            currentType === 12 /* TokenTypes.LinkedModifier */ ||\n            currentType === 10 /* TokenTypes.LinkedDelimiter */) &&\n            (ch === CHAR_LF || ch === CHAR_SP)) {\n            emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        switch (ch) {\n            case \"@\" /* TokenChars.LinkedAlias */:\n                scnr.next();\n                token = getToken(context, 8 /* TokenTypes.LinkedAlias */, \"@\" /* TokenChars.LinkedAlias */);\n                context.inLinked = true;\n                return token;\n            case \".\" /* TokenChars.LinkedDot */:\n                skipSpaces(scnr);\n                scnr.next();\n                return getToken(context, 9 /* TokenTypes.LinkedDot */, \".\" /* TokenChars.LinkedDot */);\n            case \":\" /* TokenChars.LinkedDelimiter */:\n                skipSpaces(scnr);\n                scnr.next();\n                return getToken(context, 10 /* TokenTypes.LinkedDelimiter */, \":\" /* TokenChars.LinkedDelimiter */);\n            default:\n                if (isPluralStart(scnr)) {\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                if (isLinkedDotStart(scnr, context) ||\n                    isLinkedDelimiterStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    return readTokenInLinked(scnr, context);\n                }\n                if (isLinkedModifierStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    return getToken(context, 12 /* TokenTypes.LinkedModifier */, readLinkedModifier(scnr));\n                }\n                if (isLinkedReferStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                        // scan the placeholder\n                        return readTokenInPlaceholder(scnr, context) || token;\n                    }\n                    else {\n                        return getToken(context, 11 /* TokenTypes.LinkedKey */, readLinkedRefer(scnr));\n                    }\n                }\n                if (currentType === 8 /* TokenTypes.LinkedAlias */) {\n                    emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n                }\n                context.braceNest = 0;\n                context.inLinked = false;\n                return readToken(scnr, context);\n        }\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readToken(scnr, context) {\n        let token = { type: 14 /* TokenTypes.EOF */ };\n        if (context.braceNest > 0) {\n            return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n        }\n        if (context.inLinked) {\n            return readTokenInLinked(scnr, context) || getEndToken(context);\n        }\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case \"{\" /* TokenChars.BraceLeft */:\n                return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n            case \"}\" /* TokenChars.BraceRight */:\n                emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n                scnr.next();\n                return getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n            case \"@\" /* TokenChars.LinkedAlias */:\n                return readTokenInLinked(scnr, context) || getEndToken(context);\n            default: {\n                if (isPluralStart(scnr)) {\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                const { isModulo, hasSpace } = detectModuloStart(scnr);\n                if (isModulo) {\n                    return hasSpace\n                        ? getToken(context, 0 /* TokenTypes.Text */, readText(scnr))\n                        : getToken(context, 4 /* TokenTypes.Modulo */, readModulo(scnr));\n                }\n                if (isTextStart(scnr)) {\n                    return getToken(context, 0 /* TokenTypes.Text */, readText(scnr));\n                }\n                break;\n            }\n        }\n        return token;\n    }\n    function nextToken() {\n        const { currentType, offset, startLoc, endLoc } = _context;\n        _context.lastType = currentType;\n        _context.lastOffset = offset;\n        _context.lastStartLoc = startLoc;\n        _context.lastEndLoc = endLoc;\n        _context.offset = currentOffset();\n        _context.startLoc = currentPosition();\n        if (_scnr.currentChar() === EOF) {\n            return getToken(_context, 14 /* TokenTypes.EOF */);\n        }\n        return readToken(_scnr, _context);\n    }\n    return {\n        nextToken,\n        currentOffset,\n        currentPosition,\n        context\n    };\n}\n\nconst ERROR_DOMAIN$2 = 'parser';\n// Backslash backslash, backslash quote, uHHHH, UHHHHHH.\nconst KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n    switch (match) {\n        case `\\\\\\\\`:\n            return `\\\\`;\n        // eslint-disable-next-line no-useless-escape\n        case `\\\\\\'`:\n            // eslint-disable-next-line no-useless-escape\n            return `\\'`;\n        default: {\n            const codePoint = parseInt(codePoint4 || codePoint6, 16);\n            if (codePoint <= 0xd7ff || codePoint >= 0xe000) {\n                return String.fromCodePoint(codePoint);\n            }\n            // invalid ...\n            // Replace them with U+FFFD REPLACEMENT CHARACTER.\n            return '�';\n        }\n    }\n}\nfunction createParser(options = {}) {\n    const location = options.location !== false;\n    const { onError, onWarn } = options;\n    function emitError(tokenzer, code, start, offset, ...args) {\n        const end = tokenzer.currentPosition();\n        end.offset += offset;\n        end.column += offset;\n        if (onError) {\n            const loc = location ? createLocation(start, end) : null;\n            const err = createCompileError(code, loc, {\n                domain: ERROR_DOMAIN$2,\n                args\n            });\n            onError(err);\n        }\n    }\n    function emitWarn(tokenzer, code, start, offset, ...args) {\n        const end = tokenzer.currentPosition();\n        end.offset += offset;\n        end.column += offset;\n        if (onWarn) {\n            const loc = location ? createLocation(start, end) : null;\n            onWarn(createCompileWarn(code, loc, args));\n        }\n    }\n    function startNode(type, offset, loc) {\n        const node = { type };\n        if (location) {\n            node.start = offset;\n            node.end = offset;\n            node.loc = { start: loc, end: loc };\n        }\n        return node;\n    }\n    function endNode(node, offset, pos, type) {\n        if (type) {\n            node.type = type;\n        }\n        if (location) {\n            node.end = offset;\n            if (node.loc) {\n                node.loc.end = pos;\n            }\n        }\n    }\n    function parseText(tokenizer, value) {\n        const context = tokenizer.context();\n        const node = startNode(3 /* NodeTypes.Text */, context.offset, context.startLoc);\n        node.value = value;\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseList(tokenizer, index) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(5 /* NodeTypes.List */, offset, loc);\n        node.index = parseInt(index, 10);\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseNamed(tokenizer, key, modulo) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(4 /* NodeTypes.Named */, offset, loc);\n        node.key = key;\n        if (modulo === true) {\n            node.modulo = true;\n        }\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLiteral(tokenizer, value) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(9 /* NodeTypes.Literal */, offset, loc);\n        node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLinkedModifier(tokenizer) {\n        const token = tokenizer.nextToken();\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get linked dot loc\n        const node = startNode(8 /* NodeTypes.LinkedModifier */, offset, loc);\n        if (token.type !== 12 /* TokenTypes.LinkedModifier */) {\n            // empty modifier\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n            node.value = '';\n            endNode(node, offset, loc);\n            return {\n                nextConsumeToken: token,\n                node\n            };\n        }\n        // check token\n        if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        node.value = token.value || '';\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return {\n            node\n        };\n    }\n    function parseLinkedKey(tokenizer, value) {\n        const context = tokenizer.context();\n        const node = startNode(7 /* NodeTypes.LinkedKey */, context.offset, context.startLoc);\n        node.value = value;\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLinked(tokenizer) {\n        const context = tokenizer.context();\n        const linkedNode = startNode(6 /* NodeTypes.Linked */, context.offset, context.startLoc);\n        let token = tokenizer.nextToken();\n        if (token.type === 9 /* TokenTypes.LinkedDot */) {\n            const parsed = parseLinkedModifier(tokenizer);\n            linkedNode.modifier = parsed.node;\n            token = parsed.nextConsumeToken || tokenizer.nextToken();\n        }\n        // asset check token\n        if (token.type !== 10 /* TokenTypes.LinkedDelimiter */) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        token = tokenizer.nextToken();\n        // skip brace left\n        if (token.type === 2 /* TokenTypes.BraceLeft */) {\n            token = tokenizer.nextToken();\n        }\n        switch (token.type) {\n            case 11 /* TokenTypes.LinkedKey */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseLinkedKey(tokenizer, token.value || '');\n                break;\n            case 5 /* TokenTypes.Named */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseNamed(tokenizer, token.value || '');\n                break;\n            case 6 /* TokenTypes.List */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseList(tokenizer, token.value || '');\n                break;\n            case 7 /* TokenTypes.Literal */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseLiteral(tokenizer, token.value || '');\n                break;\n            default: {\n                // empty key\n                emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n                const nextContext = tokenizer.context();\n                const emptyLinkedKeyNode = startNode(7 /* NodeTypes.LinkedKey */, nextContext.offset, nextContext.startLoc);\n                emptyLinkedKeyNode.value = '';\n                endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n                linkedNode.key = emptyLinkedKeyNode;\n                endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n                return {\n                    nextConsumeToken: token,\n                    node: linkedNode\n                };\n            }\n        }\n        endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return {\n            node: linkedNode\n        };\n    }\n    function parseMessage(tokenizer) {\n        const context = tokenizer.context();\n        const startOffset = context.currentType === 1 /* TokenTypes.Pipe */\n            ? tokenizer.currentOffset()\n            : context.offset;\n        const startLoc = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.endLoc\n            : context.startLoc;\n        const node = startNode(2 /* NodeTypes.Message */, startOffset, startLoc);\n        node.items = [];\n        let nextToken = null;\n        let modulo = null;\n        do {\n            const token = nextToken || tokenizer.nextToken();\n            nextToken = null;\n            switch (token.type) {\n                case 0 /* TokenTypes.Text */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseText(tokenizer, token.value || ''));\n                    break;\n                case 6 /* TokenTypes.List */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseList(tokenizer, token.value || ''));\n                    break;\n                case 4 /* TokenTypes.Modulo */:\n                    modulo = true;\n                    break;\n                case 5 /* TokenTypes.Named */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseNamed(tokenizer, token.value || '', !!modulo));\n                    if (modulo) {\n                        emitWarn(tokenizer, CompileWarnCodes.USE_MODULO_SYNTAX, context.lastStartLoc, 0, getTokenCaption(token));\n                        modulo = null;\n                    }\n                    break;\n                case 7 /* TokenTypes.Literal */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseLiteral(tokenizer, token.value || ''));\n                    break;\n                case 8 /* TokenTypes.LinkedAlias */: {\n                    const parsed = parseLinked(tokenizer);\n                    node.items.push(parsed.node);\n                    nextToken = parsed.nextConsumeToken || null;\n                    break;\n                }\n            }\n        } while (context.currentType !== 14 /* TokenTypes.EOF */ &&\n            context.currentType !== 1 /* TokenTypes.Pipe */);\n        // adjust message node loc\n        const endOffset = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.lastOffset\n            : tokenizer.currentOffset();\n        const endLoc = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.lastEndLoc\n            : tokenizer.currentPosition();\n        endNode(node, endOffset, endLoc);\n        return node;\n    }\n    function parsePlural(tokenizer, offset, loc, msgNode) {\n        const context = tokenizer.context();\n        let hasEmptyMessage = msgNode.items.length === 0;\n        const node = startNode(1 /* NodeTypes.Plural */, offset, loc);\n        node.cases = [];\n        node.cases.push(msgNode);\n        do {\n            const msg = parseMessage(tokenizer);\n            if (!hasEmptyMessage) {\n                hasEmptyMessage = msg.items.length === 0;\n            }\n            node.cases.push(msg);\n        } while (context.currentType !== 14 /* TokenTypes.EOF */);\n        if (hasEmptyMessage) {\n            emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n        }\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseResource(tokenizer) {\n        const context = tokenizer.context();\n        const { offset, startLoc } = context;\n        const msgNode = parseMessage(tokenizer);\n        if (context.currentType === 14 /* TokenTypes.EOF */) {\n            return msgNode;\n        }\n        else {\n            return parsePlural(tokenizer, offset, startLoc, msgNode);\n        }\n    }\n    function parse(source) {\n        const tokenizer = createTokenizer(source, assign({}, options));\n        const context = tokenizer.context();\n        const node = startNode(0 /* NodeTypes.Resource */, context.offset, context.startLoc);\n        if (location && node.loc) {\n            node.loc.source = source;\n        }\n        node.body = parseResource(tokenizer);\n        if (options.onCacheKey) {\n            node.cacheKey = options.onCacheKey(source);\n        }\n        // assert whether achieved to EOF\n        if (context.currentType !== 14 /* TokenTypes.EOF */) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || '');\n        }\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    return { parse };\n}\nfunction getTokenCaption(token) {\n    if (token.type === 14 /* TokenTypes.EOF */) {\n        return 'EOF';\n    }\n    const name = (token.value || '').replace(/\\r?\\n/gu, '\\\\n');\n    return name.length > 10 ? name.slice(0, 9) + '…' : name;\n}\n\nfunction createTransformer(ast, options = {} // eslint-disable-line\n) {\n    const _context = {\n        ast,\n        helpers: new Set()\n    };\n    const context = () => _context;\n    const helper = (name) => {\n        _context.helpers.add(name);\n        return name;\n    };\n    return { context, helper };\n}\nfunction traverseNodes(nodes, transformer) {\n    for (let i = 0; i < nodes.length; i++) {\n        traverseNode(nodes[i], transformer);\n    }\n}\nfunction traverseNode(node, transformer) {\n    // TODO: if we need pre-hook of transform, should be implemented to here\n    switch (node.type) {\n        case 1 /* NodeTypes.Plural */:\n            traverseNodes(node.cases, transformer);\n            transformer.helper(\"plural\" /* HelperNameMap.PLURAL */);\n            break;\n        case 2 /* NodeTypes.Message */:\n            traverseNodes(node.items, transformer);\n            break;\n        case 6 /* NodeTypes.Linked */: {\n            const linked = node;\n            traverseNode(linked.key, transformer);\n            transformer.helper(\"linked\" /* HelperNameMap.LINKED */);\n            transformer.helper(\"type\" /* HelperNameMap.TYPE */);\n            break;\n        }\n        case 5 /* NodeTypes.List */:\n            transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n            transformer.helper(\"list\" /* HelperNameMap.LIST */);\n            break;\n        case 4 /* NodeTypes.Named */:\n            transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n            transformer.helper(\"named\" /* HelperNameMap.NAMED */);\n            break;\n    }\n    // TODO: if we need post-hook of transform, should be implemented to here\n}\n// transform AST\nfunction transform(ast, options = {} // eslint-disable-line\n) {\n    const transformer = createTransformer(ast);\n    transformer.helper(\"normalize\" /* HelperNameMap.NORMALIZE */);\n    // traverse\n    ast.body && traverseNode(ast.body, transformer);\n    // set meta information\n    const context = transformer.context();\n    ast.helpers = Array.from(context.helpers);\n}\n\nfunction optimize(ast) {\n    const body = ast.body;\n    if (body.type === 2 /* NodeTypes.Message */) {\n        optimizeMessageNode(body);\n    }\n    else {\n        body.cases.forEach(c => optimizeMessageNode(c));\n    }\n    return ast;\n}\nfunction optimizeMessageNode(message) {\n    if (message.items.length === 1) {\n        const item = message.items[0];\n        if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n            message.static = item.value;\n            delete item.value; // optimization for size\n        }\n    }\n    else {\n        const values = [];\n        for (let i = 0; i < message.items.length; i++) {\n            const item = message.items[i];\n            if (!(item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */)) {\n                break;\n            }\n            if (item.value == null) {\n                break;\n            }\n            values.push(item.value);\n        }\n        if (values.length === message.items.length) {\n            message.static = join(values);\n            for (let i = 0; i < message.items.length; i++) {\n                const item = message.items[i];\n                if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n                    delete item.value; // optimization for size\n                }\n            }\n        }\n    }\n}\n\nconst ERROR_DOMAIN$1 = 'minifier';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction minify(node) {\n    node.t = node.type;\n    switch (node.type) {\n        case 0 /* NodeTypes.Resource */: {\n            const resource = node;\n            minify(resource.body);\n            resource.b = resource.body;\n            delete resource.body;\n            break;\n        }\n        case 1 /* NodeTypes.Plural */: {\n            const plural = node;\n            const cases = plural.cases;\n            for (let i = 0; i < cases.length; i++) {\n                minify(cases[i]);\n            }\n            plural.c = cases;\n            delete plural.cases;\n            break;\n        }\n        case 2 /* NodeTypes.Message */: {\n            const message = node;\n            const items = message.items;\n            for (let i = 0; i < items.length; i++) {\n                minify(items[i]);\n            }\n            message.i = items;\n            delete message.items;\n            if (message.static) {\n                message.s = message.static;\n                delete message.static;\n            }\n            break;\n        }\n        case 3 /* NodeTypes.Text */:\n        case 9 /* NodeTypes.Literal */:\n        case 8 /* NodeTypes.LinkedModifier */:\n        case 7 /* NodeTypes.LinkedKey */: {\n            const valueNode = node;\n            if (valueNode.value) {\n                valueNode.v = valueNode.value;\n                delete valueNode.value;\n            }\n            break;\n        }\n        case 6 /* NodeTypes.Linked */: {\n            const linked = node;\n            minify(linked.key);\n            linked.k = linked.key;\n            delete linked.key;\n            if (linked.modifier) {\n                minify(linked.modifier);\n                linked.m = linked.modifier;\n                delete linked.modifier;\n            }\n            break;\n        }\n        case 5 /* NodeTypes.List */: {\n            const list = node;\n            list.i = list.index;\n            delete list.index;\n            break;\n        }\n        case 4 /* NodeTypes.Named */: {\n            const named = node;\n            named.k = named.key;\n            delete named.key;\n            break;\n        }\n        default:\n            if ((process.env.NODE_ENV !== 'production')) {\n                throw createCompileError(CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE, null, {\n                    domain: ERROR_DOMAIN$1,\n                    args: [node.type]\n                });\n            }\n    }\n    delete node.type;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference types=\"source-map-js\" />\nconst ERROR_DOMAIN = 'parser';\nfunction createCodeGenerator(ast, options) {\n    const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;\n    const location = options.location !== false;\n    const _context = {\n        filename,\n        code: '',\n        column: 1,\n        line: 1,\n        offset: 0,\n        map: undefined,\n        breakLineCode,\n        needIndent: _needIndent,\n        indentLevel: 0\n    };\n    if (location && ast.loc) {\n        _context.source = ast.loc.source;\n    }\n    const context = () => _context;\n    function push(code, node) {\n        _context.code += code;\n    }\n    function _newline(n, withBreakLine = true) {\n        const _breakLineCode = withBreakLine ? breakLineCode : '';\n        push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\n    }\n    function indent(withNewLine = true) {\n        const level = ++_context.indentLevel;\n        withNewLine && _newline(level);\n    }\n    function deindent(withNewLine = true) {\n        const level = --_context.indentLevel;\n        withNewLine && _newline(level);\n    }\n    function newline() {\n        _newline(_context.indentLevel);\n    }\n    const helper = (key) => `_${key}`;\n    const needIndent = () => _context.needIndent;\n    return {\n        context,\n        push,\n        indent,\n        deindent,\n        newline,\n        helper,\n        needIndent\n    };\n}\nfunction generateLinkedNode(generator, node) {\n    const { helper } = generator;\n    generator.push(`${helper(\"linked\" /* HelperNameMap.LINKED */)}(`);\n    generateNode(generator, node.key);\n    if (node.modifier) {\n        generator.push(`, `);\n        generateNode(generator, node.modifier);\n        generator.push(`, _type`);\n    }\n    else {\n        generator.push(`, undefined, _type`);\n    }\n    generator.push(`)`);\n}\nfunction generateMessageNode(generator, node) {\n    const { helper, needIndent } = generator;\n    generator.push(`${helper(\"normalize\" /* HelperNameMap.NORMALIZE */)}([`);\n    generator.indent(needIndent());\n    const length = node.items.length;\n    for (let i = 0; i < length; i++) {\n        generateNode(generator, node.items[i]);\n        if (i === length - 1) {\n            break;\n        }\n        generator.push(', ');\n    }\n    generator.deindent(needIndent());\n    generator.push('])');\n}\nfunction generatePluralNode(generator, node) {\n    const { helper, needIndent } = generator;\n    if (node.cases.length > 1) {\n        generator.push(`${helper(\"plural\" /* HelperNameMap.PLURAL */)}([`);\n        generator.indent(needIndent());\n        const length = node.cases.length;\n        for (let i = 0; i < length; i++) {\n            generateNode(generator, node.cases[i]);\n            if (i === length - 1) {\n                break;\n            }\n            generator.push(', ');\n        }\n        generator.deindent(needIndent());\n        generator.push(`])`);\n    }\n}\nfunction generateResource(generator, node) {\n    if (node.body) {\n        generateNode(generator, node.body);\n    }\n    else {\n        generator.push('null');\n    }\n}\nfunction generateNode(generator, node) {\n    const { helper } = generator;\n    switch (node.type) {\n        case 0 /* NodeTypes.Resource */:\n            generateResource(generator, node);\n            break;\n        case 1 /* NodeTypes.Plural */:\n            generatePluralNode(generator, node);\n            break;\n        case 2 /* NodeTypes.Message */:\n            generateMessageNode(generator, node);\n            break;\n        case 6 /* NodeTypes.Linked */:\n            generateLinkedNode(generator, node);\n            break;\n        case 8 /* NodeTypes.LinkedModifier */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 7 /* NodeTypes.LinkedKey */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 5 /* NodeTypes.List */:\n            generator.push(`${helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */)}(${helper(\"list\" /* HelperNameMap.LIST */)}(${node.index}))`, node);\n            break;\n        case 4 /* NodeTypes.Named */:\n            generator.push(`${helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */)}(${helper(\"named\" /* HelperNameMap.NAMED */)}(${JSON.stringify(node.key)}))`, node);\n            break;\n        case 9 /* NodeTypes.Literal */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 3 /* NodeTypes.Text */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        default:\n            if ((process.env.NODE_ENV !== 'production')) {\n                throw createCompileError(CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE, null, {\n                    domain: ERROR_DOMAIN,\n                    args: [node.type]\n                });\n            }\n    }\n}\n// generate code from AST\nconst generate = (ast, options = {} // eslint-disable-line\n) => {\n    const mode = isString(options.mode) ? options.mode : 'normal';\n    const filename = isString(options.filename)\n        ? options.filename\n        : 'message.intl';\n    const sourceMap = !!options.sourceMap;\n    // prettier-ignore\n    const breakLineCode = options.breakLineCode != null\n        ? options.breakLineCode\n        : mode === 'arrow'\n            ? ';'\n            : '\\n';\n    const needIndent = options.needIndent ? options.needIndent : mode !== 'arrow';\n    const helpers = ast.helpers || [];\n    const generator = createCodeGenerator(ast, {\n        mode,\n        filename,\n        sourceMap,\n        breakLineCode,\n        needIndent\n    });\n    generator.push(mode === 'normal' ? `function __msg__ (ctx) {` : `(ctx) => {`);\n    generator.indent(needIndent);\n    if (helpers.length > 0) {\n        generator.push(`const { ${join(helpers.map(s => `${s}: _${s}`), ', ')} } = ctx`);\n        generator.newline();\n    }\n    generator.push(`return `);\n    generateNode(generator, ast);\n    generator.deindent(needIndent);\n    generator.push(`}`);\n    delete ast.helpers;\n    const { code, map } = generator.context();\n    return {\n        ast,\n        code,\n        map: map ? map.toJSON() : undefined // eslint-disable-line @typescript-eslint/no-explicit-any\n    };\n};\n\nfunction baseCompile(source, options = {}) {\n    const assignedOptions = assign({}, options);\n    const jit = !!assignedOptions.jit;\n    const enalbeMinify = !!assignedOptions.minify;\n    const enambeOptimize = assignedOptions.optimize == null ? true : assignedOptions.optimize;\n    // parse source codes\n    const parser = createParser(assignedOptions);\n    const ast = parser.parse(source);\n    if (!jit) {\n        // transform ASTs\n        transform(ast, assignedOptions);\n        // generate javascript codes\n        return generate(ast, assignedOptions);\n    }\n    else {\n        // optimize ASTs\n        enambeOptimize && optimize(ast);\n        // minimize ASTs\n        enalbeMinify && minify(ast);\n        // In JIT mode, no ast transform, no code generation.\n        return { ast, code: '' };\n    }\n}\n\nexport { CompileErrorCodes, CompileWarnCodes, ERROR_DOMAIN$2 as ERROR_DOMAIN, LOCATION_STUB, baseCompile, createCompileError, createCompileWarn, createLocation, createParser, createPosition, defaultOnError, detectHtmlTag, errorMessages, warnMessages };\n","/*!\n  * core-base v9.13.1\n  * (c) 2024 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nimport { getGlobalThis, isObject, isFunction, isString, isNumber, isPlainObject, assign, join, toDisplayString, isArray, incrementer, format as format$1, isPromise, isBoolean, warn, isRegExp, warnOnce, escapeHtml, inBrowser, mark, measure, isEmptyObject, generateCodeFrame, generateFormatCacheKey, isDate } from '@intlify/shared';\nimport { CompileWarnCodes, CompileErrorCodes, createCompileError, detectHtmlTag, defaultOnError, baseCompile as baseCompile$1 } from '@intlify/message-compiler';\nexport { CompileErrorCodes, createCompileError } from '@intlify/message-compiler';\n\n/**\n * This is only called in esm-bundler builds.\n * istanbul-ignore-next\n */\nfunction initFeatureFlags() {\n    if (typeof __INTLIFY_PROD_DEVTOOLS__ !== 'boolean') {\n        getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;\n    }\n    if (typeof __INTLIFY_JIT_COMPILATION__ !== 'boolean') {\n        getGlobalThis().__INTLIFY_JIT_COMPILATION__ = false;\n    }\n    if (typeof __INTLIFY_DROP_MESSAGE_COMPILER__ !== 'boolean') {\n        getGlobalThis().__INTLIFY_DROP_MESSAGE_COMPILER__ = false;\n    }\n}\n\nconst pathStateMachine =  [];\npathStateMachine[0 /* States.BEFORE_PATH */] = {\n    [\"w\" /* PathCharTypes.WORKSPACE */]: [0 /* States.BEFORE_PATH */],\n    [\"i\" /* PathCharTypes.IDENT */]: [3 /* States.IN_IDENT */, 0 /* Actions.APPEND */],\n    [\"[\" /* PathCharTypes.LEFT_BRACKET */]: [4 /* States.IN_SUB_PATH */],\n    [\"o\" /* PathCharTypes.END_OF_FAIL */]: [7 /* States.AFTER_PATH */]\n};\npathStateMachine[1 /* States.IN_PATH */] = {\n    [\"w\" /* PathCharTypes.WORKSPACE */]: [1 /* States.IN_PATH */],\n    [\".\" /* PathCharTypes.DOT */]: [2 /* States.BEFORE_IDENT */],\n    [\"[\" /* PathCharTypes.LEFT_BRACKET */]: [4 /* States.IN_SUB_PATH */],\n    [\"o\" /* PathCharTypes.END_OF_FAIL */]: [7 /* States.AFTER_PATH */]\n};\npathStateMachine[2 /* States.BEFORE_IDENT */] = {\n    [\"w\" /* PathCharTypes.WORKSPACE */]: [2 /* States.BEFORE_IDENT */],\n    [\"i\" /* PathCharTypes.IDENT */]: [3 /* States.IN_IDENT */, 0 /* Actions.APPEND */],\n    [\"0\" /* PathCharTypes.ZERO */]: [3 /* States.IN_IDENT */, 0 /* Actions.APPEND */]\n};\npathStateMachine[3 /* States.IN_IDENT */] = {\n    [\"i\" /* PathCharTypes.IDENT */]: [3 /* States.IN_IDENT */, 0 /* Actions.APPEND */],\n    [\"0\" /* PathCharTypes.ZERO */]: [3 /* States.IN_IDENT */, 0 /* Actions.APPEND */],\n    [\"w\" /* PathCharTypes.WORKSPACE */]: [1 /* States.IN_PATH */, 1 /* Actions.PUSH */],\n    [\".\" /* PathCharTypes.DOT */]: [2 /* States.BEFORE_IDENT */, 1 /* Actions.PUSH */],\n    [\"[\" /* PathCharTypes.LEFT_BRACKET */]: [4 /* States.IN_SUB_PATH */, 1 /* Actions.PUSH */],\n    [\"o\" /* PathCharTypes.END_OF_FAIL */]: [7 /* States.AFTER_PATH */, 1 /* Actions.PUSH */]\n};\npathStateMachine[4 /* States.IN_SUB_PATH */] = {\n    [\"'\" /* PathCharTypes.SINGLE_QUOTE */]: [5 /* States.IN_SINGLE_QUOTE */, 0 /* Actions.APPEND */],\n    [\"\\\"\" /* PathCharTypes.DOUBLE_QUOTE */]: [6 /* States.IN_DOUBLE_QUOTE */, 0 /* Actions.APPEND */],\n    [\"[\" /* PathCharTypes.LEFT_BRACKET */]: [\n        4 /* States.IN_SUB_PATH */,\n        2 /* Actions.INC_SUB_PATH_DEPTH */\n    ],\n    [\"]\" /* PathCharTypes.RIGHT_BRACKET */]: [1 /* States.IN_PATH */, 3 /* Actions.PUSH_SUB_PATH */],\n    [\"o\" /* PathCharTypes.END_OF_FAIL */]: 8 /* States.ERROR */,\n    [\"l\" /* PathCharTypes.ELSE */]: [4 /* States.IN_SUB_PATH */, 0 /* Actions.APPEND */]\n};\npathStateMachine[5 /* States.IN_SINGLE_QUOTE */] = {\n    [\"'\" /* PathCharTypes.SINGLE_QUOTE */]: [4 /* States.IN_SUB_PATH */, 0 /* Actions.APPEND */],\n    [\"o\" /* PathCharTypes.END_OF_FAIL */]: 8 /* States.ERROR */,\n    [\"l\" /* PathCharTypes.ELSE */]: [5 /* States.IN_SINGLE_QUOTE */, 0 /* Actions.APPEND */]\n};\npathStateMachine[6 /* States.IN_DOUBLE_QUOTE */] = {\n    [\"\\\"\" /* PathCharTypes.DOUBLE_QUOTE */]: [4 /* States.IN_SUB_PATH */, 0 /* Actions.APPEND */],\n    [\"o\" /* PathCharTypes.END_OF_FAIL */]: 8 /* States.ERROR */,\n    [\"l\" /* PathCharTypes.ELSE */]: [6 /* States.IN_DOUBLE_QUOTE */, 0 /* Actions.APPEND */]\n};\n/**\n * Check if an expression is a literal value.\n */\nconst literalValueRE = /^\\s?(?:true|false|-?[\\d.]+|'[^']*'|\"[^\"]*\")\\s?$/;\nfunction isLiteral(exp) {\n    return literalValueRE.test(exp);\n}\n/**\n * Strip quotes from a string\n */\nfunction stripQuotes(str) {\n    const a = str.charCodeAt(0);\n    const b = str.charCodeAt(str.length - 1);\n    return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n}\n/**\n * Determine the type of a character in a keypath.\n */\nfunction getPathCharType(ch) {\n    if (ch === undefined || ch === null) {\n        return \"o\" /* PathCharTypes.END_OF_FAIL */;\n    }\n    const code = ch.charCodeAt(0);\n    switch (code) {\n        case 0x5b: // [\n        case 0x5d: // ]\n        case 0x2e: // .\n        case 0x22: // \"\n        case 0x27: // '\n            return ch;\n        case 0x5f: // _\n        case 0x24: // $\n        case 0x2d: // -\n            return \"i\" /* PathCharTypes.IDENT */;\n        case 0x09: // Tab (HT)\n        case 0x0a: // Newline (LF)\n        case 0x0d: // Return (CR)\n        case 0xa0: // No-break space (NBSP)\n        case 0xfeff: // Byte Order Mark (BOM)\n        case 0x2028: // Line Separator (LS)\n        case 0x2029: // Paragraph Separator (PS)\n            return \"w\" /* PathCharTypes.WORKSPACE */;\n    }\n    return \"i\" /* PathCharTypes.IDENT */;\n}\n/**\n * Format a subPath, return its plain form if it is\n * a literal string or number. Otherwise prepend the\n * dynamic indicator (*).\n */\nfunction formatSubPath(path) {\n    const trimmed = path.trim();\n    // invalid leading 0\n    if (path.charAt(0) === '0' && isNaN(parseInt(path))) {\n        return false;\n    }\n    return isLiteral(trimmed)\n        ? stripQuotes(trimmed)\n        : \"*\" /* PathCharTypes.ASTARISK */ + trimmed;\n}\n/**\n * Parse a string path into an array of segments\n */\nfunction parse(path) {\n    const keys = [];\n    let index = -1;\n    let mode = 0 /* States.BEFORE_PATH */;\n    let subPathDepth = 0;\n    let c;\n    let key; // eslint-disable-line\n    let newChar;\n    let type;\n    let transition;\n    let action;\n    let typeMap;\n    const actions = [];\n    actions[0 /* Actions.APPEND */] = () => {\n        if (key === undefined) {\n            key = newChar;\n        }\n        else {\n            key += newChar;\n        }\n    };\n    actions[1 /* Actions.PUSH */] = () => {\n        if (key !== undefined) {\n            keys.push(key);\n            key = undefined;\n        }\n    };\n    actions[2 /* Actions.INC_SUB_PATH_DEPTH */] = () => {\n        actions[0 /* Actions.APPEND */]();\n        subPathDepth++;\n    };\n    actions[3 /* Actions.PUSH_SUB_PATH */] = () => {\n        if (subPathDepth > 0) {\n            subPathDepth--;\n            mode = 4 /* States.IN_SUB_PATH */;\n            actions[0 /* Actions.APPEND */]();\n        }\n        else {\n            subPathDepth = 0;\n            if (key === undefined) {\n                return false;\n            }\n            key = formatSubPath(key);\n            if (key === false) {\n                return false;\n            }\n            else {\n                actions[1 /* Actions.PUSH */]();\n            }\n        }\n    };\n    function maybeUnescapeQuote() {\n        const nextChar = path[index + 1];\n        if ((mode === 5 /* States.IN_SINGLE_QUOTE */ &&\n            nextChar === \"'\" /* PathCharTypes.SINGLE_QUOTE */) ||\n            (mode === 6 /* States.IN_DOUBLE_QUOTE */ &&\n                nextChar === \"\\\"\" /* PathCharTypes.DOUBLE_QUOTE */)) {\n            index++;\n            newChar = '\\\\' + nextChar;\n            actions[0 /* Actions.APPEND */]();\n            return true;\n        }\n    }\n    while (mode !== null) {\n        index++;\n        c = path[index];\n        if (c === '\\\\' && maybeUnescapeQuote()) {\n            continue;\n        }\n        type = getPathCharType(c);\n        typeMap = pathStateMachine[mode];\n        transition = typeMap[type] || typeMap[\"l\" /* PathCharTypes.ELSE */] || 8 /* States.ERROR */;\n        // check parse error\n        if (transition === 8 /* States.ERROR */) {\n            return;\n        }\n        mode = transition[0];\n        if (transition[1] !== undefined) {\n            action = actions[transition[1]];\n            if (action) {\n                newChar = c;\n                if (action() === false) {\n                    return;\n                }\n            }\n        }\n        // check parse finish\n        if (mode === 7 /* States.AFTER_PATH */) {\n            return keys;\n        }\n    }\n}\n// path token cache\nconst cache = new Map();\n/**\n * key-value message resolver\n *\n * @remarks\n * Resolves messages with the key-value structure. Note that messages with a hierarchical structure such as objects cannot be resolved\n *\n * @param obj - A target object to be resolved with path\n * @param path - A {@link Path | path} to resolve the value of message\n *\n * @returns A resolved {@link PathValue | path value}\n *\n * @VueI18nGeneral\n */\nfunction resolveWithKeyValue(obj, path) {\n    return isObject(obj) ? obj[path] : null;\n}\n/**\n * message resolver\n *\n * @remarks\n * Resolves messages. messages with a hierarchical structure such as objects can be resolved. This resolver is used in VueI18n as default.\n *\n * @param obj - A target object to be resolved with path\n * @param path - A {@link Path | path} to resolve the value of message\n *\n * @returns A resolved {@link PathValue | path value}\n *\n * @VueI18nGeneral\n */\nfunction resolveValue(obj, path) {\n    // check object\n    if (!isObject(obj)) {\n        return null;\n    }\n    // parse path\n    let hit = cache.get(path);\n    if (!hit) {\n        hit = parse(path);\n        if (hit) {\n            cache.set(path, hit);\n        }\n    }\n    // check hit\n    if (!hit) {\n        return null;\n    }\n    // resolve path value\n    const len = hit.length;\n    let last = obj;\n    let i = 0;\n    while (i < len) {\n        const val = last[hit[i]];\n        if (val === undefined) {\n            return null;\n        }\n        if (isFunction(last)) {\n            return null;\n        }\n        last = val;\n        i++;\n    }\n    return last;\n}\n\nconst DEFAULT_MODIFIER = (str) => str;\nconst DEFAULT_MESSAGE = (ctx) => ''; // eslint-disable-line\nconst DEFAULT_MESSAGE_DATA_TYPE = 'text';\nconst DEFAULT_NORMALIZE = (values) => values.length === 0 ? '' : join(values);\nconst DEFAULT_INTERPOLATE = toDisplayString;\nfunction pluralDefault(choice, choicesLength) {\n    choice = Math.abs(choice);\n    if (choicesLength === 2) {\n        // prettier-ignore\n        return choice\n            ? choice > 1\n                ? 1\n                : 0\n            : 1;\n    }\n    return choice ? Math.min(choice, 2) : 0;\n}\nfunction getPluralIndex(options) {\n    // prettier-ignore\n    const index = isNumber(options.pluralIndex)\n        ? options.pluralIndex\n        : -1;\n    // prettier-ignore\n    return options.named && (isNumber(options.named.count) || isNumber(options.named.n))\n        ? isNumber(options.named.count)\n            ? options.named.count\n            : isNumber(options.named.n)\n                ? options.named.n\n                : index\n        : index;\n}\nfunction normalizeNamed(pluralIndex, props) {\n    if (!props.count) {\n        props.count = pluralIndex;\n    }\n    if (!props.n) {\n        props.n = pluralIndex;\n    }\n}\nfunction createMessageContext(options = {}) {\n    const locale = options.locale;\n    const pluralIndex = getPluralIndex(options);\n    const pluralRule = isObject(options.pluralRules) &&\n        isString(locale) &&\n        isFunction(options.pluralRules[locale])\n        ? options.pluralRules[locale]\n        : pluralDefault;\n    const orgPluralRule = isObject(options.pluralRules) &&\n        isString(locale) &&\n        isFunction(options.pluralRules[locale])\n        ? pluralDefault\n        : undefined;\n    const plural = (messages) => {\n        return messages[pluralRule(pluralIndex, messages.length, orgPluralRule)];\n    };\n    const _list = options.list || [];\n    const list = (index) => _list[index];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const _named = options.named || {};\n    isNumber(options.pluralIndex) && normalizeNamed(pluralIndex, _named);\n    const named = (key) => _named[key];\n    function message(key) {\n        // prettier-ignore\n        const msg = isFunction(options.messages)\n            ? options.messages(key)\n            : isObject(options.messages)\n                ? options.messages[key]\n                : false;\n        return !msg\n            ? options.parent\n                ? options.parent.message(key) // resolve from parent messages\n                : DEFAULT_MESSAGE\n            : msg;\n    }\n    const _modifier = (name) => options.modifiers\n        ? options.modifiers[name]\n        : DEFAULT_MODIFIER;\n    const normalize = isPlainObject(options.processor) && isFunction(options.processor.normalize)\n        ? options.processor.normalize\n        : DEFAULT_NORMALIZE;\n    const interpolate = isPlainObject(options.processor) &&\n        isFunction(options.processor.interpolate)\n        ? options.processor.interpolate\n        : DEFAULT_INTERPOLATE;\n    const type = isPlainObject(options.processor) && isString(options.processor.type)\n        ? options.processor.type\n        : DEFAULT_MESSAGE_DATA_TYPE;\n    const linked = (key, ...args) => {\n        const [arg1, arg2] = args;\n        let type = 'text';\n        let modifier = '';\n        if (args.length === 1) {\n            if (isObject(arg1)) {\n                modifier = arg1.modifier || modifier;\n                type = arg1.type || type;\n            }\n            else if (isString(arg1)) {\n                modifier = arg1 || modifier;\n            }\n        }\n        else if (args.length === 2) {\n            if (isString(arg1)) {\n                modifier = arg1 || modifier;\n            }\n            if (isString(arg2)) {\n                type = arg2 || type;\n            }\n        }\n        const ret = message(key)(ctx);\n        const msg = \n        // The message in vnode resolved with linked are returned as an array by processor.nomalize\n        type === 'vnode' && isArray(ret) && modifier\n            ? ret[0]\n            : ret;\n        return modifier ? _modifier(modifier)(msg, type) : msg;\n    };\n    const ctx = {\n        [\"list\" /* HelperNameMap.LIST */]: list,\n        [\"named\" /* HelperNameMap.NAMED */]: named,\n        [\"plural\" /* HelperNameMap.PLURAL */]: plural,\n        [\"linked\" /* HelperNameMap.LINKED */]: linked,\n        [\"message\" /* HelperNameMap.MESSAGE */]: message,\n        [\"type\" /* HelperNameMap.TYPE */]: type,\n        [\"interpolate\" /* HelperNameMap.INTERPOLATE */]: interpolate,\n        [\"normalize\" /* HelperNameMap.NORMALIZE */]: normalize,\n        [\"values\" /* HelperNameMap.VALUES */]: assign({}, _list, _named)\n    };\n    return ctx;\n}\n\nlet devtools = null;\nfunction setDevToolsHook(hook) {\n    devtools = hook;\n}\nfunction getDevToolsHook() {\n    return devtools;\n}\nfunction initI18nDevTools(i18n, version, meta) {\n    // TODO: queue if devtools is undefined\n    devtools &&\n        devtools.emit(\"i18n:init\" /* IntlifyDevToolsHooks.I18nInit */, {\n            timestamp: Date.now(),\n            i18n,\n            version,\n            meta\n        });\n}\nconst translateDevTools = /* #__PURE__*/ createDevToolsHook(\"function:translate\" /* IntlifyDevToolsHooks.FunctionTranslate */);\nfunction createDevToolsHook(hook) {\n    return (payloads) => devtools && devtools.emit(hook, payloads);\n}\n\nconst code$1 = CompileWarnCodes.__EXTEND_POINT__;\nconst inc$1 = incrementer(code$1);\nconst CoreWarnCodes = {\n    NOT_FOUND_KEY: code$1, // 2\n    FALLBACK_TO_TRANSLATE: inc$1(), // 3\n    CANNOT_FORMAT_NUMBER: inc$1(), // 4\n    FALLBACK_TO_NUMBER_FORMAT: inc$1(), // 5\n    CANNOT_FORMAT_DATE: inc$1(), // 6\n    FALLBACK_TO_DATE_FORMAT: inc$1(), // 7\n    EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER: inc$1(), // 8\n    __EXTEND_POINT__: inc$1() // 9\n};\n/** @internal */\nconst warnMessages = {\n    [CoreWarnCodes.NOT_FOUND_KEY]: `Not found '{key}' key in '{locale}' locale messages.`,\n    [CoreWarnCodes.FALLBACK_TO_TRANSLATE]: `Fall back to translate '{key}' key with '{target}' locale.`,\n    [CoreWarnCodes.CANNOT_FORMAT_NUMBER]: `Cannot format a number value due to not supported Intl.NumberFormat.`,\n    [CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT]: `Fall back to number format '{key}' key with '{target}' locale.`,\n    [CoreWarnCodes.CANNOT_FORMAT_DATE]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,\n    [CoreWarnCodes.FALLBACK_TO_DATE_FORMAT]: `Fall back to datetime format '{key}' key with '{target}' locale.`,\n    [CoreWarnCodes.EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER]: `This project is using Custom Message Compiler, which is an experimental feature. It may receive breaking changes or be removed in the future.`\n};\nfunction getWarnMessage(code, ...args) {\n    return format$1(warnMessages[code], ...args);\n}\n\nconst code = CompileErrorCodes.__EXTEND_POINT__;\nconst inc = incrementer(code);\nconst CoreErrorCodes = {\n    INVALID_ARGUMENT: code, // 17\n    INVALID_DATE_ARGUMENT: inc(), // 18\n    INVALID_ISO_DATE_ARGUMENT: inc(), // 19\n    NOT_SUPPORT_NON_STRING_MESSAGE: inc(), // 20\n    NOT_SUPPORT_LOCALE_PROMISE_VALUE: inc(), // 21\n    NOT_SUPPORT_LOCALE_ASYNC_FUNCTION: inc(), // 22\n    NOT_SUPPORT_LOCALE_TYPE: inc(), // 23\n    __EXTEND_POINT__: inc() // 24\n};\nfunction createCoreError(code) {\n    return createCompileError(code, null, (process.env.NODE_ENV !== 'production') ? { messages: errorMessages } : undefined);\n}\n/** @internal */\nconst errorMessages = {\n    [CoreErrorCodes.INVALID_ARGUMENT]: 'Invalid arguments',\n    [CoreErrorCodes.INVALID_DATE_ARGUMENT]: 'The date provided is an invalid Date object.' +\n        'Make sure your Date represents a valid date.',\n    [CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT]: 'The argument provided is not a valid ISO date string',\n    [CoreErrorCodes.NOT_SUPPORT_NON_STRING_MESSAGE]: 'Not support non-string message',\n    [CoreErrorCodes.NOT_SUPPORT_LOCALE_PROMISE_VALUE]: 'cannot support promise value',\n    [CoreErrorCodes.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION]: 'cannot support async function',\n    [CoreErrorCodes.NOT_SUPPORT_LOCALE_TYPE]: 'cannot support locale type'\n};\n\n/** @internal */\nfunction getLocale(context, options) {\n    return options.locale != null\n        ? resolveLocale(options.locale)\n        : resolveLocale(context.locale);\n}\nlet _resolveLocale;\n/** @internal */\nfunction resolveLocale(locale) {\n    if (isString(locale)) {\n        return locale;\n    }\n    else {\n        if (isFunction(locale)) {\n            if (locale.resolvedOnce && _resolveLocale != null) {\n                return _resolveLocale;\n            }\n            else if (locale.constructor.name === 'Function') {\n                const resolve = locale();\n                if (isPromise(resolve)) {\n                    throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_PROMISE_VALUE);\n                }\n                return (_resolveLocale = resolve);\n            }\n            else {\n                throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION);\n            }\n        }\n        else {\n            throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_TYPE);\n        }\n    }\n}\n/**\n * Fallback with simple implemenation\n *\n * @remarks\n * A fallback locale function implemented with a simple fallback algorithm.\n *\n * Basically, it returns the value as specified in the `fallbackLocale` props, and is processed with the fallback inside intlify.\n *\n * @param ctx - A {@link CoreContext | context}\n * @param fallback - A {@link FallbackLocale | fallback locale}\n * @param start - A starting {@link Locale | locale}\n *\n * @returns Fallback locales\n *\n * @VueI18nGeneral\n */\nfunction fallbackWithSimple(ctx, fallback, start // eslint-disable-line @typescript-eslint/no-unused-vars\n) {\n    // prettier-ignore\n    return [...new Set([\n            start,\n            ...(isArray(fallback)\n                ? fallback\n                : isObject(fallback)\n                    ? Object.keys(fallback)\n                    : isString(fallback)\n                        ? [fallback]\n                        : [start])\n        ])];\n}\n/**\n * Fallback with locale chain\n *\n * @remarks\n * A fallback locale function implemented with a fallback chain algorithm. It's used in VueI18n as default.\n *\n * @param ctx - A {@link CoreContext | context}\n * @param fallback - A {@link FallbackLocale | fallback locale}\n * @param start - A starting {@link Locale | locale}\n *\n * @returns Fallback locales\n *\n * @VueI18nSee [Fallbacking](../guide/essentials/fallback)\n *\n * @VueI18nGeneral\n */\nfunction fallbackWithLocaleChain(ctx, fallback, start) {\n    const startLocale = isString(start) ? start : DEFAULT_LOCALE;\n    const context = ctx;\n    if (!context.__localeChainCache) {\n        context.__localeChainCache = new Map();\n    }\n    let chain = context.__localeChainCache.get(startLocale);\n    if (!chain) {\n        chain = [];\n        // first block defined by start\n        let block = [start];\n        // while any intervening block found\n        while (isArray(block)) {\n            block = appendBlockToChain(chain, block, fallback);\n        }\n        // prettier-ignore\n        // last block defined by default\n        const defaults = isArray(fallback) || !isPlainObject(fallback)\n            ? fallback\n            : fallback['default']\n                ? fallback['default']\n                : null;\n        // convert defaults to array\n        block = isString(defaults) ? [defaults] : defaults;\n        if (isArray(block)) {\n            appendBlockToChain(chain, block, false);\n        }\n        context.__localeChainCache.set(startLocale, chain);\n    }\n    return chain;\n}\nfunction appendBlockToChain(chain, block, blocks) {\n    let follow = true;\n    for (let i = 0; i < block.length && isBoolean(follow); i++) {\n        const locale = block[i];\n        if (isString(locale)) {\n            follow = appendLocaleToChain(chain, block[i], blocks);\n        }\n    }\n    return follow;\n}\nfunction appendLocaleToChain(chain, locale, blocks) {\n    let follow;\n    const tokens = locale.split('-');\n    do {\n        const target = tokens.join('-');\n        follow = appendItemToChain(chain, target, blocks);\n        tokens.splice(-1, 1);\n    } while (tokens.length && follow === true);\n    return follow;\n}\nfunction appendItemToChain(chain, target, blocks) {\n    let follow = false;\n    if (!chain.includes(target)) {\n        follow = true;\n        if (target) {\n            follow = target[target.length - 1] !== '!';\n            const locale = target.replace(/!/g, '');\n            chain.push(locale);\n            if ((isArray(blocks) || isPlainObject(blocks)) &&\n                blocks[locale] // eslint-disable-line @typescript-eslint/no-explicit-any\n            ) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                follow = blocks[locale];\n            }\n        }\n    }\n    return follow;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Intlify core-base version\n * @internal\n */\nconst VERSION = '9.13.1';\nconst NOT_REOSLVED = -1;\nconst DEFAULT_LOCALE = 'en-US';\nconst MISSING_RESOLVE_VALUE = '';\nconst capitalize = (str) => `${str.charAt(0).toLocaleUpperCase()}${str.substr(1)}`;\nfunction getDefaultLinkedModifiers() {\n    return {\n        upper: (val, type) => {\n            // prettier-ignore\n            return type === 'text' && isString(val)\n                ? val.toUpperCase()\n                : type === 'vnode' && isObject(val) && '__v_isVNode' in val\n                    ? val.children.toUpperCase()\n                    : val;\n        },\n        lower: (val, type) => {\n            // prettier-ignore\n            return type === 'text' && isString(val)\n                ? val.toLowerCase()\n                : type === 'vnode' && isObject(val) && '__v_isVNode' in val\n                    ? val.children.toLowerCase()\n                    : val;\n        },\n        capitalize: (val, type) => {\n            // prettier-ignore\n            return (type === 'text' && isString(val)\n                ? capitalize(val)\n                : type === 'vnode' && isObject(val) && '__v_isVNode' in val\n                    ? capitalize(val.children)\n                    : val);\n        }\n    };\n}\nlet _compiler;\nfunction registerMessageCompiler(compiler) {\n    _compiler = compiler;\n}\nlet _resolver;\n/**\n * Register the message resolver\n *\n * @param resolver - A {@link MessageResolver} function\n *\n * @VueI18nGeneral\n */\nfunction registerMessageResolver(resolver) {\n    _resolver = resolver;\n}\nlet _fallbacker;\n/**\n * Register the locale fallbacker\n *\n * @param fallbacker - A {@link LocaleFallbacker} function\n *\n * @VueI18nGeneral\n */\nfunction registerLocaleFallbacker(fallbacker) {\n    _fallbacker = fallbacker;\n}\n// Additional Meta for Intlify DevTools\nlet _additionalMeta =  null;\n/* #__NO_SIDE_EFFECTS__ */\nconst setAdditionalMeta = (meta) => {\n    _additionalMeta = meta;\n};\n/* #__NO_SIDE_EFFECTS__ */\nconst getAdditionalMeta = () => _additionalMeta;\nlet _fallbackContext = null;\nconst setFallbackContext = (context) => {\n    _fallbackContext = context;\n};\nconst getFallbackContext = () => _fallbackContext;\n// ID for CoreContext\nlet _cid = 0;\nfunction createCoreContext(options = {}) {\n    // setup options\n    const onWarn = isFunction(options.onWarn) ? options.onWarn : warn;\n    const version = isString(options.version) ? options.version : VERSION;\n    const locale = isString(options.locale) || isFunction(options.locale)\n        ? options.locale\n        : DEFAULT_LOCALE;\n    const _locale = isFunction(locale) ? DEFAULT_LOCALE : locale;\n    const fallbackLocale = isArray(options.fallbackLocale) ||\n        isPlainObject(options.fallbackLocale) ||\n        isString(options.fallbackLocale) ||\n        options.fallbackLocale === false\n        ? options.fallbackLocale\n        : _locale;\n    const messages = isPlainObject(options.messages)\n        ? options.messages\n        : { [_locale]: {} };\n    const datetimeFormats = isPlainObject(options.datetimeFormats)\n            ? options.datetimeFormats\n            : { [_locale]: {} }\n        ;\n    const numberFormats = isPlainObject(options.numberFormats)\n            ? options.numberFormats\n            : { [_locale]: {} }\n        ;\n    const modifiers = assign({}, options.modifiers || {}, getDefaultLinkedModifiers());\n    const pluralRules = options.pluralRules || {};\n    const missing = isFunction(options.missing) ? options.missing : null;\n    const missingWarn = isBoolean(options.missingWarn) || isRegExp(options.missingWarn)\n        ? options.missingWarn\n        : true;\n    const fallbackWarn = isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn)\n        ? options.fallbackWarn\n        : true;\n    const fallbackFormat = !!options.fallbackFormat;\n    const unresolving = !!options.unresolving;\n    const postTranslation = isFunction(options.postTranslation)\n        ? options.postTranslation\n        : null;\n    const processor = isPlainObject(options.processor) ? options.processor : null;\n    const warnHtmlMessage = isBoolean(options.warnHtmlMessage)\n        ? options.warnHtmlMessage\n        : true;\n    const escapeParameter = !!options.escapeParameter;\n    const messageCompiler = isFunction(options.messageCompiler)\n        ? options.messageCompiler\n        : _compiler;\n    if ((process.env.NODE_ENV !== 'production') &&\n        !false &&\n        !false &&\n        isFunction(options.messageCompiler)) {\n        warnOnce(getWarnMessage(CoreWarnCodes.EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER));\n    }\n    const messageResolver = isFunction(options.messageResolver)\n        ? options.messageResolver\n        : _resolver || resolveWithKeyValue;\n    const localeFallbacker = isFunction(options.localeFallbacker)\n        ? options.localeFallbacker\n        : _fallbacker || fallbackWithSimple;\n    const fallbackContext = isObject(options.fallbackContext)\n        ? options.fallbackContext\n        : undefined;\n    // setup internal options\n    const internalOptions = options;\n    const __datetimeFormatters = isObject(internalOptions.__datetimeFormatters)\n            ? internalOptions.__datetimeFormatters\n            : new Map()\n        ;\n    const __numberFormatters = isObject(internalOptions.__numberFormatters)\n            ? internalOptions.__numberFormatters\n            : new Map()\n        ;\n    const __meta = isObject(internalOptions.__meta) ? internalOptions.__meta : {};\n    _cid++;\n    const context = {\n        version,\n        cid: _cid,\n        locale,\n        fallbackLocale,\n        messages,\n        modifiers,\n        pluralRules,\n        missing,\n        missingWarn,\n        fallbackWarn,\n        fallbackFormat,\n        unresolving,\n        postTranslation,\n        processor,\n        warnHtmlMessage,\n        escapeParameter,\n        messageCompiler,\n        messageResolver,\n        localeFallbacker,\n        fallbackContext,\n        onWarn,\n        __meta\n    };\n    {\n        context.datetimeFormats = datetimeFormats;\n        context.numberFormats = numberFormats;\n        context.__datetimeFormatters = __datetimeFormatters;\n        context.__numberFormatters = __numberFormatters;\n    }\n    // for vue-devtools timeline event\n    if ((process.env.NODE_ENV !== 'production')) {\n        context.__v_emitter =\n            internalOptions.__v_emitter != null\n                ? internalOptions.__v_emitter\n                : undefined;\n    }\n    // NOTE: experimental !!\n    if ((process.env.NODE_ENV !== 'production') || __INTLIFY_PROD_DEVTOOLS__) {\n        initI18nDevTools(context, version, __meta);\n    }\n    return context;\n}\n/** @internal */\nfunction isTranslateFallbackWarn(fallback, key) {\n    return fallback instanceof RegExp ? fallback.test(key) : fallback;\n}\n/** @internal */\nfunction isTranslateMissingWarn(missing, key) {\n    return missing instanceof RegExp ? missing.test(key) : missing;\n}\n/** @internal */\nfunction handleMissing(context, key, locale, missingWarn, type) {\n    const { missing, onWarn } = context;\n    // for vue-devtools timeline event\n    if ((process.env.NODE_ENV !== 'production')) {\n        const emitter = context.__v_emitter;\n        if (emitter) {\n            emitter.emit(\"missing\" /* VueDevToolsTimelineEvents.MISSING */, {\n                locale,\n                key,\n                type,\n                groupId: `${type}:${key}`\n            });\n        }\n    }\n    if (missing !== null) {\n        const ret = missing(context, locale, key, type);\n        return isString(ret) ? ret : key;\n    }\n    else {\n        if ((process.env.NODE_ENV !== 'production') && isTranslateMissingWarn(missingWarn, key)) {\n            onWarn(getWarnMessage(CoreWarnCodes.NOT_FOUND_KEY, { key, locale }));\n        }\n        return key;\n    }\n}\n/** @internal */\nfunction updateFallbackLocale(ctx, locale, fallback) {\n    const context = ctx;\n    context.__localeChainCache = new Map();\n    ctx.localeFallbacker(ctx, fallback, locale);\n}\n/** @internal */\nfunction isAlmostSameLocale(locale, compareLocale) {\n    if (locale === compareLocale)\n        return false;\n    return locale.split('-')[0] === compareLocale.split('-')[0];\n}\n/** @internal */\nfunction isImplicitFallback(targetLocale, locales) {\n    const index = locales.indexOf(targetLocale);\n    if (index === -1) {\n        return false;\n    }\n    for (let i = index + 1; i < locales.length; i++) {\n        if (isAlmostSameLocale(targetLocale, locales[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nfunction format(ast) {\n    const msg = (ctx) => formatParts(ctx, ast);\n    return msg;\n}\nfunction formatParts(ctx, ast) {\n    const body = ast.b || ast.body;\n    if ((body.t || body.type) === 1 /* NodeTypes.Plural */) {\n        const plural = body;\n        const cases = plural.c || plural.cases;\n        return ctx.plural(cases.reduce((messages, c) => [\n            ...messages,\n            formatMessageParts(ctx, c)\n        ], []));\n    }\n    else {\n        return formatMessageParts(ctx, body);\n    }\n}\nfunction formatMessageParts(ctx, node) {\n    const _static = node.s || node.static;\n    if (_static) {\n        return ctx.type === 'text'\n            ? _static\n            : ctx.normalize([_static]);\n    }\n    else {\n        const messages = (node.i || node.items).reduce((acm, c) => [...acm, formatMessagePart(ctx, c)], []);\n        return ctx.normalize(messages);\n    }\n}\nfunction formatMessagePart(ctx, node) {\n    const type = node.t || node.type;\n    switch (type) {\n        case 3 /* NodeTypes.Text */: {\n            const text = node;\n            return (text.v || text.value);\n        }\n        case 9 /* NodeTypes.Literal */: {\n            const literal = node;\n            return (literal.v || literal.value);\n        }\n        case 4 /* NodeTypes.Named */: {\n            const named = node;\n            return ctx.interpolate(ctx.named(named.k || named.key));\n        }\n        case 5 /* NodeTypes.List */: {\n            const list = node;\n            return ctx.interpolate(ctx.list(list.i != null ? list.i : list.index));\n        }\n        case 6 /* NodeTypes.Linked */: {\n            const linked = node;\n            const modifier = linked.m || linked.modifier;\n            return ctx.linked(formatMessagePart(ctx, linked.k || linked.key), modifier ? formatMessagePart(ctx, modifier) : undefined, ctx.type);\n        }\n        case 7 /* NodeTypes.LinkedKey */: {\n            const linkedKey = node;\n            return (linkedKey.v || linkedKey.value);\n        }\n        case 8 /* NodeTypes.LinkedModifier */: {\n            const linkedModifier = node;\n            return (linkedModifier.v || linkedModifier.value);\n        }\n        default:\n            throw new Error(`unhandled node type on format message part: ${type}`);\n    }\n}\n\nconst WARN_MESSAGE = `Detected HTML in '{source}' message. Recommend not using HTML messages to avoid XSS.`;\nfunction checkHtmlMessage(source, warnHtmlMessage) {\n    if (warnHtmlMessage && detectHtmlTag(source)) {\n        warn(format$1(WARN_MESSAGE, { source }));\n    }\n}\nconst defaultOnCacheKey = (message) => message;\nlet compileCache = Object.create(null);\nfunction onCompileWarn(_warn) {\n    if (_warn.code === CompileWarnCodes.USE_MODULO_SYNTAX) {\n        warn(`The use of named interpolation with modulo syntax is deprecated. ` +\n            `It will be removed in v10.\\n` +\n            `reference: https://vue-i18n.intlify.dev/guide/essentials/syntax#rails-i18n-format \\n` +\n            `(message compiler warning message: ${_warn.message})`);\n    }\n}\nfunction clearCompileCache() {\n    compileCache = Object.create(null);\n}\nconst isMessageAST = (val) => isObject(val) &&\n    (val.t === 0 || val.type === 0) &&\n    ('b' in val || 'body' in val);\nfunction baseCompile(message, options = {}) {\n    // error detecting on compile\n    let detectError = false;\n    const onError = options.onError || defaultOnError;\n    options.onError = (err) => {\n        detectError = true;\n        onError(err);\n    };\n    // compile with mesasge-compiler\n    return { ...baseCompile$1(message, options), detectError };\n}\n/* #__NO_SIDE_EFFECTS__ */\nconst compileToFunction = (message, context) => {\n    if (!isString(message)) {\n        throw createCoreError(CoreErrorCodes.NOT_SUPPORT_NON_STRING_MESSAGE);\n    }\n    // set onWarn\n    if ((process.env.NODE_ENV !== 'production')) {\n        context.onWarn = onCompileWarn;\n    }\n    {\n        // check HTML message\n        const warnHtmlMessage = isBoolean(context.warnHtmlMessage)\n            ? context.warnHtmlMessage\n            : true;\n        (process.env.NODE_ENV !== 'production') && checkHtmlMessage(message, warnHtmlMessage);\n        // check caches\n        const onCacheKey = context.onCacheKey || defaultOnCacheKey;\n        const cacheKey = onCacheKey(message);\n        const cached = compileCache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        // compile\n        const { code, detectError } = baseCompile(message, context);\n        // evaluate function\n        const msg = new Function(`return ${code}`)();\n        // if occurred compile error, don't cache\n        return !detectError\n            ? (compileCache[cacheKey] = msg)\n            : msg;\n    }\n};\nfunction compile(message, context) {\n    // set onWarn\n    if ((process.env.NODE_ENV !== 'production')) {\n        context.onWarn = onCompileWarn;\n    }\n    if (((__INTLIFY_JIT_COMPILATION__ && !__INTLIFY_DROP_MESSAGE_COMPILER__)) &&\n        isString(message)) {\n        // check HTML message\n        const warnHtmlMessage = isBoolean(context.warnHtmlMessage)\n            ? context.warnHtmlMessage\n            : true;\n        (process.env.NODE_ENV !== 'production') && checkHtmlMessage(message, warnHtmlMessage);\n        // check caches\n        const onCacheKey = context.onCacheKey || defaultOnCacheKey;\n        const cacheKey = onCacheKey(message);\n        const cached = compileCache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        // compile with JIT mode\n        const { ast, detectError } = baseCompile(message, {\n            ...context,\n            location: (process.env.NODE_ENV !== 'production'),\n            jit: true\n        });\n        // compose message function from AST\n        const msg = format(ast);\n        // if occurred compile error, don't cache\n        return !detectError\n            ? (compileCache[cacheKey] = msg)\n            : msg;\n    }\n    else {\n        if ((process.env.NODE_ENV !== 'production') && !isMessageAST(message)) {\n            warn(`the message that is resolve with key '${context.key}' is not supported for jit compilation`);\n            return (() => message);\n        }\n        // AST case (passed from bundler)\n        const cacheKey = message.cacheKey;\n        if (cacheKey) {\n            const cached = compileCache[cacheKey];\n            if (cached) {\n                return cached;\n            }\n            // compose message function from message (AST)\n            return (compileCache[cacheKey] =\n                format(message));\n        }\n        else {\n            return format(message);\n        }\n    }\n}\n\nconst NOOP_MESSAGE_FUNCTION = () => '';\nconst isMessageFunction = (val) => isFunction(val);\n// implementation of `translate` function\nfunction translate(context, ...args) {\n    const { fallbackFormat, postTranslation, unresolving, messageCompiler, fallbackLocale, messages } = context;\n    const [key, options] = parseTranslateArgs(...args);\n    const missingWarn = isBoolean(options.missingWarn)\n        ? options.missingWarn\n        : context.missingWarn;\n    const fallbackWarn = isBoolean(options.fallbackWarn)\n        ? options.fallbackWarn\n        : context.fallbackWarn;\n    const escapeParameter = isBoolean(options.escapeParameter)\n        ? options.escapeParameter\n        : context.escapeParameter;\n    const resolvedMessage = !!options.resolvedMessage;\n    // prettier-ignore\n    const defaultMsgOrKey = isString(options.default) || isBoolean(options.default) // default by function option\n        ? !isBoolean(options.default)\n            ? options.default\n            : (!messageCompiler ? () => key : key)\n        : fallbackFormat // default by `fallbackFormat` option\n            ? (!messageCompiler ? () => key : key)\n            : '';\n    const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== '';\n    const locale = getLocale(context, options);\n    // escape params\n    escapeParameter && escapeParams(options);\n    // resolve message format\n    // eslint-disable-next-line prefer-const\n    let [formatScope, targetLocale, message] = !resolvedMessage\n        ? resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn)\n        : [\n            key,\n            locale,\n            messages[locale] || {}\n        ];\n    // NOTE:\n    //  Fix to work around `ssrTransfrom` bug in Vite.\n    //  https://github.com/vitejs/vite/issues/4306\n    //  To get around this, use temporary variables.\n    //  https://github.com/nuxt/framework/issues/1461#issuecomment-954606243\n    let format = formatScope;\n    // if you use default message, set it as message format!\n    let cacheBaseKey = key;\n    if (!resolvedMessage &&\n        !(isString(format) ||\n            isMessageAST(format) ||\n            isMessageFunction(format))) {\n        if (enableDefaultMsg) {\n            format = defaultMsgOrKey;\n            cacheBaseKey = format;\n        }\n    }\n    // checking message format and target locale\n    if (!resolvedMessage &&\n        (!(isString(format) ||\n            isMessageAST(format) ||\n            isMessageFunction(format)) ||\n            !isString(targetLocale))) {\n        return unresolving ? NOT_REOSLVED : key;\n    }\n    // TODO: refactor\n    if ((process.env.NODE_ENV !== 'production') && isString(format) && context.messageCompiler == null) {\n        warn(`The message format compilation is not supported in this build. ` +\n            `Because message compiler isn't included. ` +\n            `You need to pre-compilation all message format. ` +\n            `So translate function return '${key}'.`);\n        return key;\n    }\n    // setup compile error detecting\n    let occurred = false;\n    const onError = () => {\n        occurred = true;\n    };\n    // compile message format\n    const msg = !isMessageFunction(format)\n        ? compileMessageFormat(context, key, targetLocale, format, cacheBaseKey, onError)\n        : format;\n    // if occurred compile error, return the message format\n    if (occurred) {\n        return format;\n    }\n    // evaluate message with context\n    const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);\n    const msgContext = createMessageContext(ctxOptions);\n    const messaged = evaluateMessage(context, msg, msgContext);\n    // if use post translation option, proceed it with handler\n    const ret = postTranslation\n        ? postTranslation(messaged, key)\n        : messaged;\n    // NOTE: experimental !!\n    if ((process.env.NODE_ENV !== 'production') || __INTLIFY_PROD_DEVTOOLS__) {\n        // prettier-ignore\n        const payloads = {\n            timestamp: Date.now(),\n            key: isString(key)\n                ? key\n                : isMessageFunction(format)\n                    ? format.key\n                    : '',\n            locale: targetLocale || (isMessageFunction(format)\n                ? format.locale\n                : ''),\n            format: isString(format)\n                ? format\n                : isMessageFunction(format)\n                    ? format.source\n                    : '',\n            message: ret\n        };\n        payloads.meta = assign({}, context.__meta, getAdditionalMeta() || {});\n        translateDevTools(payloads);\n    }\n    return ret;\n}\nfunction escapeParams(options) {\n    if (isArray(options.list)) {\n        options.list = options.list.map(item => isString(item) ? escapeHtml(item) : item);\n    }\n    else if (isObject(options.named)) {\n        Object.keys(options.named).forEach(key => {\n            if (isString(options.named[key])) {\n                options.named[key] = escapeHtml(options.named[key]);\n            }\n        });\n    }\n}\nfunction resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {\n    const { messages, onWarn, messageResolver: resolveValue, localeFallbacker } = context;\n    const locales = localeFallbacker(context, fallbackLocale, locale); // eslint-disable-line @typescript-eslint/no-explicit-any\n    let message = {};\n    let targetLocale;\n    let format = null;\n    let from = locale;\n    let to = null;\n    const type = 'translate';\n    for (let i = 0; i < locales.length; i++) {\n        targetLocale = to = locales[i];\n        if ((process.env.NODE_ENV !== 'production') &&\n            locale !== targetLocale &&\n            !isAlmostSameLocale(locale, targetLocale) &&\n            isTranslateFallbackWarn(fallbackWarn, key)) {\n            onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_TRANSLATE, {\n                key,\n                target: targetLocale\n            }));\n        }\n        // for vue-devtools timeline event\n        if ((process.env.NODE_ENV !== 'production') && locale !== targetLocale) {\n            const emitter = context.__v_emitter;\n            if (emitter) {\n                emitter.emit(\"fallback\" /* VueDevToolsTimelineEvents.FALBACK */, {\n                    type,\n                    key,\n                    from,\n                    to,\n                    groupId: `${type}:${key}`\n                });\n            }\n        }\n        message =\n            messages[targetLocale] || {};\n        // for vue-devtools timeline event\n        let start = null;\n        let startTag;\n        let endTag;\n        if ((process.env.NODE_ENV !== 'production') && inBrowser) {\n            start = window.performance.now();\n            startTag = 'intlify-message-resolve-start';\n            endTag = 'intlify-message-resolve-end';\n            mark && mark(startTag);\n        }\n        if ((format = resolveValue(message, key)) === null) {\n            // if null, resolve with object key path\n            format = message[key]; // eslint-disable-line @typescript-eslint/no-explicit-any\n        }\n        // for vue-devtools timeline event\n        if ((process.env.NODE_ENV !== 'production') && inBrowser) {\n            const end = window.performance.now();\n            const emitter = context.__v_emitter;\n            if (emitter && start && format) {\n                emitter.emit(\"message-resolve\" /* VueDevToolsTimelineEvents.MESSAGE_RESOLVE */, {\n                    type: \"message-resolve\" /* VueDevToolsTimelineEvents.MESSAGE_RESOLVE */,\n                    key,\n                    message: format,\n                    time: end - start,\n                    groupId: `${type}:${key}`\n                });\n            }\n            if (startTag && endTag && mark && measure) {\n                mark(endTag);\n                measure('intlify message resolve', startTag, endTag);\n            }\n        }\n        if (isString(format) || isMessageAST(format) || isMessageFunction(format)) {\n            break;\n        }\n        if (!isImplicitFallback(targetLocale, locales)) {\n            const missingRet = handleMissing(context, // eslint-disable-line @typescript-eslint/no-explicit-any\n            key, targetLocale, missingWarn, type);\n            if (missingRet !== key) {\n                format = missingRet;\n            }\n        }\n        from = to;\n    }\n    return [format, targetLocale, message];\n}\nfunction compileMessageFormat(context, key, targetLocale, format, cacheBaseKey, onError) {\n    const { messageCompiler, warnHtmlMessage } = context;\n    if (isMessageFunction(format)) {\n        const msg = format;\n        msg.locale = msg.locale || targetLocale;\n        msg.key = msg.key || key;\n        return msg;\n    }\n    if (messageCompiler == null) {\n        const msg = (() => format);\n        msg.locale = targetLocale;\n        msg.key = key;\n        return msg;\n    }\n    // for vue-devtools timeline event\n    let start = null;\n    let startTag;\n    let endTag;\n    if ((process.env.NODE_ENV !== 'production') && inBrowser) {\n        start = window.performance.now();\n        startTag = 'intlify-message-compilation-start';\n        endTag = 'intlify-message-compilation-end';\n        mark && mark(startTag);\n    }\n    const msg = messageCompiler(format, getCompileContext(context, targetLocale, cacheBaseKey, format, warnHtmlMessage, onError));\n    // for vue-devtools timeline event\n    if ((process.env.NODE_ENV !== 'production') && inBrowser) {\n        const end = window.performance.now();\n        const emitter = context.__v_emitter;\n        if (emitter && start) {\n            emitter.emit(\"message-compilation\" /* VueDevToolsTimelineEvents.MESSAGE_COMPILATION */, {\n                type: \"message-compilation\" /* VueDevToolsTimelineEvents.MESSAGE_COMPILATION */,\n                message: format,\n                time: end - start,\n                groupId: `${'translate'}:${key}`\n            });\n        }\n        if (startTag && endTag && mark && measure) {\n            mark(endTag);\n            measure('intlify message compilation', startTag, endTag);\n        }\n    }\n    msg.locale = targetLocale;\n    msg.key = key;\n    msg.source = format;\n    return msg;\n}\nfunction evaluateMessage(context, msg, msgCtx) {\n    // for vue-devtools timeline event\n    let start = null;\n    let startTag;\n    let endTag;\n    if ((process.env.NODE_ENV !== 'production') && inBrowser) {\n        start = window.performance.now();\n        startTag = 'intlify-message-evaluation-start';\n        endTag = 'intlify-message-evaluation-end';\n        mark && mark(startTag);\n    }\n    const messaged = msg(msgCtx);\n    // for vue-devtools timeline event\n    if ((process.env.NODE_ENV !== 'production') && inBrowser) {\n        const end = window.performance.now();\n        const emitter = context.__v_emitter;\n        if (emitter && start) {\n            emitter.emit(\"message-evaluation\" /* VueDevToolsTimelineEvents.MESSAGE_EVALUATION */, {\n                type: \"message-evaluation\" /* VueDevToolsTimelineEvents.MESSAGE_EVALUATION */,\n                value: messaged,\n                time: end - start,\n                groupId: `${'translate'}:${msg.key}`\n            });\n        }\n        if (startTag && endTag && mark && measure) {\n            mark(endTag);\n            measure('intlify message evaluation', startTag, endTag);\n        }\n    }\n    return messaged;\n}\n/** @internal */\nfunction parseTranslateArgs(...args) {\n    const [arg1, arg2, arg3] = args;\n    const options = {};\n    if (!isString(arg1) &&\n        !isNumber(arg1) &&\n        !isMessageFunction(arg1) &&\n        !isMessageAST(arg1)) {\n        throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n    }\n    // prettier-ignore\n    const key = isNumber(arg1)\n        ? String(arg1)\n        : isMessageFunction(arg1)\n            ? arg1\n            : arg1;\n    if (isNumber(arg2)) {\n        options.plural = arg2;\n    }\n    else if (isString(arg2)) {\n        options.default = arg2;\n    }\n    else if (isPlainObject(arg2) && !isEmptyObject(arg2)) {\n        options.named = arg2;\n    }\n    else if (isArray(arg2)) {\n        options.list = arg2;\n    }\n    if (isNumber(arg3)) {\n        options.plural = arg3;\n    }\n    else if (isString(arg3)) {\n        options.default = arg3;\n    }\n    else if (isPlainObject(arg3)) {\n        assign(options, arg3);\n    }\n    return [key, options];\n}\nfunction getCompileContext(context, locale, key, source, warnHtmlMessage, onError) {\n    return {\n        locale,\n        key,\n        warnHtmlMessage,\n        onError: (err) => {\n            onError && onError(err);\n            if ((process.env.NODE_ENV !== 'production')) {\n                const _source = getSourceForCodeFrame(source);\n                const message = `Message compilation error: ${err.message}`;\n                const codeFrame = err.location &&\n                    _source &&\n                    generateCodeFrame(_source, err.location.start.offset, err.location.end.offset);\n                const emitter = context.__v_emitter;\n                if (emitter && _source) {\n                    emitter.emit(\"compile-error\" /* VueDevToolsTimelineEvents.COMPILE_ERROR */, {\n                        message: _source,\n                        error: err.message,\n                        start: err.location && err.location.start.offset,\n                        end: err.location && err.location.end.offset,\n                        groupId: `${'translate'}:${key}`\n                    });\n                }\n                console.error(codeFrame ? `${message}\\n${codeFrame}` : message);\n            }\n            else {\n                throw err;\n            }\n        },\n        onCacheKey: (source) => generateFormatCacheKey(locale, key, source)\n    };\n}\nfunction getSourceForCodeFrame(source) {\n    if (isString(source)) {\n        return source;\n    }\n    else {\n        if (source.loc && source.loc.source) {\n            return source.loc.source;\n        }\n    }\n}\nfunction getMessageContextOptions(context, locale, message, options) {\n    const { modifiers, pluralRules, messageResolver: resolveValue, fallbackLocale, fallbackWarn, missingWarn, fallbackContext } = context;\n    const resolveMessage = (key) => {\n        let val = resolveValue(message, key);\n        // fallback to root context\n        if (val == null && fallbackContext) {\n            const [, , message] = resolveMessageFormat(fallbackContext, key, locale, fallbackLocale, fallbackWarn, missingWarn);\n            val = resolveValue(message, key);\n        }\n        if (isString(val) || isMessageAST(val)) {\n            let occurred = false;\n            const onError = () => {\n                occurred = true;\n            };\n            const msg = compileMessageFormat(context, key, locale, val, key, onError);\n            return !occurred\n                ? msg\n                : NOOP_MESSAGE_FUNCTION;\n        }\n        else if (isMessageFunction(val)) {\n            return val;\n        }\n        else {\n            // TODO: should be implemented warning message\n            return NOOP_MESSAGE_FUNCTION;\n        }\n    };\n    const ctxOptions = {\n        locale,\n        modifiers,\n        pluralRules,\n        messages: resolveMessage\n    };\n    if (context.processor) {\n        ctxOptions.processor = context.processor;\n    }\n    if (options.list) {\n        ctxOptions.list = options.list;\n    }\n    if (options.named) {\n        ctxOptions.named = options.named;\n    }\n    if (isNumber(options.plural)) {\n        ctxOptions.pluralIndex = options.plural;\n    }\n    return ctxOptions;\n}\n\nconst intlDefined = typeof Intl !== 'undefined';\nconst Availabilities = {\n    dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== 'undefined',\n    numberFormat: intlDefined && typeof Intl.NumberFormat !== 'undefined'\n};\n\n// implementation of `datetime` function\nfunction datetime(context, ...args) {\n    const { datetimeFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;\n    const { __datetimeFormatters } = context;\n    if ((process.env.NODE_ENV !== 'production') && !Availabilities.dateTimeFormat) {\n        onWarn(getWarnMessage(CoreWarnCodes.CANNOT_FORMAT_DATE));\n        return MISSING_RESOLVE_VALUE;\n    }\n    const [key, value, options, overrides] = parseDateTimeArgs(...args);\n    const missingWarn = isBoolean(options.missingWarn)\n        ? options.missingWarn\n        : context.missingWarn;\n    const fallbackWarn = isBoolean(options.fallbackWarn)\n        ? options.fallbackWarn\n        : context.fallbackWarn;\n    const part = !!options.part;\n    const locale = getLocale(context, options);\n    const locales = localeFallbacker(context, // eslint-disable-line @typescript-eslint/no-explicit-any\n    fallbackLocale, locale);\n    if (!isString(key) || key === '') {\n        return new Intl.DateTimeFormat(locale, overrides).format(value);\n    }\n    // resolve format\n    let datetimeFormat = {};\n    let targetLocale;\n    let format = null;\n    let from = locale;\n    let to = null;\n    const type = 'datetime format';\n    for (let i = 0; i < locales.length; i++) {\n        targetLocale = to = locales[i];\n        if ((process.env.NODE_ENV !== 'production') &&\n            locale !== targetLocale &&\n            isTranslateFallbackWarn(fallbackWarn, key)) {\n            onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_DATE_FORMAT, {\n                key,\n                target: targetLocale\n            }));\n        }\n        // for vue-devtools timeline event\n        if ((process.env.NODE_ENV !== 'production') && locale !== targetLocale) {\n            const emitter = context.__v_emitter;\n            if (emitter) {\n                emitter.emit(\"fallback\" /* VueDevToolsTimelineEvents.FALBACK */, {\n                    type,\n                    key,\n                    from,\n                    to,\n                    groupId: `${type}:${key}`\n                });\n            }\n        }\n        datetimeFormat =\n            datetimeFormats[targetLocale] || {};\n        format = datetimeFormat[key];\n        if (isPlainObject(format))\n            break;\n        handleMissing(context, key, targetLocale, missingWarn, type); // eslint-disable-line @typescript-eslint/no-explicit-any\n        from = to;\n    }\n    // checking format and target locale\n    if (!isPlainObject(format) || !isString(targetLocale)) {\n        return unresolving ? NOT_REOSLVED : key;\n    }\n    let id = `${targetLocale}__${key}`;\n    if (!isEmptyObject(overrides)) {\n        id = `${id}__${JSON.stringify(overrides)}`;\n    }\n    let formatter = __datetimeFormatters.get(id);\n    if (!formatter) {\n        formatter = new Intl.DateTimeFormat(targetLocale, assign({}, format, overrides));\n        __datetimeFormatters.set(id, formatter);\n    }\n    return !part ? formatter.format(value) : formatter.formatToParts(value);\n}\n/** @internal */\nconst DATETIME_FORMAT_OPTIONS_KEYS = [\n    'localeMatcher',\n    'weekday',\n    'era',\n    'year',\n    'month',\n    'day',\n    'hour',\n    'minute',\n    'second',\n    'timeZoneName',\n    'formatMatcher',\n    'hour12',\n    'timeZone',\n    'dateStyle',\n    'timeStyle',\n    'calendar',\n    'dayPeriod',\n    'numberingSystem',\n    'hourCycle',\n    'fractionalSecondDigits'\n];\n/** @internal */\nfunction parseDateTimeArgs(...args) {\n    const [arg1, arg2, arg3, arg4] = args;\n    const options = {};\n    let overrides = {};\n    let value;\n    if (isString(arg1)) {\n        // Only allow ISO strings - other date formats are often supported,\n        // but may cause different results in different browsers.\n        const matches = arg1.match(/(\\d{4}-\\d{2}-\\d{2})(T|\\s)?(.*)/);\n        if (!matches) {\n            throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);\n        }\n        // Some browsers can not parse the iso datetime separated by space,\n        // this is a compromise solution by replace the 'T'/' ' with 'T'\n        const dateTime = matches[3]\n            ? matches[3].trim().startsWith('T')\n                ? `${matches[1].trim()}${matches[3].trim()}`\n                : `${matches[1].trim()}T${matches[3].trim()}`\n            : matches[1].trim();\n        value = new Date(dateTime);\n        try {\n            // This will fail if the date is not valid\n            value.toISOString();\n        }\n        catch (e) {\n            throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);\n        }\n    }\n    else if (isDate(arg1)) {\n        if (isNaN(arg1.getTime())) {\n            throw createCoreError(CoreErrorCodes.INVALID_DATE_ARGUMENT);\n        }\n        value = arg1;\n    }\n    else if (isNumber(arg1)) {\n        value = arg1;\n    }\n    else {\n        throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n    }\n    if (isString(arg2)) {\n        options.key = arg2;\n    }\n    else if (isPlainObject(arg2)) {\n        Object.keys(arg2).forEach(key => {\n            if (DATETIME_FORMAT_OPTIONS_KEYS.includes(key)) {\n                overrides[key] = arg2[key];\n            }\n            else {\n                options[key] = arg2[key];\n            }\n        });\n    }\n    if (isString(arg3)) {\n        options.locale = arg3;\n    }\n    else if (isPlainObject(arg3)) {\n        overrides = arg3;\n    }\n    if (isPlainObject(arg4)) {\n        overrides = arg4;\n    }\n    return [options.key || '', value, options, overrides];\n}\n/** @internal */\nfunction clearDateTimeFormat(ctx, locale, format) {\n    const context = ctx;\n    for (const key in format) {\n        const id = `${locale}__${key}`;\n        if (!context.__datetimeFormatters.has(id)) {\n            continue;\n        }\n        context.__datetimeFormatters.delete(id);\n    }\n}\n\n// implementation of `number` function\nfunction number(context, ...args) {\n    const { numberFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;\n    const { __numberFormatters } = context;\n    if ((process.env.NODE_ENV !== 'production') && !Availabilities.numberFormat) {\n        onWarn(getWarnMessage(CoreWarnCodes.CANNOT_FORMAT_NUMBER));\n        return MISSING_RESOLVE_VALUE;\n    }\n    const [key, value, options, overrides] = parseNumberArgs(...args);\n    const missingWarn = isBoolean(options.missingWarn)\n        ? options.missingWarn\n        : context.missingWarn;\n    const fallbackWarn = isBoolean(options.fallbackWarn)\n        ? options.fallbackWarn\n        : context.fallbackWarn;\n    const part = !!options.part;\n    const locale = getLocale(context, options);\n    const locales = localeFallbacker(context, // eslint-disable-line @typescript-eslint/no-explicit-any\n    fallbackLocale, locale);\n    if (!isString(key) || key === '') {\n        return new Intl.NumberFormat(locale, overrides).format(value);\n    }\n    // resolve format\n    let numberFormat = {};\n    let targetLocale;\n    let format = null;\n    let from = locale;\n    let to = null;\n    const type = 'number format';\n    for (let i = 0; i < locales.length; i++) {\n        targetLocale = to = locales[i];\n        if ((process.env.NODE_ENV !== 'production') &&\n            locale !== targetLocale &&\n            isTranslateFallbackWarn(fallbackWarn, key)) {\n            onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT, {\n                key,\n                target: targetLocale\n            }));\n        }\n        // for vue-devtools timeline event\n        if ((process.env.NODE_ENV !== 'production') && locale !== targetLocale) {\n            const emitter = context.__v_emitter;\n            if (emitter) {\n                emitter.emit(\"fallback\" /* VueDevToolsTimelineEvents.FALBACK */, {\n                    type,\n                    key,\n                    from,\n                    to,\n                    groupId: `${type}:${key}`\n                });\n            }\n        }\n        numberFormat =\n            numberFormats[targetLocale] || {};\n        format = numberFormat[key];\n        if (isPlainObject(format))\n            break;\n        handleMissing(context, key, targetLocale, missingWarn, type); // eslint-disable-line @typescript-eslint/no-explicit-any\n        from = to;\n    }\n    // checking format and target locale\n    if (!isPlainObject(format) || !isString(targetLocale)) {\n        return unresolving ? NOT_REOSLVED : key;\n    }\n    let id = `${targetLocale}__${key}`;\n    if (!isEmptyObject(overrides)) {\n        id = `${id}__${JSON.stringify(overrides)}`;\n    }\n    let formatter = __numberFormatters.get(id);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(targetLocale, assign({}, format, overrides));\n        __numberFormatters.set(id, formatter);\n    }\n    return !part ? formatter.format(value) : formatter.formatToParts(value);\n}\n/** @internal */\nconst NUMBER_FORMAT_OPTIONS_KEYS = [\n    'localeMatcher',\n    'style',\n    'currency',\n    'currencyDisplay',\n    'currencySign',\n    'useGrouping',\n    'minimumIntegerDigits',\n    'minimumFractionDigits',\n    'maximumFractionDigits',\n    'minimumSignificantDigits',\n    'maximumSignificantDigits',\n    'compactDisplay',\n    'notation',\n    'signDisplay',\n    'unit',\n    'unitDisplay',\n    'roundingMode',\n    'roundingPriority',\n    'roundingIncrement',\n    'trailingZeroDisplay'\n];\n/** @internal */\nfunction parseNumberArgs(...args) {\n    const [arg1, arg2, arg3, arg4] = args;\n    const options = {};\n    let overrides = {};\n    if (!isNumber(arg1)) {\n        throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n    }\n    const value = arg1;\n    if (isString(arg2)) {\n        options.key = arg2;\n    }\n    else if (isPlainObject(arg2)) {\n        Object.keys(arg2).forEach(key => {\n            if (NUMBER_FORMAT_OPTIONS_KEYS.includes(key)) {\n                overrides[key] = arg2[key];\n            }\n            else {\n                options[key] = arg2[key];\n            }\n        });\n    }\n    if (isString(arg3)) {\n        options.locale = arg3;\n    }\n    else if (isPlainObject(arg3)) {\n        overrides = arg3;\n    }\n    if (isPlainObject(arg4)) {\n        overrides = arg4;\n    }\n    return [options.key || '', value, options, overrides];\n}\n/** @internal */\nfunction clearNumberFormat(ctx, locale, format) {\n    const context = ctx;\n    for (const key in format) {\n        const id = `${locale}__${key}`;\n        if (!context.__numberFormatters.has(id)) {\n            continue;\n        }\n        context.__numberFormatters.delete(id);\n    }\n}\n\n{\n    initFeatureFlags();\n}\n\nexport { CoreErrorCodes, CoreWarnCodes, DATETIME_FORMAT_OPTIONS_KEYS, DEFAULT_LOCALE, DEFAULT_MESSAGE_DATA_TYPE, MISSING_RESOLVE_VALUE, NOT_REOSLVED, NUMBER_FORMAT_OPTIONS_KEYS, VERSION, clearCompileCache, clearDateTimeFormat, clearNumberFormat, compile, compileToFunction, createCoreContext, createCoreError, createMessageContext, datetime, fallbackWithLocaleChain, fallbackWithSimple, getAdditionalMeta, getDevToolsHook, getFallbackContext, getLocale, getWarnMessage, handleMissing, initI18nDevTools, isAlmostSameLocale, isImplicitFallback, isMessageAST, isMessageFunction, isTranslateFallbackWarn, isTranslateMissingWarn, number, parse, parseDateTimeArgs, parseNumberArgs, parseTranslateArgs, registerLocaleFallbacker, registerMessageCompiler, registerMessageResolver, resolveLocale, resolveValue, resolveWithKeyValue, setAdditionalMeta, setDevToolsHook, setFallbackContext, translate, translateDevTools, updateFallbackLocale };\n","/*!\n  * vue-i18n v9.13.1\n  * (c) 2024 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nimport { getGlobalThis, incrementer, format, makeSymbol, isPlainObject, isArray, deepCopy, isString, hasOwn, isObject, warn, warnOnce, isBoolean, isRegExp, isFunction, inBrowser, assign, isNumber, createEmitter, isEmptyObject } from '@intlify/shared';\nimport { CoreWarnCodes, CoreErrorCodes, createCompileError, DEFAULT_LOCALE, updateFallbackLocale, setFallbackContext, createCoreContext, clearDateTimeFormat, clearNumberFormat, setAdditionalMeta, getFallbackContext, NOT_REOSLVED, isTranslateFallbackWarn, isTranslateMissingWarn, parseTranslateArgs, translate, MISSING_RESOLVE_VALUE, parseDateTimeArgs, datetime, parseNumberArgs, number, isMessageAST, isMessageFunction, fallbackWithLocaleChain, NUMBER_FORMAT_OPTIONS_KEYS, DATETIME_FORMAT_OPTIONS_KEYS, registerMessageCompiler, compile, compileToFunction, registerMessageResolver, resolveValue, registerLocaleFallbacker, setDevToolsHook } from '@intlify/core-base';\nimport { createVNode, Text, computed, watch, getCurrentInstance, ref, shallowRef, Fragment, defineComponent, h, effectScope, inject, onMounted, onUnmounted, onBeforeMount, isRef } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\n/**\n * Vue I18n Version\n *\n * @remarks\n * Semver format. Same format as the package.json `version` field.\n *\n * @VueI18nGeneral\n */\nconst VERSION = '9.13.1';\n/**\n * This is only called in esm-bundler builds.\n * istanbul-ignore-next\n */\nfunction initFeatureFlags() {\n    if (typeof __VUE_I18N_FULL_INSTALL__ !== 'boolean') {\n        getGlobalThis().__VUE_I18N_FULL_INSTALL__ = true;\n    }\n    if (typeof __VUE_I18N_LEGACY_API__ !== 'boolean') {\n        getGlobalThis().__VUE_I18N_LEGACY_API__ = true;\n    }\n    if (typeof __INTLIFY_JIT_COMPILATION__ !== 'boolean') {\n        getGlobalThis().__INTLIFY_JIT_COMPILATION__ = false;\n    }\n    if (typeof __INTLIFY_DROP_MESSAGE_COMPILER__ !== 'boolean') {\n        getGlobalThis().__INTLIFY_DROP_MESSAGE_COMPILER__ = false;\n    }\n    if (typeof __INTLIFY_PROD_DEVTOOLS__ !== 'boolean') {\n        getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;\n    }\n}\n\nconst code$1 = CoreWarnCodes.__EXTEND_POINT__;\nconst inc$1 = incrementer(code$1);\nconst I18nWarnCodes = {\n    FALLBACK_TO_ROOT: code$1, // 9\n    NOT_SUPPORTED_PRESERVE: inc$1(), // 10\n    NOT_SUPPORTED_FORMATTER: inc$1(), // 11\n    NOT_SUPPORTED_PRESERVE_DIRECTIVE: inc$1(), // 12\n    NOT_SUPPORTED_GET_CHOICE_INDEX: inc$1(), // 13\n    COMPONENT_NAME_LEGACY_COMPATIBLE: inc$1(), // 14\n    NOT_FOUND_PARENT_SCOPE: inc$1(), // 15\n    IGNORE_OBJ_FLATTEN: inc$1(), // 16\n    NOTICE_DROP_ALLOW_COMPOSITION: inc$1(), // 17\n    NOTICE_DROP_TRANSLATE_EXIST_COMPATIBLE_FLAG: inc$1() // 18\n};\nconst warnMessages = {\n    [I18nWarnCodes.FALLBACK_TO_ROOT]: `Fall back to {type} '{key}' with root locale.`,\n    [I18nWarnCodes.NOT_SUPPORTED_PRESERVE]: `Not supported 'preserve'.`,\n    [I18nWarnCodes.NOT_SUPPORTED_FORMATTER]: `Not supported 'formatter'.`,\n    [I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE]: `Not supported 'preserveDirectiveContent'.`,\n    [I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX]: `Not supported 'getChoiceIndex'.`,\n    [I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE]: `Component name legacy compatible: '{name}' -> 'i18n'`,\n    [I18nWarnCodes.NOT_FOUND_PARENT_SCOPE]: `Not found parent scope. use the global scope.`,\n    [I18nWarnCodes.IGNORE_OBJ_FLATTEN]: `Ignore object flatten: '{key}' key has an string value`,\n    [I18nWarnCodes.NOTICE_DROP_ALLOW_COMPOSITION]: `'allowComposition' option will be dropped in the next major version. For more information, please see 👉 https://tinyurl.com/2p97mcze`,\n    [I18nWarnCodes.NOTICE_DROP_TRANSLATE_EXIST_COMPATIBLE_FLAG]: `'translateExistCompatible' option will be dropped in the next major version.`\n};\nfunction getWarnMessage(code, ...args) {\n    return format(warnMessages[code], ...args);\n}\n\nconst code = CoreErrorCodes.__EXTEND_POINT__;\nconst inc = incrementer(code);\nconst I18nErrorCodes = {\n    // composer module errors\n    UNEXPECTED_RETURN_TYPE: code, // 24\n    // legacy module errors\n    INVALID_ARGUMENT: inc(), // 25\n    // i18n module errors\n    MUST_BE_CALL_SETUP_TOP: inc(), // 26\n    NOT_INSTALLED: inc(), // 27\n    NOT_AVAILABLE_IN_LEGACY_MODE: inc(), // 28\n    // directive module errors\n    REQUIRED_VALUE: inc(), // 29\n    INVALID_VALUE: inc(), // 30\n    // vue-devtools errors\n    CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: inc(), // 31\n    NOT_INSTALLED_WITH_PROVIDE: inc(), // 32\n    // unexpected error\n    UNEXPECTED_ERROR: inc(), // 33\n    // not compatible legacy vue-i18n constructor\n    NOT_COMPATIBLE_LEGACY_VUE_I18N: inc(), // 34\n    // bridge support vue 2.x only\n    BRIDGE_SUPPORT_VUE_2_ONLY: inc(), // 35\n    // need to define `i18n` option in `allowComposition: true` and `useScope: 'local' at `useI18n``\n    MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION: inc(), // 36\n    // Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly\n    NOT_AVAILABLE_COMPOSITION_IN_LEGACY: inc(), // 37\n    // for enhancement\n    __EXTEND_POINT__: inc() // 38\n};\nfunction createI18nError(code, ...args) {\n    return createCompileError(code, null, (process.env.NODE_ENV !== 'production') ? { messages: errorMessages, args } : undefined);\n}\nconst errorMessages = {\n    [I18nErrorCodes.UNEXPECTED_RETURN_TYPE]: 'Unexpected return type in composer',\n    [I18nErrorCodes.INVALID_ARGUMENT]: 'Invalid argument',\n    [I18nErrorCodes.MUST_BE_CALL_SETUP_TOP]: 'Must be called at the top of a `setup` function',\n    [I18nErrorCodes.NOT_INSTALLED]: 'Need to install with `app.use` function',\n    [I18nErrorCodes.UNEXPECTED_ERROR]: 'Unexpected error',\n    [I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE]: 'Not available in legacy mode',\n    [I18nErrorCodes.REQUIRED_VALUE]: `Required in value: {0}`,\n    [I18nErrorCodes.INVALID_VALUE]: `Invalid value`,\n    [I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN]: `Cannot setup vue-devtools plugin`,\n    [I18nErrorCodes.NOT_INSTALLED_WITH_PROVIDE]: 'Need to install with `provide` function',\n    [I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N]: 'Not compatible legacy VueI18n.',\n    [I18nErrorCodes.BRIDGE_SUPPORT_VUE_2_ONLY]: 'vue-i18n-bridge support Vue 2.x only',\n    [I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION]: 'Must define ‘i18n’ option or custom block in Composition API with using local scope in Legacy API mode',\n    [I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY]: 'Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly'\n};\n\nconst TranslateVNodeSymbol = \n/* #__PURE__*/ makeSymbol('__translateVNode');\nconst DatetimePartsSymbol = /* #__PURE__*/ makeSymbol('__datetimeParts');\nconst NumberPartsSymbol = /* #__PURE__*/ makeSymbol('__numberParts');\nconst EnableEmitter = /* #__PURE__*/ makeSymbol('__enableEmitter');\nconst DisableEmitter = /* #__PURE__*/ makeSymbol('__disableEmitter');\nconst SetPluralRulesSymbol = makeSymbol('__setPluralRules');\nmakeSymbol('__intlifyMeta');\nconst InejctWithOptionSymbol = \n/* #__PURE__*/ makeSymbol('__injectWithOption');\nconst DisposeSymbol = /* #__PURE__*/ makeSymbol('__dispose');\nconst __VUE_I18N_BRIDGE__ =  '__VUE_I18N_BRIDGE__';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Transform flat json in obj to normal json in obj\n */\nfunction handleFlatJson(obj) {\n    // check obj\n    if (!isObject(obj)) {\n        return obj;\n    }\n    for (const key in obj) {\n        // check key\n        if (!hasOwn(obj, key)) {\n            continue;\n        }\n        // handle for normal json\n        if (!key.includes('.')) {\n            // recursive process value if value is also a object\n            if (isObject(obj[key])) {\n                handleFlatJson(obj[key]);\n            }\n        }\n        // handle for flat json, transform to normal json\n        else {\n            // go to the last object\n            const subKeys = key.split('.');\n            const lastIndex = subKeys.length - 1;\n            let currentObj = obj;\n            let hasStringValue = false;\n            for (let i = 0; i < lastIndex; i++) {\n                if (!(subKeys[i] in currentObj)) {\n                    currentObj[subKeys[i]] = {};\n                }\n                if (!isObject(currentObj[subKeys[i]])) {\n                    (process.env.NODE_ENV !== 'production') &&\n                        warn(getWarnMessage(I18nWarnCodes.IGNORE_OBJ_FLATTEN, {\n                            key: subKeys[i]\n                        }));\n                    hasStringValue = true;\n                    break;\n                }\n                currentObj = currentObj[subKeys[i]];\n            }\n            // update last object value, delete old property\n            if (!hasStringValue) {\n                currentObj[subKeys[lastIndex]] = obj[key];\n                delete obj[key];\n            }\n            // recursive process value if value is also a object\n            if (isObject(currentObj[subKeys[lastIndex]])) {\n                handleFlatJson(currentObj[subKeys[lastIndex]]);\n            }\n        }\n    }\n    return obj;\n}\nfunction getLocaleMessages(locale, options) {\n    const { messages, __i18n, messageResolver, flatJson } = options;\n    // prettier-ignore\n    const ret = (isPlainObject(messages)\n        ? messages\n        : isArray(__i18n)\n            ? {}\n            : { [locale]: {} });\n    // merge locale messages of i18n custom block\n    if (isArray(__i18n)) {\n        __i18n.forEach(custom => {\n            if ('locale' in custom && 'resource' in custom) {\n                const { locale, resource } = custom;\n                if (locale) {\n                    ret[locale] = ret[locale] || {};\n                    deepCopy(resource, ret[locale]);\n                }\n                else {\n                    deepCopy(resource, ret);\n                }\n            }\n            else {\n                isString(custom) && deepCopy(JSON.parse(custom), ret);\n            }\n        });\n    }\n    // handle messages for flat json\n    if (messageResolver == null && flatJson) {\n        for (const key in ret) {\n            if (hasOwn(ret, key)) {\n                handleFlatJson(ret[key]);\n            }\n        }\n    }\n    return ret;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getComponentOptions(instance) {\n    return instance.type ;\n}\nfunction adjustI18nResources(gl, options, componentOptions // eslint-disable-line @typescript-eslint/no-explicit-any\n) {\n    let messages = isObject(options.messages) ? options.messages : {};\n    if ('__i18nGlobal' in componentOptions) {\n        messages = getLocaleMessages(gl.locale.value, {\n            messages,\n            __i18n: componentOptions.__i18nGlobal\n        });\n    }\n    // merge locale messages\n    const locales = Object.keys(messages);\n    if (locales.length) {\n        locales.forEach(locale => {\n            gl.mergeLocaleMessage(locale, messages[locale]);\n        });\n    }\n    {\n        // merge datetime formats\n        if (isObject(options.datetimeFormats)) {\n            const locales = Object.keys(options.datetimeFormats);\n            if (locales.length) {\n                locales.forEach(locale => {\n                    gl.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);\n                });\n            }\n        }\n        // merge number formats\n        if (isObject(options.numberFormats)) {\n            const locales = Object.keys(options.numberFormats);\n            if (locales.length) {\n                locales.forEach(locale => {\n                    gl.mergeNumberFormat(locale, options.numberFormats[locale]);\n                });\n            }\n        }\n    }\n}\nfunction createTextNode(key) {\n    return createVNode(Text, null, key, 0)\n        ;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// extend VNode interface\nconst DEVTOOLS_META = '__INTLIFY_META__';\nconst NOOP_RETURN_ARRAY = () => [];\nconst NOOP_RETURN_FALSE = () => false;\nlet composerID = 0;\nfunction defineCoreMissingHandler(missing) {\n    return ((ctx, locale, key, type) => {\n        return missing(locale, key, getCurrentInstance() || undefined, type);\n    });\n}\n// for Intlify DevTools\n/* #__NO_SIDE_EFFECTS__ */\nconst getMetaInfo = () => {\n    const instance = getCurrentInstance();\n    let meta = null; // eslint-disable-line @typescript-eslint/no-explicit-any\n    return instance && (meta = getComponentOptions(instance)[DEVTOOLS_META])\n        ? { [DEVTOOLS_META]: meta } // eslint-disable-line @typescript-eslint/no-explicit-any\n        : null;\n};\n/**\n * Create composer interface factory\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction createComposer(options = {}, VueI18nLegacy) {\n    const { __root, __injectWithOption } = options;\n    const _isGlobal = __root === undefined;\n    const flatJson = options.flatJson;\n    const _ref = inBrowser ? ref : shallowRef;\n    const translateExistCompatible = !!options.translateExistCompatible;\n    if ((process.env.NODE_ENV !== 'production')) {\n        if (translateExistCompatible && !false) {\n            warnOnce(getWarnMessage(I18nWarnCodes.NOTICE_DROP_TRANSLATE_EXIST_COMPATIBLE_FLAG));\n        }\n    }\n    let _inheritLocale = isBoolean(options.inheritLocale)\n        ? options.inheritLocale\n        : true;\n    const _locale = _ref(\n    // prettier-ignore\n    __root && _inheritLocale\n        ? __root.locale.value\n        : isString(options.locale)\n            ? options.locale\n            : DEFAULT_LOCALE);\n    const _fallbackLocale = _ref(\n    // prettier-ignore\n    __root && _inheritLocale\n        ? __root.fallbackLocale.value\n        : isString(options.fallbackLocale) ||\n            isArray(options.fallbackLocale) ||\n            isPlainObject(options.fallbackLocale) ||\n            options.fallbackLocale === false\n            ? options.fallbackLocale\n            : _locale.value);\n    const _messages = _ref(getLocaleMessages(_locale.value, options));\n    // prettier-ignore\n    const _datetimeFormats = _ref(isPlainObject(options.datetimeFormats)\n            ? options.datetimeFormats\n            : { [_locale.value]: {} })\n        ;\n    // prettier-ignore\n    const _numberFormats = _ref(isPlainObject(options.numberFormats)\n            ? options.numberFormats\n            : { [_locale.value]: {} })\n        ;\n    // warning suppress options\n    // prettier-ignore\n    let _missingWarn = __root\n        ? __root.missingWarn\n        : isBoolean(options.missingWarn) || isRegExp(options.missingWarn)\n            ? options.missingWarn\n            : true;\n    // prettier-ignore\n    let _fallbackWarn = __root\n        ? __root.fallbackWarn\n        : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn)\n            ? options.fallbackWarn\n            : true;\n    // prettier-ignore\n    let _fallbackRoot = __root\n        ? __root.fallbackRoot\n        : isBoolean(options.fallbackRoot)\n            ? options.fallbackRoot\n            : true;\n    // configure fall back to root\n    let _fallbackFormat = !!options.fallbackFormat;\n    // runtime missing\n    let _missing = isFunction(options.missing) ? options.missing : null;\n    let _runtimeMissing = isFunction(options.missing)\n        ? defineCoreMissingHandler(options.missing)\n        : null;\n    // postTranslation handler\n    let _postTranslation = isFunction(options.postTranslation)\n        ? options.postTranslation\n        : null;\n    // prettier-ignore\n    let _warnHtmlMessage = __root\n        ? __root.warnHtmlMessage\n        : isBoolean(options.warnHtmlMessage)\n            ? options.warnHtmlMessage\n            : true;\n    let _escapeParameter = !!options.escapeParameter;\n    // custom linked modifiers\n    // prettier-ignore\n    const _modifiers = __root\n        ? __root.modifiers\n        : isPlainObject(options.modifiers)\n            ? options.modifiers\n            : {};\n    // pluralRules\n    let _pluralRules = options.pluralRules || (__root && __root.pluralRules);\n    // runtime context\n    // eslint-disable-next-line prefer-const\n    let _context;\n    const getCoreContext = () => {\n        _isGlobal && setFallbackContext(null);\n        const ctxOptions = {\n            version: VERSION,\n            locale: _locale.value,\n            fallbackLocale: _fallbackLocale.value,\n            messages: _messages.value,\n            modifiers: _modifiers,\n            pluralRules: _pluralRules,\n            missing: _runtimeMissing === null ? undefined : _runtimeMissing,\n            missingWarn: _missingWarn,\n            fallbackWarn: _fallbackWarn,\n            fallbackFormat: _fallbackFormat,\n            unresolving: true,\n            postTranslation: _postTranslation === null ? undefined : _postTranslation,\n            warnHtmlMessage: _warnHtmlMessage,\n            escapeParameter: _escapeParameter,\n            messageResolver: options.messageResolver,\n            messageCompiler: options.messageCompiler,\n            __meta: { framework: 'vue' }\n        };\n        {\n            ctxOptions.datetimeFormats = _datetimeFormats.value;\n            ctxOptions.numberFormats = _numberFormats.value;\n            ctxOptions.__datetimeFormatters = isPlainObject(_context)\n                ? _context.__datetimeFormatters\n                : undefined;\n            ctxOptions.__numberFormatters = isPlainObject(_context)\n                ? _context.__numberFormatters\n                : undefined;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            ctxOptions.__v_emitter = isPlainObject(_context)\n                ? _context.__v_emitter\n                : undefined;\n        }\n        const ctx = createCoreContext(ctxOptions);\n        _isGlobal && setFallbackContext(ctx);\n        return ctx;\n    };\n    _context = getCoreContext();\n    updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n    // track reactivity\n    function trackReactivityValues() {\n        return [\n                _locale.value,\n                _fallbackLocale.value,\n                _messages.value,\n                _datetimeFormats.value,\n                _numberFormats.value\n            ]\n            ;\n    }\n    // locale\n    const locale = computed({\n        get: () => _locale.value,\n        set: val => {\n            _locale.value = val;\n            _context.locale = _locale.value;\n        }\n    });\n    // fallbackLocale\n    const fallbackLocale = computed({\n        get: () => _fallbackLocale.value,\n        set: val => {\n            _fallbackLocale.value = val;\n            _context.fallbackLocale = _fallbackLocale.value;\n            updateFallbackLocale(_context, _locale.value, val);\n        }\n    });\n    // messages\n    const messages = computed(() => _messages.value);\n    // datetimeFormats\n    const datetimeFormats = /* #__PURE__*/ computed(() => _datetimeFormats.value);\n    // numberFormats\n    const numberFormats = /* #__PURE__*/ computed(() => _numberFormats.value);\n    // getPostTranslationHandler\n    function getPostTranslationHandler() {\n        return isFunction(_postTranslation) ? _postTranslation : null;\n    }\n    // setPostTranslationHandler\n    function setPostTranslationHandler(handler) {\n        _postTranslation = handler;\n        _context.postTranslation = handler;\n    }\n    // getMissingHandler\n    function getMissingHandler() {\n        return _missing;\n    }\n    // setMissingHandler\n    function setMissingHandler(handler) {\n        if (handler !== null) {\n            _runtimeMissing = defineCoreMissingHandler(handler);\n        }\n        _missing = handler;\n        _context.missing = _runtimeMissing;\n    }\n    function isResolvedTranslateMessage(type, arg // eslint-disable-line @typescript-eslint/no-explicit-any\n    ) {\n        return type !== 'translate' || !arg.resolvedMessage;\n    }\n    const wrapWithDeps = (fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) => {\n        trackReactivityValues(); // track reactive dependency\n        // NOTE: experimental !!\n        let ret;\n        try {\n            if ((process.env.NODE_ENV !== 'production') || __INTLIFY_PROD_DEVTOOLS__) {\n                setAdditionalMeta(getMetaInfo());\n            }\n            if (!_isGlobal) {\n                _context.fallbackContext = __root\n                    ? getFallbackContext()\n                    : undefined;\n            }\n            ret = fn(_context);\n        }\n        finally {\n            if ((process.env.NODE_ENV !== 'production') || __INTLIFY_PROD_DEVTOOLS__) {\n                setAdditionalMeta(null);\n            }\n            if (!_isGlobal) {\n                _context.fallbackContext = undefined;\n            }\n        }\n        if ((warnType !== 'translate exists' && // for not `te` (e.g `t`)\n            isNumber(ret) &&\n            ret === NOT_REOSLVED) ||\n            (warnType === 'translate exists' && !ret) // for `te`\n        ) {\n            const [key, arg2] = argumentParser();\n            if ((process.env.NODE_ENV !== 'production') &&\n                __root &&\n                isString(key) &&\n                isResolvedTranslateMessage(warnType, arg2)) {\n                if (_fallbackRoot &&\n                    (isTranslateFallbackWarn(_fallbackWarn, key) ||\n                        isTranslateMissingWarn(_missingWarn, key))) {\n                    warn(getWarnMessage(I18nWarnCodes.FALLBACK_TO_ROOT, {\n                        key,\n                        type: warnType\n                    }));\n                }\n                // for vue-devtools timeline event\n                if ((process.env.NODE_ENV !== 'production')) {\n                    const { __v_emitter: emitter } = _context;\n                    if (emitter && _fallbackRoot) {\n                        emitter.emit(\"fallback\" /* VueDevToolsTimelineEvents.FALBACK */, {\n                            type: warnType,\n                            key,\n                            to: 'global',\n                            groupId: `${warnType}:${key}`\n                        });\n                    }\n                }\n            }\n            return __root && _fallbackRoot\n                ? fallbackSuccess(__root)\n                : fallbackFail(key);\n        }\n        else if (successCondition(ret)) {\n            return ret;\n        }\n        else {\n            /* istanbul ignore next */\n            throw createI18nError(I18nErrorCodes.UNEXPECTED_RETURN_TYPE);\n        }\n    };\n    // t\n    function t(...args) {\n        return wrapWithDeps(context => Reflect.apply(translate, null, [context, ...args]), () => parseTranslateArgs(...args), 'translate', root => Reflect.apply(root.t, root, [...args]), key => key, val => isString(val));\n    }\n    // rt\n    function rt(...args) {\n        const [arg1, arg2, arg3] = args;\n        if (arg3 && !isObject(arg3)) {\n            throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        return t(...[arg1, arg2, assign({ resolvedMessage: true }, arg3 || {})]);\n    }\n    // d\n    function d(...args) {\n        return wrapWithDeps(context => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), 'datetime format', root => Reflect.apply(root.d, root, [...args]), () => MISSING_RESOLVE_VALUE, val => isString(val));\n    }\n    // n\n    function n(...args) {\n        return wrapWithDeps(context => Reflect.apply(number, null, [context, ...args]), () => parseNumberArgs(...args), 'number format', root => Reflect.apply(root.n, root, [...args]), () => MISSING_RESOLVE_VALUE, val => isString(val));\n    }\n    // for custom processor\n    function normalize(values) {\n        return values.map(val => isString(val) || isNumber(val) || isBoolean(val)\n            ? createTextNode(String(val))\n            : val);\n    }\n    const interpolate = (val) => val;\n    const processor = {\n        normalize,\n        interpolate,\n        type: 'vnode'\n    };\n    // translateVNode, using for `i18n-t` component\n    function translateVNode(...args) {\n        return wrapWithDeps(context => {\n            let ret;\n            const _context = context;\n            try {\n                _context.processor = processor;\n                ret = Reflect.apply(translate, null, [_context, ...args]);\n            }\n            finally {\n                _context.processor = null;\n            }\n            return ret;\n        }, () => parseTranslateArgs(...args), 'translate', \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        root => root[TranslateVNodeSymbol](...args), key => [createTextNode(key)], val => isArray(val));\n    }\n    // numberParts, using for `i18n-n` component\n    function numberParts(...args) {\n        return wrapWithDeps(context => Reflect.apply(number, null, [context, ...args]), () => parseNumberArgs(...args), 'number format', \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        root => root[NumberPartsSymbol](...args), NOOP_RETURN_ARRAY, val => isString(val) || isArray(val));\n    }\n    // datetimeParts, using for `i18n-d` component\n    function datetimeParts(...args) {\n        return wrapWithDeps(context => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), 'datetime format', \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        root => root[DatetimePartsSymbol](...args), NOOP_RETURN_ARRAY, val => isString(val) || isArray(val));\n    }\n    function setPluralRules(rules) {\n        _pluralRules = rules;\n        _context.pluralRules = _pluralRules;\n    }\n    // te\n    function te(key, locale) {\n        return wrapWithDeps(() => {\n            if (!key) {\n                return false;\n            }\n            const targetLocale = isString(locale) ? locale : _locale.value;\n            const message = getLocaleMessage(targetLocale);\n            const resolved = _context.messageResolver(message, key);\n            return !translateExistCompatible\n                ? isMessageAST(resolved) ||\n                    isMessageFunction(resolved) ||\n                    isString(resolved)\n                : resolved != null;\n        }, () => [key], 'translate exists', root => {\n            return Reflect.apply(root.te, root, [key, locale]);\n        }, NOOP_RETURN_FALSE, val => isBoolean(val));\n    }\n    function resolveMessages(key) {\n        let messages = null;\n        const locales = fallbackWithLocaleChain(_context, _fallbackLocale.value, _locale.value);\n        for (let i = 0; i < locales.length; i++) {\n            const targetLocaleMessages = _messages.value[locales[i]] || {};\n            const messageValue = _context.messageResolver(targetLocaleMessages, key);\n            if (messageValue != null) {\n                messages = messageValue;\n                break;\n            }\n        }\n        return messages;\n    }\n    // tm\n    function tm(key) {\n        const messages = resolveMessages(key);\n        // prettier-ignore\n        return messages != null\n            ? messages\n            : __root\n                ? __root.tm(key) || {}\n                : {};\n    }\n    // getLocaleMessage\n    function getLocaleMessage(locale) {\n        return (_messages.value[locale] || {});\n    }\n    // setLocaleMessage\n    function setLocaleMessage(locale, message) {\n        if (flatJson) {\n            const _message = { [locale]: message };\n            for (const key in _message) {\n                if (hasOwn(_message, key)) {\n                    handleFlatJson(_message[key]);\n                }\n            }\n            message = _message[locale];\n        }\n        _messages.value[locale] = message;\n        _context.messages = _messages.value;\n    }\n    // mergeLocaleMessage\n    function mergeLocaleMessage(locale, message) {\n        _messages.value[locale] = _messages.value[locale] || {};\n        const _message = { [locale]: message };\n        if (flatJson) {\n            for (const key in _message) {\n                if (hasOwn(_message, key)) {\n                    handleFlatJson(_message[key]);\n                }\n            }\n        }\n        message = _message[locale];\n        deepCopy(message, _messages.value[locale]);\n        _context.messages = _messages.value;\n    }\n    // getDateTimeFormat\n    function getDateTimeFormat(locale) {\n        return _datetimeFormats.value[locale] || {};\n    }\n    // setDateTimeFormat\n    function setDateTimeFormat(locale, format) {\n        _datetimeFormats.value[locale] = format;\n        _context.datetimeFormats = _datetimeFormats.value;\n        clearDateTimeFormat(_context, locale, format);\n    }\n    // mergeDateTimeFormat\n    function mergeDateTimeFormat(locale, format) {\n        _datetimeFormats.value[locale] = assign(_datetimeFormats.value[locale] || {}, format);\n        _context.datetimeFormats = _datetimeFormats.value;\n        clearDateTimeFormat(_context, locale, format);\n    }\n    // getNumberFormat\n    function getNumberFormat(locale) {\n        return _numberFormats.value[locale] || {};\n    }\n    // setNumberFormat\n    function setNumberFormat(locale, format) {\n        _numberFormats.value[locale] = format;\n        _context.numberFormats = _numberFormats.value;\n        clearNumberFormat(_context, locale, format);\n    }\n    // mergeNumberFormat\n    function mergeNumberFormat(locale, format) {\n        _numberFormats.value[locale] = assign(_numberFormats.value[locale] || {}, format);\n        _context.numberFormats = _numberFormats.value;\n        clearNumberFormat(_context, locale, format);\n    }\n    // for debug\n    composerID++;\n    // watch root locale & fallbackLocale\n    if (__root && inBrowser) {\n        watch(__root.locale, (val) => {\n            if (_inheritLocale) {\n                _locale.value = val;\n                _context.locale = val;\n                updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n            }\n        });\n        watch(__root.fallbackLocale, (val) => {\n            if (_inheritLocale) {\n                _fallbackLocale.value = val;\n                _context.fallbackLocale = val;\n                updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n            }\n        });\n    }\n    // define basic composition API!\n    const composer = {\n        id: composerID,\n        locale,\n        fallbackLocale,\n        get inheritLocale() {\n            return _inheritLocale;\n        },\n        set inheritLocale(val) {\n            _inheritLocale = val;\n            if (val && __root) {\n                _locale.value = __root.locale.value;\n                _fallbackLocale.value = __root.fallbackLocale.value;\n                updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n            }\n        },\n        get availableLocales() {\n            return Object.keys(_messages.value).sort();\n        },\n        messages,\n        get modifiers() {\n            return _modifiers;\n        },\n        get pluralRules() {\n            return _pluralRules || {};\n        },\n        get isGlobal() {\n            return _isGlobal;\n        },\n        get missingWarn() {\n            return _missingWarn;\n        },\n        set missingWarn(val) {\n            _missingWarn = val;\n            _context.missingWarn = _missingWarn;\n        },\n        get fallbackWarn() {\n            return _fallbackWarn;\n        },\n        set fallbackWarn(val) {\n            _fallbackWarn = val;\n            _context.fallbackWarn = _fallbackWarn;\n        },\n        get fallbackRoot() {\n            return _fallbackRoot;\n        },\n        set fallbackRoot(val) {\n            _fallbackRoot = val;\n        },\n        get fallbackFormat() {\n            return _fallbackFormat;\n        },\n        set fallbackFormat(val) {\n            _fallbackFormat = val;\n            _context.fallbackFormat = _fallbackFormat;\n        },\n        get warnHtmlMessage() {\n            return _warnHtmlMessage;\n        },\n        set warnHtmlMessage(val) {\n            _warnHtmlMessage = val;\n            _context.warnHtmlMessage = val;\n        },\n        get escapeParameter() {\n            return _escapeParameter;\n        },\n        set escapeParameter(val) {\n            _escapeParameter = val;\n            _context.escapeParameter = val;\n        },\n        t,\n        getLocaleMessage,\n        setLocaleMessage,\n        mergeLocaleMessage,\n        getPostTranslationHandler,\n        setPostTranslationHandler,\n        getMissingHandler,\n        setMissingHandler,\n        [SetPluralRulesSymbol]: setPluralRules\n    };\n    {\n        composer.datetimeFormats = datetimeFormats;\n        composer.numberFormats = numberFormats;\n        composer.rt = rt;\n        composer.te = te;\n        composer.tm = tm;\n        composer.d = d;\n        composer.n = n;\n        composer.getDateTimeFormat = getDateTimeFormat;\n        composer.setDateTimeFormat = setDateTimeFormat;\n        composer.mergeDateTimeFormat = mergeDateTimeFormat;\n        composer.getNumberFormat = getNumberFormat;\n        composer.setNumberFormat = setNumberFormat;\n        composer.mergeNumberFormat = mergeNumberFormat;\n        composer[InejctWithOptionSymbol] = __injectWithOption;\n        composer[TranslateVNodeSymbol] = translateVNode;\n        composer[DatetimePartsSymbol] = datetimeParts;\n        composer[NumberPartsSymbol] = numberParts;\n    }\n    // for vue-devtools timeline event\n    if ((process.env.NODE_ENV !== 'production')) {\n        composer[EnableEmitter] = (emitter) => {\n            _context.__v_emitter = emitter;\n        };\n        composer[DisableEmitter] = () => {\n            _context.__v_emitter = undefined;\n        };\n    }\n    return composer;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Convert to I18n Composer Options from VueI18n Options\n *\n * @internal\n */\nfunction convertComposerOptions(options) {\n    const locale = isString(options.locale) ? options.locale : DEFAULT_LOCALE;\n    const fallbackLocale = isString(options.fallbackLocale) ||\n        isArray(options.fallbackLocale) ||\n        isPlainObject(options.fallbackLocale) ||\n        options.fallbackLocale === false\n        ? options.fallbackLocale\n        : locale;\n    const missing = isFunction(options.missing) ? options.missing : undefined;\n    const missingWarn = isBoolean(options.silentTranslationWarn) ||\n        isRegExp(options.silentTranslationWarn)\n        ? !options.silentTranslationWarn\n        : true;\n    const fallbackWarn = isBoolean(options.silentFallbackWarn) ||\n        isRegExp(options.silentFallbackWarn)\n        ? !options.silentFallbackWarn\n        : true;\n    const fallbackRoot = isBoolean(options.fallbackRoot)\n        ? options.fallbackRoot\n        : true;\n    const fallbackFormat = !!options.formatFallbackMessages;\n    const modifiers = isPlainObject(options.modifiers) ? options.modifiers : {};\n    const pluralizationRules = options.pluralizationRules;\n    const postTranslation = isFunction(options.postTranslation)\n        ? options.postTranslation\n        : undefined;\n    const warnHtmlMessage = isString(options.warnHtmlInMessage)\n        ? options.warnHtmlInMessage !== 'off'\n        : true;\n    const escapeParameter = !!options.escapeParameterHtml;\n    const inheritLocale = isBoolean(options.sync) ? options.sync : true;\n    if ((process.env.NODE_ENV !== 'production') && options.formatter) {\n        warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n    }\n    if ((process.env.NODE_ENV !== 'production') && options.preserveDirectiveContent) {\n        warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n    }\n    let messages = options.messages;\n    if (isPlainObject(options.sharedMessages)) {\n        const sharedMessages = options.sharedMessages;\n        const locales = Object.keys(sharedMessages);\n        messages = locales.reduce((messages, locale) => {\n            const message = messages[locale] || (messages[locale] = {});\n            assign(message, sharedMessages[locale]);\n            return messages;\n        }, (messages || {}));\n    }\n    const { __i18n, __root, __injectWithOption } = options;\n    const datetimeFormats = options.datetimeFormats;\n    const numberFormats = options.numberFormats;\n    const flatJson = options.flatJson;\n    const translateExistCompatible = options\n        .translateExistCompatible;\n    return {\n        locale,\n        fallbackLocale,\n        messages,\n        flatJson,\n        datetimeFormats,\n        numberFormats,\n        missing,\n        missingWarn,\n        fallbackWarn,\n        fallbackRoot,\n        fallbackFormat,\n        modifiers,\n        pluralRules: pluralizationRules,\n        postTranslation,\n        warnHtmlMessage,\n        escapeParameter,\n        messageResolver: options.messageResolver,\n        inheritLocale,\n        translateExistCompatible,\n        __i18n,\n        __root,\n        __injectWithOption\n    };\n}\n/**\n * create VueI18n interface factory\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction createVueI18n(options = {}, VueI18nLegacy) {\n    {\n        const composer = createComposer(convertComposerOptions(options));\n        const { __extender } = options;\n        // defines VueI18n\n        const vueI18n = {\n            // id\n            id: composer.id,\n            // locale\n            get locale() {\n                return composer.locale.value;\n            },\n            set locale(val) {\n                composer.locale.value = val;\n            },\n            // fallbackLocale\n            get fallbackLocale() {\n                return composer.fallbackLocale.value;\n            },\n            set fallbackLocale(val) {\n                composer.fallbackLocale.value = val;\n            },\n            // messages\n            get messages() {\n                return composer.messages.value;\n            },\n            // datetimeFormats\n            get datetimeFormats() {\n                return composer.datetimeFormats.value;\n            },\n            // numberFormats\n            get numberFormats() {\n                return composer.numberFormats.value;\n            },\n            // availableLocales\n            get availableLocales() {\n                return composer.availableLocales;\n            },\n            // formatter\n            get formatter() {\n                (process.env.NODE_ENV !== 'production') && warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n                // dummy\n                return {\n                    interpolate() {\n                        return [];\n                    }\n                };\n            },\n            set formatter(val) {\n                (process.env.NODE_ENV !== 'production') && warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n            },\n            // missing\n            get missing() {\n                return composer.getMissingHandler();\n            },\n            set missing(handler) {\n                composer.setMissingHandler(handler);\n            },\n            // silentTranslationWarn\n            get silentTranslationWarn() {\n                return isBoolean(composer.missingWarn)\n                    ? !composer.missingWarn\n                    : composer.missingWarn;\n            },\n            set silentTranslationWarn(val) {\n                composer.missingWarn = isBoolean(val) ? !val : val;\n            },\n            // silentFallbackWarn\n            get silentFallbackWarn() {\n                return isBoolean(composer.fallbackWarn)\n                    ? !composer.fallbackWarn\n                    : composer.fallbackWarn;\n            },\n            set silentFallbackWarn(val) {\n                composer.fallbackWarn = isBoolean(val) ? !val : val;\n            },\n            // modifiers\n            get modifiers() {\n                return composer.modifiers;\n            },\n            // formatFallbackMessages\n            get formatFallbackMessages() {\n                return composer.fallbackFormat;\n            },\n            set formatFallbackMessages(val) {\n                composer.fallbackFormat = val;\n            },\n            // postTranslation\n            get postTranslation() {\n                return composer.getPostTranslationHandler();\n            },\n            set postTranslation(handler) {\n                composer.setPostTranslationHandler(handler);\n            },\n            // sync\n            get sync() {\n                return composer.inheritLocale;\n            },\n            set sync(val) {\n                composer.inheritLocale = val;\n            },\n            // warnInHtmlMessage\n            get warnHtmlInMessage() {\n                return composer.warnHtmlMessage ? 'warn' : 'off';\n            },\n            set warnHtmlInMessage(val) {\n                composer.warnHtmlMessage = val !== 'off';\n            },\n            // escapeParameterHtml\n            get escapeParameterHtml() {\n                return composer.escapeParameter;\n            },\n            set escapeParameterHtml(val) {\n                composer.escapeParameter = val;\n            },\n            // preserveDirectiveContent\n            get preserveDirectiveContent() {\n                (process.env.NODE_ENV !== 'production') &&\n                    warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n                return true;\n            },\n            set preserveDirectiveContent(val) {\n                (process.env.NODE_ENV !== 'production') &&\n                    warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n            },\n            // pluralizationRules\n            get pluralizationRules() {\n                return composer.pluralRules || {};\n            },\n            // for internal\n            __composer: composer,\n            // t\n            t(...args) {\n                const [arg1, arg2, arg3] = args;\n                const options = {};\n                let list = null;\n                let named = null;\n                if (!isString(arg1)) {\n                    throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n                }\n                const key = arg1;\n                if (isString(arg2)) {\n                    options.locale = arg2;\n                }\n                else if (isArray(arg2)) {\n                    list = arg2;\n                }\n                else if (isPlainObject(arg2)) {\n                    named = arg2;\n                }\n                if (isArray(arg3)) {\n                    list = arg3;\n                }\n                else if (isPlainObject(arg3)) {\n                    named = arg3;\n                }\n                // return composer.t(key, (list || named || {}) as any, options)\n                return Reflect.apply(composer.t, composer, [\n                    key,\n                    (list || named || {}),\n                    options\n                ]);\n            },\n            rt(...args) {\n                return Reflect.apply(composer.rt, composer, [...args]);\n            },\n            // tc\n            tc(...args) {\n                const [arg1, arg2, arg3] = args;\n                const options = { plural: 1 };\n                let list = null;\n                let named = null;\n                if (!isString(arg1)) {\n                    throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n                }\n                const key = arg1;\n                if (isString(arg2)) {\n                    options.locale = arg2;\n                }\n                else if (isNumber(arg2)) {\n                    options.plural = arg2;\n                }\n                else if (isArray(arg2)) {\n                    list = arg2;\n                }\n                else if (isPlainObject(arg2)) {\n                    named = arg2;\n                }\n                if (isString(arg3)) {\n                    options.locale = arg3;\n                }\n                else if (isArray(arg3)) {\n                    list = arg3;\n                }\n                else if (isPlainObject(arg3)) {\n                    named = arg3;\n                }\n                // return composer.t(key, (list || named || {}) as any, options)\n                return Reflect.apply(composer.t, composer, [\n                    key,\n                    (list || named || {}),\n                    options\n                ]);\n            },\n            // te\n            te(key, locale) {\n                return composer.te(key, locale);\n            },\n            // tm\n            tm(key) {\n                return composer.tm(key);\n            },\n            // getLocaleMessage\n            getLocaleMessage(locale) {\n                return composer.getLocaleMessage(locale);\n            },\n            // setLocaleMessage\n            setLocaleMessage(locale, message) {\n                composer.setLocaleMessage(locale, message);\n            },\n            // mergeLocaleMessage\n            mergeLocaleMessage(locale, message) {\n                composer.mergeLocaleMessage(locale, message);\n            },\n            // d\n            d(...args) {\n                return Reflect.apply(composer.d, composer, [...args]);\n            },\n            // getDateTimeFormat\n            getDateTimeFormat(locale) {\n                return composer.getDateTimeFormat(locale);\n            },\n            // setDateTimeFormat\n            setDateTimeFormat(locale, format) {\n                composer.setDateTimeFormat(locale, format);\n            },\n            // mergeDateTimeFormat\n            mergeDateTimeFormat(locale, format) {\n                composer.mergeDateTimeFormat(locale, format);\n            },\n            // n\n            n(...args) {\n                return Reflect.apply(composer.n, composer, [...args]);\n            },\n            // getNumberFormat\n            getNumberFormat(locale) {\n                return composer.getNumberFormat(locale);\n            },\n            // setNumberFormat\n            setNumberFormat(locale, format) {\n                composer.setNumberFormat(locale, format);\n            },\n            // mergeNumberFormat\n            mergeNumberFormat(locale, format) {\n                composer.mergeNumberFormat(locale, format);\n            },\n            // getChoiceIndex\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            getChoiceIndex(choice, choicesLength) {\n                (process.env.NODE_ENV !== 'production') &&\n                    warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX));\n                return -1;\n            }\n        };\n        vueI18n.__extender = __extender;\n        // for vue-devtools timeline event\n        if ((process.env.NODE_ENV !== 'production')) {\n            vueI18n.__enableEmitter = (emitter) => {\n                const __composer = composer;\n                __composer[EnableEmitter] && __composer[EnableEmitter](emitter);\n            };\n            vueI18n.__disableEmitter = () => {\n                const __composer = composer;\n                __composer[DisableEmitter] && __composer[DisableEmitter]();\n            };\n        }\n        return vueI18n;\n    }\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nconst baseFormatProps = {\n    tag: {\n        type: [String, Object]\n    },\n    locale: {\n        type: String\n    },\n    scope: {\n        type: String,\n        // NOTE: avoid https://github.com/microsoft/rushstack/issues/1050\n        validator: (val /* ComponentI18nScope */) => val === 'parent' || val === 'global',\n        default: 'parent' /* ComponentI18nScope */\n    },\n    i18n: {\n        type: Object\n    }\n};\n\nfunction getInterpolateArg(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n{ slots }, // SetupContext,\nkeys) {\n    if (keys.length === 1 && keys[0] === 'default') {\n        // default slot with list\n        const ret = slots.default ? slots.default() : [];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return ret.reduce((slot, current) => {\n            return [\n                ...slot,\n                // prettier-ignore\n                ...(current.type === Fragment ? current.children : [current]\n                    )\n            ];\n        }, []);\n    }\n    else {\n        // named slots\n        return keys.reduce((arg, key) => {\n            const slot = slots[key];\n            if (slot) {\n                arg[key] = slot();\n            }\n            return arg;\n        }, {});\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getFragmentableTag(tag) {\n    return Fragment ;\n}\n\nconst TranslationImpl = /*#__PURE__*/ defineComponent({\n    /* eslint-disable */\n    name: 'i18n-t',\n    props: assign({\n        keypath: {\n            type: String,\n            required: true\n        },\n        plural: {\n            type: [Number, String],\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            validator: (val) => isNumber(val) || !isNaN(val)\n        }\n    }, baseFormatProps),\n    /* eslint-enable */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setup(props, context) {\n        const { slots, attrs } = context;\n        // NOTE: avoid https://github.com/microsoft/rushstack/issues/1050\n        const i18n = props.i18n ||\n            useI18n({\n                useScope: props.scope,\n                __useComponent: true\n            });\n        return () => {\n            const keys = Object.keys(slots).filter(key => key !== '_');\n            const options = {};\n            if (props.locale) {\n                options.locale = props.locale;\n            }\n            if (props.plural !== undefined) {\n                options.plural = isString(props.plural) ? +props.plural : props.plural;\n            }\n            const arg = getInterpolateArg(context, keys);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const children = i18n[TranslateVNodeSymbol](props.keypath, arg, options);\n            const assignedAttrs = assign({}, attrs);\n            const tag = isString(props.tag) || isObject(props.tag)\n                ? props.tag\n                : getFragmentableTag();\n            return h(tag, assignedAttrs, children);\n        };\n    }\n});\n/**\n * export the public type for h/tsx inference\n * also to avoid inline import() in generated d.ts files\n */\n/**\n * Translation Component\n *\n * @remarks\n * See the following items for property about details\n *\n * @VueI18nSee [TranslationProps](component#translationprops)\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\n * @VueI18nSee [Component Interpolation](../guide/advanced/component)\n *\n * @example\n * ```html\n * <div id=\"app\">\n *   <!-- ... -->\n *   <i18n keypath=\"term\" tag=\"label\" for=\"tos\">\n *     <a :href=\"url\" target=\"_blank\">{{ $t('tos') }}</a>\n *   </i18n>\n *   <!-- ... -->\n * </div>\n * ```\n * ```js\n * import { createApp } from 'vue'\n * import { createI18n } from 'vue-i18n'\n *\n * const messages = {\n *   en: {\n *     tos: 'Term of Service',\n *     term: 'I accept xxx {0}.'\n *   },\n *   ja: {\n *     tos: '利用規約',\n *     term: '私は xxx の{0}に同意します。'\n *   }\n * }\n *\n * const i18n = createI18n({\n *   locale: 'en',\n *   messages\n * })\n *\n * const app = createApp({\n *   data: {\n *     url: '/term'\n *   }\n * }).use(i18n).mount('#app')\n * ```\n *\n * @VueI18nComponent\n */\nconst Translation = TranslationImpl;\nconst I18nT = Translation;\n\nfunction isVNode(target) {\n    return isArray(target) && !isString(target[0]);\n}\nfunction renderFormatter(props, context, slotKeys, partFormatter) {\n    const { slots, attrs } = context;\n    return () => {\n        const options = { part: true };\n        let overrides = {};\n        if (props.locale) {\n            options.locale = props.locale;\n        }\n        if (isString(props.format)) {\n            options.key = props.format;\n        }\n        else if (isObject(props.format)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (isString(props.format.key)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                options.key = props.format.key;\n            }\n            // Filter out number format options only\n            overrides = Object.keys(props.format).reduce((options, prop) => {\n                return slotKeys.includes(prop)\n                    ? assign({}, options, { [prop]: props.format[prop] }) // eslint-disable-line @typescript-eslint/no-explicit-any\n                    : options;\n            }, {});\n        }\n        const parts = partFormatter(...[props.value, options, overrides]);\n        let children = [options.key];\n        if (isArray(parts)) {\n            children = parts.map((part, index) => {\n                const slot = slots[part.type];\n                const node = slot\n                    ? slot({ [part.type]: part.value, index, parts })\n                    : [part.value];\n                if (isVNode(node)) {\n                    node[0].key = `${part.type}-${index}`;\n                }\n                return node;\n            });\n        }\n        else if (isString(parts)) {\n            children = [parts];\n        }\n        const assignedAttrs = assign({}, attrs);\n        const tag = isString(props.tag) || isObject(props.tag)\n            ? props.tag\n            : getFragmentableTag();\n        return h(tag, assignedAttrs, children);\n    };\n}\n\nconst NumberFormatImpl = /*#__PURE__*/ defineComponent({\n    /* eslint-disable */\n    name: 'i18n-n',\n    props: assign({\n        value: {\n            type: Number,\n            required: true\n        },\n        format: {\n            type: [String, Object]\n        }\n    }, baseFormatProps),\n    /* eslint-enable */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setup(props, context) {\n        const i18n = props.i18n ||\n            useI18n({\n                useScope: props.scope,\n                __useComponent: true\n            });\n        return renderFormatter(props, context, NUMBER_FORMAT_OPTIONS_KEYS, (...args) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        i18n[NumberPartsSymbol](...args));\n    }\n});\n/**\n * export the public type for h/tsx inference\n * also to avoid inline import() in generated d.ts files\n */\n/**\n * Number Format Component\n *\n * @remarks\n * See the following items for property about details\n *\n * @VueI18nSee [FormattableProps](component#formattableprops)\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\n * @VueI18nSee [Custom Formatting](../guide/essentials/number#custom-formatting)\n *\n * @VueI18nDanger\n * Not supported IE, due to no support `Intl.NumberFormat#formatToParts` in [IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts)\n *\n * If you want to use it, you need to use [polyfill](https://github.com/formatjs/formatjs/tree/main/packages/intl-numberformat)\n *\n * @VueI18nComponent\n */\nconst NumberFormat = NumberFormatImpl;\nconst I18nN = NumberFormat;\n\nconst DatetimeFormatImpl = /* #__PURE__*/ defineComponent({\n    /* eslint-disable */\n    name: 'i18n-d',\n    props: assign({\n        value: {\n            type: [Number, Date],\n            required: true\n        },\n        format: {\n            type: [String, Object]\n        }\n    }, baseFormatProps),\n    /* eslint-enable */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setup(props, context) {\n        const i18n = props.i18n ||\n            useI18n({\n                useScope: props.scope,\n                __useComponent: true\n            });\n        return renderFormatter(props, context, DATETIME_FORMAT_OPTIONS_KEYS, (...args) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        i18n[DatetimePartsSymbol](...args));\n    }\n});\n/**\n * Datetime Format Component\n *\n * @remarks\n * See the following items for property about details\n *\n * @VueI18nSee [FormattableProps](component#formattableprops)\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\n * @VueI18nSee [Custom Formatting](../guide/essentials/datetime#custom-formatting)\n *\n * @VueI18nDanger\n * Not supported IE, due to no support `Intl.DateTimeFormat#formatToParts` in [IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts)\n *\n * If you want to use it, you need to use [polyfill](https://github.com/formatjs/formatjs/tree/main/packages/intl-datetimeformat)\n *\n * @VueI18nComponent\n */\nconst DatetimeFormat = DatetimeFormatImpl;\nconst I18nD = DatetimeFormat;\n\nfunction getComposer$2(i18n, instance) {\n    const i18nInternal = i18n;\n    if (i18n.mode === 'composition') {\n        return (i18nInternal.__getInstance(instance) || i18n.global);\n    }\n    else {\n        const vueI18n = i18nInternal.__getInstance(instance);\n        return vueI18n != null\n            ? vueI18n.__composer\n            : i18n.global.__composer;\n    }\n}\nfunction vTDirective(i18n) {\n    const _process = (binding) => {\n        const { instance, modifiers, value } = binding;\n        /* istanbul ignore if */\n        if (!instance || !instance.$) {\n            throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n        }\n        const composer = getComposer$2(i18n, instance.$);\n        if ((process.env.NODE_ENV !== 'production') && modifiers.preserve) {\n            warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE));\n        }\n        const parsedValue = parseValue(value);\n        return [\n            Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]),\n            composer\n        ];\n    };\n    const register = (el, binding) => {\n        const [textContent, composer] = _process(binding);\n        if (inBrowser && i18n.global === composer) {\n            // global scope only\n            el.__i18nWatcher = watch(composer.locale, () => {\n                binding.instance && binding.instance.$forceUpdate();\n            });\n        }\n        el.__composer = composer;\n        el.textContent = textContent;\n    };\n    const unregister = (el) => {\n        if (inBrowser && el.__i18nWatcher) {\n            el.__i18nWatcher();\n            el.__i18nWatcher = undefined;\n            delete el.__i18nWatcher;\n        }\n        if (el.__composer) {\n            el.__composer = undefined;\n            delete el.__composer;\n        }\n    };\n    const update = (el, { value }) => {\n        if (el.__composer) {\n            const composer = el.__composer;\n            const parsedValue = parseValue(value);\n            el.textContent = Reflect.apply(composer.t, composer, [\n                ...makeParams(parsedValue)\n            ]);\n        }\n    };\n    const getSSRProps = (binding) => {\n        const [textContent] = _process(binding);\n        return { textContent };\n    };\n    return {\n        created: register,\n        unmounted: unregister,\n        beforeUpdate: update,\n        getSSRProps\n    };\n}\nfunction parseValue(value) {\n    if (isString(value)) {\n        return { path: value };\n    }\n    else if (isPlainObject(value)) {\n        if (!('path' in value)) {\n            throw createI18nError(I18nErrorCodes.REQUIRED_VALUE, 'path');\n        }\n        return value;\n    }\n    else {\n        throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n    }\n}\nfunction makeParams(value) {\n    const { path, locale, args, choice, plural } = value;\n    const options = {};\n    const named = args || {};\n    if (isString(locale)) {\n        options.locale = locale;\n    }\n    if (isNumber(choice)) {\n        options.plural = choice;\n    }\n    if (isNumber(plural)) {\n        options.plural = plural;\n    }\n    return [path, named, options];\n}\n\nfunction apply(app, i18n, ...options) {\n    const pluginOptions = isPlainObject(options[0])\n        ? options[0]\n        : {};\n    const useI18nComponentName = !!pluginOptions.useI18nComponentName;\n    const globalInstall = isBoolean(pluginOptions.globalInstall)\n        ? pluginOptions.globalInstall\n        : true;\n    if ((process.env.NODE_ENV !== 'production') && globalInstall && useI18nComponentName) {\n        warn(getWarnMessage(I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE, {\n            name: Translation.name\n        }));\n    }\n    if (globalInstall) {\n        [!useI18nComponentName ? Translation.name : 'i18n', 'I18nT'].forEach(name => app.component(name, Translation));\n        [NumberFormat.name, 'I18nN'].forEach(name => app.component(name, NumberFormat));\n        [DatetimeFormat.name, 'I18nD'].forEach(name => app.component(name, DatetimeFormat));\n    }\n    // install directive\n    {\n        app.directive('t', vTDirective(i18n));\n    }\n}\n\nconst VueDevToolsLabels = {\n    [\"vue-devtools-plugin-vue-i18n\" /* VueDevToolsIDs.PLUGIN */]: 'Vue I18n devtools',\n    [\"vue-i18n-resource-inspector\" /* VueDevToolsIDs.CUSTOM_INSPECTOR */]: 'I18n Resources',\n    [\"vue-i18n-timeline\" /* VueDevToolsIDs.TIMELINE */]: 'Vue I18n'\n};\nconst VueDevToolsPlaceholders = {\n    [\"vue-i18n-resource-inspector\" /* VueDevToolsIDs.CUSTOM_INSPECTOR */]: 'Search for scopes ...'\n};\nconst VueDevToolsTimelineColors = {\n    [\"vue-i18n-timeline\" /* VueDevToolsIDs.TIMELINE */]: 0xffcd19\n};\n\nconst VUE_I18N_COMPONENT_TYPES = 'vue-i18n: composer properties';\nlet devtoolsApi;\nasync function enableDevTools(app, i18n) {\n    return new Promise((resolve, reject) => {\n        try {\n            setupDevtoolsPlugin({\n                id: \"vue-devtools-plugin-vue-i18n\" /* VueDevToolsIDs.PLUGIN */,\n                label: VueDevToolsLabels[\"vue-devtools-plugin-vue-i18n\" /* VueDevToolsIDs.PLUGIN */],\n                packageName: 'vue-i18n',\n                homepage: 'https://vue-i18n.intlify.dev',\n                logo: 'https://vue-i18n.intlify.dev/vue-i18n-devtools-logo.png',\n                componentStateTypes: [VUE_I18N_COMPONENT_TYPES],\n                app: app // eslint-disable-line @typescript-eslint/no-explicit-any\n            }, api => {\n                devtoolsApi = api;\n                api.on.visitComponentTree(({ componentInstance, treeNode }) => {\n                    updateComponentTreeTags(componentInstance, treeNode, i18n);\n                });\n                api.on.inspectComponent(({ componentInstance, instanceData }) => {\n                    if (componentInstance.vnode.el &&\n                        componentInstance.vnode.el.__VUE_I18N__ &&\n                        instanceData) {\n                        if (i18n.mode === 'legacy') {\n                            // ignore global scope on legacy mode\n                            if (componentInstance.vnode.el.__VUE_I18N__ !==\n                                i18n.global.__composer) {\n                                inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);\n                            }\n                        }\n                        else {\n                            inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);\n                        }\n                    }\n                });\n                api.addInspector({\n                    id: \"vue-i18n-resource-inspector\" /* VueDevToolsIDs.CUSTOM_INSPECTOR */,\n                    label: VueDevToolsLabels[\"vue-i18n-resource-inspector\" /* VueDevToolsIDs.CUSTOM_INSPECTOR */],\n                    icon: 'language',\n                    treeFilterPlaceholder: VueDevToolsPlaceholders[\"vue-i18n-resource-inspector\" /* VueDevToolsIDs.CUSTOM_INSPECTOR */]\n                });\n                api.on.getInspectorTree(payload => {\n                    if (payload.app === app &&\n                        payload.inspectorId === \"vue-i18n-resource-inspector\" /* VueDevToolsIDs.CUSTOM_INSPECTOR */) {\n                        registerScope(payload, i18n);\n                    }\n                });\n                const roots = new Map();\n                api.on.getInspectorState(async (payload) => {\n                    if (payload.app === app &&\n                        payload.inspectorId === \"vue-i18n-resource-inspector\" /* VueDevToolsIDs.CUSTOM_INSPECTOR */) {\n                        api.unhighlightElement();\n                        inspectScope(payload, i18n);\n                        if (payload.nodeId === 'global') {\n                            if (!roots.has(payload.app)) {\n                                const [root] = await api.getComponentInstances(payload.app);\n                                roots.set(payload.app, root);\n                            }\n                            api.highlightElement(roots.get(payload.app));\n                        }\n                        else {\n                            const instance = getComponentInstance(payload.nodeId, i18n);\n                            instance && api.highlightElement(instance);\n                        }\n                    }\n                });\n                api.on.editInspectorState(payload => {\n                    if (payload.app === app &&\n                        payload.inspectorId === \"vue-i18n-resource-inspector\" /* VueDevToolsIDs.CUSTOM_INSPECTOR */) {\n                        editScope(payload, i18n);\n                    }\n                });\n                api.addTimelineLayer({\n                    id: \"vue-i18n-timeline\" /* VueDevToolsIDs.TIMELINE */,\n                    label: VueDevToolsLabels[\"vue-i18n-timeline\" /* VueDevToolsIDs.TIMELINE */],\n                    color: VueDevToolsTimelineColors[\"vue-i18n-timeline\" /* VueDevToolsIDs.TIMELINE */]\n                });\n                resolve(true);\n            });\n        }\n        catch (e) {\n            console.error(e);\n            reject(false);\n        }\n    });\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getI18nScopeLable(instance) {\n    return (instance.type.name ||\n        instance.type.displayName ||\n        instance.type.__file ||\n        'Anonymous');\n}\nfunction updateComponentTreeTags(instance, // eslint-disable-line @typescript-eslint/no-explicit-any\ntreeNode, i18n) {\n    // prettier-ignore\n    const global = i18n.mode === 'composition'\n        ? i18n.global\n        : i18n.global.__composer;\n    if (instance && instance.vnode.el && instance.vnode.el.__VUE_I18N__) {\n        // add custom tags local scope only\n        if (instance.vnode.el.__VUE_I18N__ !== global) {\n            const tag = {\n                label: `i18n (${getI18nScopeLable(instance)} Scope)`,\n                textColor: 0x000000,\n                backgroundColor: 0xffcd19\n            };\n            treeNode.tags.push(tag);\n        }\n    }\n}\nfunction inspectComposer(instanceData, composer) {\n    const type = VUE_I18N_COMPONENT_TYPES;\n    instanceData.state.push({\n        type,\n        key: 'locale',\n        editable: true,\n        value: composer.locale.value\n    });\n    instanceData.state.push({\n        type,\n        key: 'availableLocales',\n        editable: false,\n        value: composer.availableLocales\n    });\n    instanceData.state.push({\n        type,\n        key: 'fallbackLocale',\n        editable: true,\n        value: composer.fallbackLocale.value\n    });\n    instanceData.state.push({\n        type,\n        key: 'inheritLocale',\n        editable: true,\n        value: composer.inheritLocale\n    });\n    instanceData.state.push({\n        type,\n        key: 'messages',\n        editable: false,\n        value: getLocaleMessageValue(composer.messages.value)\n    });\n    {\n        instanceData.state.push({\n            type,\n            key: 'datetimeFormats',\n            editable: false,\n            value: composer.datetimeFormats.value\n        });\n        instanceData.state.push({\n            type,\n            key: 'numberFormats',\n            editable: false,\n            value: composer.numberFormats.value\n        });\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getLocaleMessageValue(messages) {\n    const value = {};\n    Object.keys(messages).forEach((key) => {\n        const v = messages[key];\n        if (isFunction(v) && 'source' in v) {\n            value[key] = getMessageFunctionDetails(v);\n        }\n        else if (isMessageAST(v) && v.loc && v.loc.source) {\n            value[key] = v.loc.source;\n        }\n        else if (isObject(v)) {\n            value[key] = getLocaleMessageValue(v);\n        }\n        else {\n            value[key] = v;\n        }\n    });\n    return value;\n}\nconst ESC = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '&': '&amp;'\n};\nfunction escape(s) {\n    return s.replace(/[<>\"&]/g, escapeChar);\n}\nfunction escapeChar(a) {\n    return ESC[a] || a;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMessageFunctionDetails(func) {\n    const argString = func.source ? `(\"${escape(func.source)}\")` : `(?)`;\n    return {\n        _custom: {\n            type: 'function',\n            display: `<span>ƒ</span> ${argString}`\n        }\n    };\n}\nfunction registerScope(payload, i18n) {\n    payload.rootNodes.push({\n        id: 'global',\n        label: 'Global Scope'\n    });\n    // prettier-ignore\n    const global = i18n.mode === 'composition'\n        ? i18n.global\n        : i18n.global.__composer;\n    for (const [keyInstance, instance] of i18n.__instances) {\n        // prettier-ignore\n        const composer = i18n.mode === 'composition'\n            ? instance\n            : instance.__composer;\n        if (global === composer) {\n            continue;\n        }\n        payload.rootNodes.push({\n            id: composer.id.toString(),\n            label: `${getI18nScopeLable(keyInstance)} Scope`\n        });\n    }\n}\nfunction getComponentInstance(nodeId, i18n) {\n    let instance = null;\n    if (nodeId !== 'global') {\n        for (const [component, composer] of i18n.__instances.entries()) {\n            if (composer.id.toString() === nodeId) {\n                instance = component;\n                break;\n            }\n        }\n    }\n    return instance;\n}\nfunction getComposer$1(nodeId, i18n) {\n    if (nodeId === 'global') {\n        return i18n.mode === 'composition'\n            ? i18n.global\n            : i18n.global.__composer;\n    }\n    else {\n        const instance = Array.from(i18n.__instances.values()).find(item => item.id.toString() === nodeId);\n        if (instance) {\n            return i18n.mode === 'composition'\n                ? instance\n                : instance.__composer;\n        }\n        else {\n            return null;\n        }\n    }\n}\nfunction inspectScope(payload, i18n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    const composer = getComposer$1(payload.nodeId, i18n);\n    if (composer) {\n        // TODO:\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        payload.state = makeScopeInspectState(composer);\n    }\n    return null;\n}\nfunction makeScopeInspectState(composer) {\n    const state = {};\n    const localeType = 'Locale related info';\n    const localeStates = [\n        {\n            type: localeType,\n            key: 'locale',\n            editable: true,\n            value: composer.locale.value\n        },\n        {\n            type: localeType,\n            key: 'fallbackLocale',\n            editable: true,\n            value: composer.fallbackLocale.value\n        },\n        {\n            type: localeType,\n            key: 'availableLocales',\n            editable: false,\n            value: composer.availableLocales\n        },\n        {\n            type: localeType,\n            key: 'inheritLocale',\n            editable: true,\n            value: composer.inheritLocale\n        }\n    ];\n    state[localeType] = localeStates;\n    const localeMessagesType = 'Locale messages info';\n    const localeMessagesStates = [\n        {\n            type: localeMessagesType,\n            key: 'messages',\n            editable: false,\n            value: getLocaleMessageValue(composer.messages.value)\n        }\n    ];\n    state[localeMessagesType] = localeMessagesStates;\n    {\n        const datetimeFormatsType = 'Datetime formats info';\n        const datetimeFormatsStates = [\n            {\n                type: datetimeFormatsType,\n                key: 'datetimeFormats',\n                editable: false,\n                value: composer.datetimeFormats.value\n            }\n        ];\n        state[datetimeFormatsType] = datetimeFormatsStates;\n        const numberFormatsType = 'Datetime formats info';\n        const numberFormatsStates = [\n            {\n                type: numberFormatsType,\n                key: 'numberFormats',\n                editable: false,\n                value: composer.numberFormats.value\n            }\n        ];\n        state[numberFormatsType] = numberFormatsStates;\n    }\n    return state;\n}\nfunction addTimelineEvent(event, payload) {\n    if (devtoolsApi) {\n        let groupId;\n        if (payload && 'groupId' in payload) {\n            groupId = payload.groupId;\n            delete payload.groupId;\n        }\n        devtoolsApi.addTimelineEvent({\n            layerId: \"vue-i18n-timeline\" /* VueDevToolsIDs.TIMELINE */,\n            event: {\n                title: event,\n                groupId,\n                time: Date.now(),\n                meta: {},\n                data: payload || {},\n                logType: event === \"compile-error\" /* VueDevToolsTimelineEvents.COMPILE_ERROR */\n                    ? 'error'\n                    : event === \"fallback\" /* VueDevToolsTimelineEvents.FALBACK */ ||\n                        event === \"missing\" /* VueDevToolsTimelineEvents.MISSING */\n                        ? 'warning'\n                        : 'default'\n            }\n        });\n    }\n}\nfunction editScope(payload, i18n) {\n    const composer = getComposer$1(payload.nodeId, i18n);\n    if (composer) {\n        const [field] = payload.path;\n        if (field === 'locale' && isString(payload.state.value)) {\n            composer.locale.value = payload.state.value;\n        }\n        else if (field === 'fallbackLocale' &&\n            (isString(payload.state.value) ||\n                isArray(payload.state.value) ||\n                isObject(payload.state.value))) {\n            composer.fallbackLocale.value = payload.state.value;\n        }\n        else if (field === 'inheritLocale' && isBoolean(payload.state.value)) {\n            composer.inheritLocale = payload.state.value;\n        }\n    }\n}\n\n/**\n * Supports compatibility for legacy vue-i18n APIs\n * This mixin is used when we use vue-i18n@v9.x or later\n */\nfunction defineMixin(vuei18n, composer, i18n) {\n    return {\n        beforeCreate() {\n            const instance = getCurrentInstance();\n            /* istanbul ignore if */\n            if (!instance) {\n                throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n            }\n            const options = this.$options;\n            if (options.i18n) {\n                const optionsI18n = options.i18n;\n                if (options.__i18n) {\n                    optionsI18n.__i18n = options.__i18n;\n                }\n                optionsI18n.__root = composer;\n                if (this === this.$root) {\n                    // merge option and gttach global\n                    this.$i18n = mergeToGlobal(vuei18n, optionsI18n);\n                }\n                else {\n                    optionsI18n.__injectWithOption = true;\n                    optionsI18n.__extender = i18n.__vueI18nExtend;\n                    // atttach local VueI18n instance\n                    this.$i18n = createVueI18n(optionsI18n);\n                    // extend VueI18n instance\n                    const _vueI18n = this.$i18n;\n                    if (_vueI18n.__extender) {\n                        _vueI18n.__disposer = _vueI18n.__extender(this.$i18n);\n                    }\n                }\n            }\n            else if (options.__i18n) {\n                if (this === this.$root) {\n                    // merge option and gttach global\n                    this.$i18n = mergeToGlobal(vuei18n, options);\n                }\n                else {\n                    // atttach local VueI18n instance\n                    this.$i18n = createVueI18n({\n                        __i18n: options.__i18n,\n                        __injectWithOption: true,\n                        __extender: i18n.__vueI18nExtend,\n                        __root: composer\n                    });\n                    // extend VueI18n instance\n                    const _vueI18n = this.$i18n;\n                    if (_vueI18n.__extender) {\n                        _vueI18n.__disposer = _vueI18n.__extender(this.$i18n);\n                    }\n                }\n            }\n            else {\n                // attach global VueI18n instance\n                this.$i18n = vuei18n;\n            }\n            if (options.__i18nGlobal) {\n                adjustI18nResources(composer, options, options);\n            }\n            // defines vue-i18n legacy APIs\n            this.$t = (...args) => this.$i18n.t(...args);\n            this.$rt = (...args) => this.$i18n.rt(...args);\n            this.$tc = (...args) => this.$i18n.tc(...args);\n            this.$te = (key, locale) => this.$i18n.te(key, locale);\n            this.$d = (...args) => this.$i18n.d(...args);\n            this.$n = (...args) => this.$i18n.n(...args);\n            this.$tm = (key) => this.$i18n.tm(key);\n            i18n.__setInstance(instance, this.$i18n);\n        },\n        mounted() {\n            /* istanbul ignore if */\n            if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) &&\n                !false &&\n                this.$el &&\n                this.$i18n) {\n                const _vueI18n = this.$i18n;\n                this.$el.__VUE_I18N__ = _vueI18n.__composer;\n                const emitter = (this.__v_emitter =\n                    createEmitter());\n                _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);\n                emitter.on('*', addTimelineEvent);\n            }\n        },\n        unmounted() {\n            const instance = getCurrentInstance();\n            /* istanbul ignore if */\n            if (!instance) {\n                throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n            }\n            const _vueI18n = this.$i18n;\n            /* istanbul ignore if */\n            if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) &&\n                !false &&\n                this.$el &&\n                this.$el.__VUE_I18N__) {\n                if (this.__v_emitter) {\n                    this.__v_emitter.off('*', addTimelineEvent);\n                    delete this.__v_emitter;\n                }\n                if (this.$i18n) {\n                    _vueI18n.__disableEmitter && _vueI18n.__disableEmitter();\n                    delete this.$el.__VUE_I18N__;\n                }\n            }\n            delete this.$t;\n            delete this.$rt;\n            delete this.$tc;\n            delete this.$te;\n            delete this.$d;\n            delete this.$n;\n            delete this.$tm;\n            if (_vueI18n.__disposer) {\n                _vueI18n.__disposer();\n                delete _vueI18n.__disposer;\n                delete _vueI18n.__extender;\n            }\n            i18n.__deleteInstance(instance);\n            delete this.$i18n;\n        }\n    };\n}\nfunction mergeToGlobal(g, options) {\n    g.locale = options.locale || g.locale;\n    g.fallbackLocale = options.fallbackLocale || g.fallbackLocale;\n    g.missing = options.missing || g.missing;\n    g.silentTranslationWarn =\n        options.silentTranslationWarn || g.silentFallbackWarn;\n    g.silentFallbackWarn = options.silentFallbackWarn || g.silentFallbackWarn;\n    g.formatFallbackMessages =\n        options.formatFallbackMessages || g.formatFallbackMessages;\n    g.postTranslation = options.postTranslation || g.postTranslation;\n    g.warnHtmlInMessage = options.warnHtmlInMessage || g.warnHtmlInMessage;\n    g.escapeParameterHtml = options.escapeParameterHtml || g.escapeParameterHtml;\n    g.sync = options.sync || g.sync;\n    g.__composer[SetPluralRulesSymbol](options.pluralizationRules || g.pluralizationRules);\n    const messages = getLocaleMessages(g.locale, {\n        messages: options.messages,\n        __i18n: options.__i18n\n    });\n    Object.keys(messages).forEach(locale => g.mergeLocaleMessage(locale, messages[locale]));\n    if (options.datetimeFormats) {\n        Object.keys(options.datetimeFormats).forEach(locale => g.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));\n    }\n    if (options.numberFormats) {\n        Object.keys(options.numberFormats).forEach(locale => g.mergeNumberFormat(locale, options.numberFormats[locale]));\n    }\n    return g;\n}\n\n/**\n * Injection key for {@link useI18n}\n *\n * @remarks\n * The global injection key for I18n instances with `useI18n`. this injection key is used in Web Components.\n * Specify the i18n instance created by {@link createI18n} together with `provide` function.\n *\n * @VueI18nGeneral\n */\nconst I18nInjectionKey = \n/* #__PURE__*/ makeSymbol('global-vue-i18n');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction createI18n(options = {}, VueI18nLegacy) {\n    // prettier-ignore\n    const __legacyMode = __VUE_I18N_LEGACY_API__ && isBoolean(options.legacy)\n            ? options.legacy\n            : __VUE_I18N_LEGACY_API__;\n    // prettier-ignore\n    const __globalInjection = isBoolean(options.globalInjection)\n        ? options.globalInjection\n        : true;\n    // prettier-ignore\n    const __allowComposition = __VUE_I18N_LEGACY_API__ && __legacyMode\n            ? !!options.allowComposition\n            : true;\n    const __instances = new Map();\n    const [globalScope, __global] = createGlobal(options, __legacyMode);\n    const symbol = /* #__PURE__*/ makeSymbol((process.env.NODE_ENV !== 'production') ? 'vue-i18n' : '');\n    if ((process.env.NODE_ENV !== 'production')) {\n        if (__legacyMode && __allowComposition && !false) {\n            warn(getWarnMessage(I18nWarnCodes.NOTICE_DROP_ALLOW_COMPOSITION));\n        }\n    }\n    function __getInstance(component) {\n        return __instances.get(component) || null;\n    }\n    function __setInstance(component, instance) {\n        __instances.set(component, instance);\n    }\n    function __deleteInstance(component) {\n        __instances.delete(component);\n    }\n    {\n        const i18n = {\n            // mode\n            get mode() {\n                return __VUE_I18N_LEGACY_API__ && __legacyMode\n                    ? 'legacy'\n                    : 'composition';\n            },\n            // allowComposition\n            get allowComposition() {\n                return __allowComposition;\n            },\n            // install plugin\n            async install(app, ...options) {\n                if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) &&\n                    !false) {\n                    app.__VUE_I18N__ = i18n;\n                }\n                // setup global provider\n                app.__VUE_I18N_SYMBOL__ = symbol;\n                app.provide(app.__VUE_I18N_SYMBOL__, i18n);\n                // set composer & vuei18n extend hook options from plugin options\n                if (isPlainObject(options[0])) {\n                    const opts = options[0];\n                    i18n.__composerExtend =\n                        opts.__composerExtend;\n                    i18n.__vueI18nExtend =\n                        opts.__vueI18nExtend;\n                }\n                // global method and properties injection for Composition API\n                let globalReleaseHandler = null;\n                if (!__legacyMode && __globalInjection) {\n                    globalReleaseHandler = injectGlobalFields(app, i18n.global);\n                }\n                // install built-in components and directive\n                if (__VUE_I18N_FULL_INSTALL__) {\n                    apply(app, i18n, ...options);\n                }\n                // setup mixin for Legacy API\n                if (__VUE_I18N_LEGACY_API__ && __legacyMode) {\n                    app.mixin(defineMixin(__global, __global.__composer, i18n));\n                }\n                // release global scope\n                const unmountApp = app.unmount;\n                app.unmount = () => {\n                    globalReleaseHandler && globalReleaseHandler();\n                    i18n.dispose();\n                    unmountApp();\n                };\n                // setup vue-devtools plugin\n                if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) && !false) {\n                    const ret = await enableDevTools(app, i18n);\n                    if (!ret) {\n                        throw createI18nError(I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN);\n                    }\n                    const emitter = createEmitter();\n                    if (__legacyMode) {\n                        const _vueI18n = __global;\n                        _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        const _composer = __global;\n                        _composer[EnableEmitter] && _composer[EnableEmitter](emitter);\n                    }\n                    emitter.on('*', addTimelineEvent);\n                }\n            },\n            // global accessor\n            get global() {\n                return __global;\n            },\n            dispose() {\n                globalScope.stop();\n            },\n            // @internal\n            __instances,\n            // @internal\n            __getInstance,\n            // @internal\n            __setInstance,\n            // @internal\n            __deleteInstance\n        };\n        return i18n;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction useI18n(options = {}) {\n    const instance = getCurrentInstance();\n    if (instance == null) {\n        throw createI18nError(I18nErrorCodes.MUST_BE_CALL_SETUP_TOP);\n    }\n    if (!instance.isCE &&\n        instance.appContext.app != null &&\n        !instance.appContext.app.__VUE_I18N_SYMBOL__) {\n        throw createI18nError(I18nErrorCodes.NOT_INSTALLED);\n    }\n    const i18n = getI18nInstance(instance);\n    const gl = getGlobalComposer(i18n);\n    const componentOptions = getComponentOptions(instance);\n    const scope = getScope(options, componentOptions);\n    if (__VUE_I18N_LEGACY_API__) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (i18n.mode === 'legacy' && !options.__useComponent) {\n            if (!i18n.allowComposition) {\n                throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE);\n            }\n            return useI18nForLegacy(instance, scope, gl, options);\n        }\n    }\n    if (scope === 'global') {\n        adjustI18nResources(gl, options, componentOptions);\n        return gl;\n    }\n    if (scope === 'parent') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let composer = getComposer(i18n, instance, options.__useComponent);\n        if (composer == null) {\n            if ((process.env.NODE_ENV !== 'production')) {\n                warn(getWarnMessage(I18nWarnCodes.NOT_FOUND_PARENT_SCOPE));\n            }\n            composer = gl;\n        }\n        return composer;\n    }\n    const i18nInternal = i18n;\n    let composer = i18nInternal.__getInstance(instance);\n    if (composer == null) {\n        const composerOptions = assign({}, options);\n        if ('__i18n' in componentOptions) {\n            composerOptions.__i18n = componentOptions.__i18n;\n        }\n        if (gl) {\n            composerOptions.__root = gl;\n        }\n        composer = createComposer(composerOptions);\n        if (i18nInternal.__composerExtend) {\n            composer[DisposeSymbol] =\n                i18nInternal.__composerExtend(composer);\n        }\n        setupLifeCycle(i18nInternal, instance, composer);\n        i18nInternal.__setInstance(instance, composer);\n    }\n    return composer;\n}\n/**\n * Cast to VueI18n legacy compatible type\n *\n * @remarks\n * This API is provided only with [vue-i18n-bridge](https://vue-i18n.intlify.dev/guide/migration/ways.html#what-is-vue-i18n-bridge).\n *\n * The purpose of this function is to convert an {@link I18n} instance created with {@link createI18n | createI18n(legacy: true)} into a `vue-i18n@v8.x` compatible instance of `new VueI18n` in a TypeScript environment.\n *\n * @param i18n - An instance of {@link I18n}\n * @returns A i18n instance which is casted to {@link VueI18n} type\n *\n * @VueI18nTip\n * :new: provided by **vue-i18n-bridge only**\n *\n * @VueI18nGeneral\n */\n/* #__NO_SIDE_EFFECTS__ */\nconst castToVueI18n = (i18n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => {\n    if (!(__VUE_I18N_BRIDGE__ in i18n)) {\n        throw createI18nError(I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N);\n    }\n    return i18n;\n};\nfunction createGlobal(options, legacyMode, VueI18nLegacy // eslint-disable-line @typescript-eslint/no-explicit-any\n) {\n    const scope = effectScope();\n    {\n        const obj = __VUE_I18N_LEGACY_API__ && legacyMode\n            ? scope.run(() => createVueI18n(options))\n            : scope.run(() => createComposer(options));\n        if (obj == null) {\n            throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n        }\n        return [scope, obj];\n    }\n}\nfunction getI18nInstance(instance) {\n    {\n        const i18n = inject(!instance.isCE\n            ? instance.appContext.app.__VUE_I18N_SYMBOL__\n            : I18nInjectionKey);\n        /* istanbul ignore if */\n        if (!i18n) {\n            throw createI18nError(!instance.isCE\n                ? I18nErrorCodes.UNEXPECTED_ERROR\n                : I18nErrorCodes.NOT_INSTALLED_WITH_PROVIDE);\n        }\n        return i18n;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getScope(options, componentOptions) {\n    // prettier-ignore\n    return isEmptyObject(options)\n        ? ('__i18n' in componentOptions)\n            ? 'local'\n            : 'global'\n        : !options.useScope\n            ? 'local'\n            : options.useScope;\n}\nfunction getGlobalComposer(i18n) {\n    // prettier-ignore\n    return i18n.mode === 'composition'\n            ? i18n.global\n            : i18n.global.__composer\n        ;\n}\nfunction getComposer(i18n, target, useComponent = false) {\n    let composer = null;\n    const root = target.root;\n    let current = getParentComponentInstance(target, useComponent);\n    while (current != null) {\n        const i18nInternal = i18n;\n        if (i18n.mode === 'composition') {\n            composer = i18nInternal.__getInstance(current);\n        }\n        else {\n            if (__VUE_I18N_LEGACY_API__) {\n                const vueI18n = i18nInternal.__getInstance(current);\n                if (vueI18n != null) {\n                    composer = vueI18n\n                        .__composer;\n                    if (useComponent &&\n                        composer &&\n                        !composer[InejctWithOptionSymbol] // eslint-disable-line @typescript-eslint/no-explicit-any\n                    ) {\n                        composer = null;\n                    }\n                }\n            }\n        }\n        if (composer != null) {\n            break;\n        }\n        if (root === current) {\n            break;\n        }\n        current = current.parent;\n    }\n    return composer;\n}\nfunction getParentComponentInstance(target, useComponent = false) {\n    if (target == null) {\n        return null;\n    }\n    {\n        // if `useComponent: true` will be specified, we get lexical scope owner instance for use-case slots\n        return !useComponent\n            ? target.parent\n            : target.vnode.ctx || target.parent; // eslint-disable-line @typescript-eslint/no-explicit-any\n    }\n}\nfunction setupLifeCycle(i18n, target, composer) {\n    let emitter = null;\n    {\n        onMounted(() => {\n            // inject composer instance to DOM for intlify-devtools\n            if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) &&\n                !false &&\n                target.vnode.el) {\n                target.vnode.el.__VUE_I18N__ = composer;\n                emitter = createEmitter();\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const _composer = composer;\n                _composer[EnableEmitter] && _composer[EnableEmitter](emitter);\n                emitter.on('*', addTimelineEvent);\n            }\n        }, target);\n        onUnmounted(() => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const _composer = composer;\n            // remove composer instance from DOM for intlify-devtools\n            if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) &&\n                !false &&\n                target.vnode.el &&\n                target.vnode.el.__VUE_I18N__) {\n                emitter && emitter.off('*', addTimelineEvent);\n                _composer[DisableEmitter] && _composer[DisableEmitter]();\n                delete target.vnode.el.__VUE_I18N__;\n            }\n            i18n.__deleteInstance(target);\n            // dispose extended resources\n            const dispose = _composer[DisposeSymbol];\n            if (dispose) {\n                dispose();\n                delete _composer[DisposeSymbol];\n            }\n        }, target);\n    }\n}\nfunction useI18nForLegacy(instance, scope, root, options = {} // eslint-disable-line @typescript-eslint/no-explicit-any\n) {\n    const isLocalScope = scope === 'local';\n    const _composer = shallowRef(null);\n    if (isLocalScope &&\n        instance.proxy &&\n        !(instance.proxy.$options.i18n || instance.proxy.$options.__i18n)) {\n        throw createI18nError(I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION);\n    }\n    const _inheritLocale = isBoolean(options.inheritLocale)\n        ? options.inheritLocale\n        : !isString(options.locale);\n    const _locale = ref(\n    // prettier-ignore\n    !isLocalScope || _inheritLocale\n        ? root.locale.value\n        : isString(options.locale)\n            ? options.locale\n            : DEFAULT_LOCALE);\n    const _fallbackLocale = ref(\n    // prettier-ignore\n    !isLocalScope || _inheritLocale\n        ? root.fallbackLocale.value\n        : isString(options.fallbackLocale) ||\n            isArray(options.fallbackLocale) ||\n            isPlainObject(options.fallbackLocale) ||\n            options.fallbackLocale === false\n            ? options.fallbackLocale\n            : _locale.value);\n    const _messages = ref(getLocaleMessages(_locale.value, options));\n    // prettier-ignore\n    const _datetimeFormats = ref(isPlainObject(options.datetimeFormats)\n        ? options.datetimeFormats\n        : { [_locale.value]: {} });\n    // prettier-ignore\n    const _numberFormats = ref(isPlainObject(options.numberFormats)\n        ? options.numberFormats\n        : { [_locale.value]: {} });\n    // prettier-ignore\n    const _missingWarn = isLocalScope\n        ? root.missingWarn\n        : isBoolean(options.missingWarn) || isRegExp(options.missingWarn)\n            ? options.missingWarn\n            : true;\n    // prettier-ignore\n    const _fallbackWarn = isLocalScope\n        ? root.fallbackWarn\n        : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn)\n            ? options.fallbackWarn\n            : true;\n    // prettier-ignore\n    const _fallbackRoot = isLocalScope\n        ? root.fallbackRoot\n        : isBoolean(options.fallbackRoot)\n            ? options.fallbackRoot\n            : true;\n    // configure fall back to root\n    const _fallbackFormat = !!options.fallbackFormat;\n    // runtime missing\n    const _missing = isFunction(options.missing) ? options.missing : null;\n    // postTranslation handler\n    const _postTranslation = isFunction(options.postTranslation)\n        ? options.postTranslation\n        : null;\n    // prettier-ignore\n    const _warnHtmlMessage = isLocalScope\n        ? root.warnHtmlMessage\n        : isBoolean(options.warnHtmlMessage)\n            ? options.warnHtmlMessage\n            : true;\n    const _escapeParameter = !!options.escapeParameter;\n    // prettier-ignore\n    const _modifiers = isLocalScope\n        ? root.modifiers\n        : isPlainObject(options.modifiers)\n            ? options.modifiers\n            : {};\n    // pluralRules\n    const _pluralRules = options.pluralRules || (isLocalScope && root.pluralRules);\n    // track reactivity\n    function trackReactivityValues() {\n        return [\n            _locale.value,\n            _fallbackLocale.value,\n            _messages.value,\n            _datetimeFormats.value,\n            _numberFormats.value\n        ];\n    }\n    // locale\n    const locale = computed({\n        get: () => {\n            return _composer.value ? _composer.value.locale.value : _locale.value;\n        },\n        set: val => {\n            if (_composer.value) {\n                _composer.value.locale.value = val;\n            }\n            _locale.value = val;\n        }\n    });\n    // fallbackLocale\n    const fallbackLocale = computed({\n        get: () => {\n            return _composer.value\n                ? _composer.value.fallbackLocale.value\n                : _fallbackLocale.value;\n        },\n        set: val => {\n            if (_composer.value) {\n                _composer.value.fallbackLocale.value = val;\n            }\n            _fallbackLocale.value = val;\n        }\n    });\n    // messages\n    const messages = computed(() => {\n        if (_composer.value) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return _composer.value.messages.value;\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return _messages.value;\n        }\n    });\n    const datetimeFormats = computed(() => _datetimeFormats.value);\n    const numberFormats = computed(() => _numberFormats.value);\n    function getPostTranslationHandler() {\n        return _composer.value\n            ? _composer.value.getPostTranslationHandler()\n            : _postTranslation;\n    }\n    function setPostTranslationHandler(handler) {\n        if (_composer.value) {\n            _composer.value.setPostTranslationHandler(handler);\n        }\n    }\n    function getMissingHandler() {\n        return _composer.value ? _composer.value.getMissingHandler() : _missing;\n    }\n    function setMissingHandler(handler) {\n        if (_composer.value) {\n            _composer.value.setMissingHandler(handler);\n        }\n    }\n    function warpWithDeps(fn) {\n        trackReactivityValues();\n        return fn();\n    }\n    function t(...args) {\n        return _composer.value\n            ? warpWithDeps(() => Reflect.apply(_composer.value.t, null, [...args]))\n            : warpWithDeps(() => '');\n    }\n    function rt(...args) {\n        return _composer.value\n            ? Reflect.apply(_composer.value.rt, null, [...args])\n            : '';\n    }\n    function d(...args) {\n        return _composer.value\n            ? warpWithDeps(() => Reflect.apply(_composer.value.d, null, [...args]))\n            : warpWithDeps(() => '');\n    }\n    function n(...args) {\n        return _composer.value\n            ? warpWithDeps(() => Reflect.apply(_composer.value.n, null, [...args]))\n            : warpWithDeps(() => '');\n    }\n    function tm(key) {\n        return _composer.value ? _composer.value.tm(key) : {};\n    }\n    function te(key, locale) {\n        return _composer.value ? _composer.value.te(key, locale) : false;\n    }\n    function getLocaleMessage(locale) {\n        return _composer.value ? _composer.value.getLocaleMessage(locale) : {};\n    }\n    function setLocaleMessage(locale, message) {\n        if (_composer.value) {\n            _composer.value.setLocaleMessage(locale, message);\n            _messages.value[locale] = message;\n        }\n    }\n    function mergeLocaleMessage(locale, message) {\n        if (_composer.value) {\n            _composer.value.mergeLocaleMessage(locale, message);\n        }\n    }\n    function getDateTimeFormat(locale) {\n        return _composer.value ? _composer.value.getDateTimeFormat(locale) : {};\n    }\n    function setDateTimeFormat(locale, format) {\n        if (_composer.value) {\n            _composer.value.setDateTimeFormat(locale, format);\n            _datetimeFormats.value[locale] = format;\n        }\n    }\n    function mergeDateTimeFormat(locale, format) {\n        if (_composer.value) {\n            _composer.value.mergeDateTimeFormat(locale, format);\n        }\n    }\n    function getNumberFormat(locale) {\n        return _composer.value ? _composer.value.getNumberFormat(locale) : {};\n    }\n    function setNumberFormat(locale, format) {\n        if (_composer.value) {\n            _composer.value.setNumberFormat(locale, format);\n            _numberFormats.value[locale] = format;\n        }\n    }\n    function mergeNumberFormat(locale, format) {\n        if (_composer.value) {\n            _composer.value.mergeNumberFormat(locale, format);\n        }\n    }\n    const wrapper = {\n        get id() {\n            return _composer.value ? _composer.value.id : -1;\n        },\n        locale,\n        fallbackLocale,\n        messages,\n        datetimeFormats,\n        numberFormats,\n        get inheritLocale() {\n            return _composer.value ? _composer.value.inheritLocale : _inheritLocale;\n        },\n        set inheritLocale(val) {\n            if (_composer.value) {\n                _composer.value.inheritLocale = val;\n            }\n        },\n        get availableLocales() {\n            return _composer.value\n                ? _composer.value.availableLocales\n                : Object.keys(_messages.value);\n        },\n        get modifiers() {\n            return (_composer.value ? _composer.value.modifiers : _modifiers);\n        },\n        get pluralRules() {\n            return (_composer.value ? _composer.value.pluralRules : _pluralRules);\n        },\n        get isGlobal() {\n            return _composer.value ? _composer.value.isGlobal : false;\n        },\n        get missingWarn() {\n            return _composer.value ? _composer.value.missingWarn : _missingWarn;\n        },\n        set missingWarn(val) {\n            if (_composer.value) {\n                _composer.value.missingWarn = val;\n            }\n        },\n        get fallbackWarn() {\n            return _composer.value ? _composer.value.fallbackWarn : _fallbackWarn;\n        },\n        set fallbackWarn(val) {\n            if (_composer.value) {\n                _composer.value.missingWarn = val;\n            }\n        },\n        get fallbackRoot() {\n            return _composer.value ? _composer.value.fallbackRoot : _fallbackRoot;\n        },\n        set fallbackRoot(val) {\n            if (_composer.value) {\n                _composer.value.fallbackRoot = val;\n            }\n        },\n        get fallbackFormat() {\n            return _composer.value ? _composer.value.fallbackFormat : _fallbackFormat;\n        },\n        set fallbackFormat(val) {\n            if (_composer.value) {\n                _composer.value.fallbackFormat = val;\n            }\n        },\n        get warnHtmlMessage() {\n            return _composer.value\n                ? _composer.value.warnHtmlMessage\n                : _warnHtmlMessage;\n        },\n        set warnHtmlMessage(val) {\n            if (_composer.value) {\n                _composer.value.warnHtmlMessage = val;\n            }\n        },\n        get escapeParameter() {\n            return _composer.value\n                ? _composer.value.escapeParameter\n                : _escapeParameter;\n        },\n        set escapeParameter(val) {\n            if (_composer.value) {\n                _composer.value.escapeParameter = val;\n            }\n        },\n        t,\n        getPostTranslationHandler,\n        setPostTranslationHandler,\n        getMissingHandler,\n        setMissingHandler,\n        rt,\n        d,\n        n,\n        tm,\n        te,\n        getLocaleMessage,\n        setLocaleMessage,\n        mergeLocaleMessage,\n        getDateTimeFormat,\n        setDateTimeFormat,\n        mergeDateTimeFormat,\n        getNumberFormat,\n        setNumberFormat,\n        mergeNumberFormat\n    };\n    function sync(composer) {\n        composer.locale.value = _locale.value;\n        composer.fallbackLocale.value = _fallbackLocale.value;\n        Object.keys(_messages.value).forEach(locale => {\n            composer.mergeLocaleMessage(locale, _messages.value[locale]);\n        });\n        Object.keys(_datetimeFormats.value).forEach(locale => {\n            composer.mergeDateTimeFormat(locale, _datetimeFormats.value[locale]);\n        });\n        Object.keys(_numberFormats.value).forEach(locale => {\n            composer.mergeNumberFormat(locale, _numberFormats.value[locale]);\n        });\n        composer.escapeParameter = _escapeParameter;\n        composer.fallbackFormat = _fallbackFormat;\n        composer.fallbackRoot = _fallbackRoot;\n        composer.fallbackWarn = _fallbackWarn;\n        composer.missingWarn = _missingWarn;\n        composer.warnHtmlMessage = _warnHtmlMessage;\n    }\n    onBeforeMount(() => {\n        if (instance.proxy == null || instance.proxy.$i18n == null) {\n            throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const composer = (_composer.value = instance.proxy.$i18n\n            .__composer);\n        if (scope === 'global') {\n            _locale.value = composer.locale.value;\n            _fallbackLocale.value = composer.fallbackLocale.value;\n            _messages.value = composer.messages.value;\n            _datetimeFormats.value = composer.datetimeFormats.value;\n            _numberFormats.value = composer.numberFormats.value;\n        }\n        else if (isLocalScope) {\n            sync(composer);\n        }\n    });\n    return wrapper;\n}\nconst globalExportProps = [\n    'locale',\n    'fallbackLocale',\n    'availableLocales'\n];\nconst globalExportMethods = ['t', 'rt', 'd', 'n', 'tm', 'te']\n    ;\nfunction injectGlobalFields(app, composer) {\n    const i18n = Object.create(null);\n    globalExportProps.forEach(prop => {\n        const desc = Object.getOwnPropertyDescriptor(composer, prop);\n        if (!desc) {\n            throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n        }\n        const wrap = isRef(desc.value) // check computed props\n            ? {\n                get() {\n                    return desc.value.value;\n                },\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                set(val) {\n                    desc.value.value = val;\n                }\n            }\n            : {\n                get() {\n                    return desc.get && desc.get();\n                }\n            };\n        Object.defineProperty(i18n, prop, wrap);\n    });\n    app.config.globalProperties.$i18n = i18n;\n    globalExportMethods.forEach(method => {\n        const desc = Object.getOwnPropertyDescriptor(composer, method);\n        if (!desc || !desc.value) {\n            throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n        }\n        Object.defineProperty(app.config.globalProperties, `$${method}`, desc);\n    });\n    const dispose = () => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        delete app.config.globalProperties.$i18n;\n        globalExportMethods.forEach(method => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            delete app.config.globalProperties[`$${method}`];\n        });\n    };\n    return dispose;\n}\n\n{\n    initFeatureFlags();\n}\n// register message compiler at vue-i18n\nif (__INTLIFY_JIT_COMPILATION__) {\n    registerMessageCompiler(compile);\n}\nelse {\n    registerMessageCompiler(compileToFunction);\n}\n// register message resolver at vue-i18n\nregisterMessageResolver(resolveValue);\n// register fallback locale at vue-i18n\nregisterLocaleFallbacker(fallbackWithLocaleChain);\n// NOTE: experimental !!\nif ((process.env.NODE_ENV !== 'production') || __INTLIFY_PROD_DEVTOOLS__) {\n    const target = getGlobalThis();\n    target.__INTLIFY__ = true;\n    setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);\n}\nif ((process.env.NODE_ENV !== 'production')) ;\n\nexport { DatetimeFormat, I18nD, I18nInjectionKey, I18nN, I18nT, NumberFormat, Translation, VERSION, castToVueI18n, createI18n, useI18n, vTDirective };\n","\n// @ts-nocheck\nimport locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_en_US_json from \"../woonuxt_base/app/locales/en-US.json\";\nimport locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_de_DE_json from \"../woonuxt_base/app/locales/de-DE.json\";\nimport locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_es_ES_json from \"../woonuxt_base/app/locales/es-ES.json\";\nimport locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_fr_FR_json from \"../woonuxt_base/app/locales/fr-FR.json\";\nimport locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_it_IT_json from \"../woonuxt_base/app/locales/it-IT.json\";\nimport locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_pt_BR_json from \"../woonuxt_base/app/locales/pt-BR.json\";\n\n\nexport const localeCodes =  [\n  \"en_US\",\n  \"de_DE\",\n  \"es_ES\",\n  \"fr_FR\",\n  \"it_IT\",\n  \"pt_BR\"\n]\n\nexport const localeLoaders = {\n  \"en_US\": [{ key: \"../woonuxt_base/app/locales/en-US.json\", load: () => Promise.resolve(locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_en_US_json), cache: true }],\n  \"de_DE\": [{ key: \"../woonuxt_base/app/locales/de-DE.json\", load: () => Promise.resolve(locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_de_DE_json), cache: true }],\n  \"es_ES\": [{ key: \"../woonuxt_base/app/locales/es-ES.json\", load: () => Promise.resolve(locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_es_ES_json), cache: true }],\n  \"fr_FR\": [{ key: \"../woonuxt_base/app/locales/fr-FR.json\", load: () => Promise.resolve(locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_fr_FR_json), cache: true }],\n  \"it_IT\": [{ key: \"../woonuxt_base/app/locales/it-IT.json\", load: () => Promise.resolve(locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_it_IT_json), cache: true }],\n  \"pt_BR\": [{ key: \"../woonuxt_base/app/locales/pt-BR.json\", load: () => Promise.resolve(locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_pt_BR_json), cache: true }]\n}\n\nexport const vueI18nConfigs = [\n  \n]\n\nexport const nuxtI18nOptions = {\n  \"experimental\": {\n    \"localeDetector\": \"\",\n    \"switchLocalePathLinkSSR\": false,\n    \"autoImportTranslationFunctions\": false\n  },\n  \"bundle\": {\n    \"compositionOnly\": true,\n    \"runtimeOnly\": false,\n    \"fullInstall\": true,\n    \"dropMessageCompiler\": false\n  },\n  \"compilation\": {\n    \"jit\": true,\n    \"strictMessage\": true,\n    \"escapeHtml\": false\n  },\n  \"customBlocks\": {\n    \"defaultSFCLang\": \"json\",\n    \"globalSFCScope\": false\n  },\n  \"vueI18n\": \"\",\n  \"locales\": [\n    {\n      \"code\": \"en_US\",\n      \"name\": \"English 🇺🇸\",\n      \"files\": [\n        \"woonuxt_base/app/locales/en-US.json\"\n      ]\n    },\n    {\n      \"code\": \"de_DE\",\n      \"name\": \"Deutsch 🇩🇪\",\n      \"files\": [\n        \"woonuxt_base/app/locales/de-DE.json\"\n      ]\n    },\n    {\n      \"code\": \"es_ES\",\n      \"name\": \"Español 🇪🇸\",\n      \"files\": [\n        \"woonuxt_base/app/locales/es-ES.json\"\n      ]\n    },\n    {\n      \"code\": \"fr_FR\",\n      \"name\": \"Français 🇫🇷\",\n      \"files\": [\n        \"woonuxt_base/app/locales/fr-FR.json\"\n      ]\n    },\n    {\n      \"code\": \"it_IT\",\n      \"name\": \"Italiano 🇮🇹\",\n      \"files\": [\n        \"woonuxt_base/app/locales/it-IT.json\"\n      ]\n    },\n    {\n      \"code\": \"pt_BR\",\n      \"name\": \"Português 🇧🇷\",\n      \"files\": [\n        \"woonuxt_base/app/locales/pt-BR.json\"\n      ]\n    }\n  ],\n  \"defaultLocale\": \"en_US\",\n  \"defaultDirection\": \"ltr\",\n  \"routesNameSeparator\": \"___\",\n  \"trailingSlash\": false,\n  \"defaultLocaleRouteNameSuffix\": \"default\",\n  \"strategy\": \"no_prefix\",\n  \"lazy\": false,\n  \"langDir\": \"locales\",\n  \"detectBrowserLanguage\": {\n    \"alwaysRedirect\": false,\n    \"cookieCrossOrigin\": false,\n    \"cookieDomain\": null,\n    \"cookieKey\": \"i18n_redirected\",\n    \"cookieSecure\": false,\n    \"fallbackLocale\": \"\",\n    \"redirectOn\": \"root\",\n    \"useCookie\": true\n  },\n  \"differentDomains\": false,\n  \"baseUrl\": \"\",\n  \"dynamicRouteParams\": false,\n  \"customRoutes\": \"page\",\n  \"pages\": {},\n  \"skipSettingLocaleOnNavigate\": false,\n  \"types\": \"composition\",\n  \"debug\": false,\n  \"parallelPlugin\": false,\n  \"i18nModules\": []\n}\n\nexport const normalizedLocales = [\n  {\n    \"code\": \"en_US\",\n    \"name\": \"English 🇺🇸\",\n    \"files\": [\n      {\n        \"path\": \"woonuxt_base/app/locales/en-US.json\"\n      }\n    ]\n  },\n  {\n    \"code\": \"de_DE\",\n    \"name\": \"Deutsch 🇩🇪\",\n    \"files\": [\n      {\n        \"path\": \"woonuxt_base/app/locales/de-DE.json\"\n      }\n    ]\n  },\n  {\n    \"code\": \"es_ES\",\n    \"name\": \"Español 🇪🇸\",\n    \"files\": [\n      {\n        \"path\": \"woonuxt_base/app/locales/es-ES.json\"\n      }\n    ]\n  },\n  {\n    \"code\": \"fr_FR\",\n    \"name\": \"Français 🇫🇷\",\n    \"files\": [\n      {\n        \"path\": \"woonuxt_base/app/locales/fr-FR.json\"\n      }\n    ]\n  },\n  {\n    \"code\": \"it_IT\",\n    \"name\": \"Italiano 🇮🇹\",\n    \"files\": [\n      {\n        \"path\": \"woonuxt_base/app/locales/it-IT.json\"\n      }\n    ]\n  },\n  {\n    \"code\": \"pt_BR\",\n    \"name\": \"Português 🇧🇷\",\n    \"files\": [\n      {\n        \"path\": \"woonuxt_base/app/locales/pt-BR.json\"\n      }\n    ]\n  }\n]\n\nexport const NUXT_I18N_MODULE_ID = \"@nuxtjs/i18n\"\nexport const parallelPlugin = false\nexport const isSSG = true\n\nexport const DEFAULT_DYNAMIC_PARAMS_KEY = \"nuxtI18n\"\nexport const DEFAULT_COOKIE_KEY = \"i18n_redirected\"\nexport const SWITCH_LOCALE_PATH_LINK_IDENTIFIER = \"nuxt-i18n-slp\"\n","import { deepCopy, isFunction, isArray, isObject, isString } from \"@intlify/shared\";\nconst cacheMessages = /* @__PURE__ */ new Map();\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\n  const vueI18nOptions = { messages: {} };\n  for (const configFile of vueI18nConfigs) {\n    const { default: resolver } = await configFile();\n    const resolved = typeof resolver === \"function\" ? await nuxt.runWithContext(async () => await resolver()) : resolver;\n    deepCopy(resolved, vueI18nOptions);\n  }\n  return vueI18nOptions;\n}\nexport function makeFallbackLocaleCodes(fallback, locales) {\n  let fallbackLocales = [];\n  if (isArray(fallback)) {\n    fallbackLocales = fallback;\n  } else if (isObject(fallback)) {\n    const targets = [...locales, \"default\"];\n    for (const locale of targets) {\n      if (fallback[locale]) {\n        fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\n      }\n    }\n  } else if (isString(fallback) && locales.every((locale) => locale !== fallback)) {\n    fallbackLocales.push(fallback);\n  }\n  return fallbackLocales;\n}\nexport async function loadInitialMessages(messages, localeLoaders, options) {\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\n  if (lazy && fallbackLocale) {\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  }\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  return messages;\n}\nasync function loadMessage(locale, { key, load }) {\n  let message = null;\n  try {\n    __DEBUG__ && console.log(\"loadMessage: (locale) -\", locale);\n    const getter = await load().then((r) => r.default || r);\n    if (isFunction(getter)) {\n      message = await getter(locale);\n      __DEBUG__ && console.log(\"loadMessage: dynamic load\", message);\n    } else {\n      message = getter;\n      if (message != null && cacheMessages) {\n        cacheMessages.set(key, message);\n      }\n      __DEBUG__ && console.log(\"loadMessage: load\", message);\n    }\n  } catch (e) {\n    console.error(\"Failed locale loading: \" + e.message);\n  }\n  return message;\n}\nexport async function loadLocale(locale, localeLoaders, setter) {\n  const loaders = localeLoaders[locale];\n  if (loaders == null) {\n    console.warn(\"Could not find messages for locale code: \" + locale);\n    return;\n  }\n  const targetMessage = {};\n  for (const loader of loaders) {\n    let message = null;\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\n      __DEBUG__ && console.log(loader.key + \" is already loaded\");\n      message = cacheMessages.get(loader.key);\n    } else {\n      __DEBUG__ && !loader.cache && console.log(loader.key + \" bypassing cache!\");\n      __DEBUG__ && console.log(loader.key + \" is loading ...\");\n      message = await loadMessage(locale, loader);\n    }\n    if (message != null) {\n      deepCopy(message, targetMessage);\n    }\n  }\n  setter(locale, targetMessage);\n}\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages) {\n  const setter = (locale2, message) => {\n    const base = messages[locale2] || {};\n    deepCopy(message, base);\n    messages[locale2] = base;\n  };\n  await loadLocale(locale, localeLoaders, setter);\n}\n","export function toArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n","import { setResponseStatus as _setResponseStatus, appendHeader, getRequestHeader, getRequestHeaders } from \"h3\";\nimport { getCurrentInstance } from \"vue\";\nimport { useServerHead } from \"@unhead/vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nexport function useRequestEvent(nuxtApp = useNuxtApp()) {\n  return nuxtApp.ssrContext?.event;\n}\nexport function useRequestHeaders(include) {\n  if (import.meta.client) {\n    return {};\n  }\n  const event = useRequestEvent();\n  const _headers = event ? getRequestHeaders(event) : {};\n  if (!include || !event) {\n    return _headers;\n  }\n  const headers = /* @__PURE__ */ Object.create(null);\n  for (const _key of include) {\n    const key = _key.toLowerCase();\n    const header = _headers[key];\n    if (header) {\n      headers[key] = header;\n    }\n  }\n  return headers;\n}\nexport function useRequestHeader(header) {\n  if (import.meta.client) {\n    return void 0;\n  }\n  const event = useRequestEvent();\n  return event ? getRequestHeader(event, header) : void 0;\n}\nexport function useRequestFetch() {\n  if (import.meta.client) {\n    return globalThis.$fetch;\n  }\n  return useRequestEvent()?.$fetch || globalThis.$fetch;\n}\nexport function setResponseStatus(arg1, arg2, arg3) {\n  if (import.meta.client) {\n    return;\n  }\n  if (arg1 && typeof arg1 !== \"number\") {\n    return _setResponseStatus(arg1, arg2, arg3);\n  }\n  const event = useRequestEvent();\n  if (event) {\n    return _setResponseStatus(event, arg1, arg2);\n  }\n}\nexport function prerenderRoutes(path) {\n  if (!import.meta.server || !import.meta.prerender) {\n    return;\n  }\n  const paths = toArray(path);\n  appendHeader(useRequestEvent(), \"x-nitro-prerender\", paths.map((p) => encodeURIComponent(p)).join(\", \"));\n}\nconst PREHYDRATE_ATTR_KEY = \"data-prehydrate-id\";\nexport function onPrehydrate(callback, key) {\n  if (import.meta.client) {\n    return;\n  }\n  if (typeof callback !== \"string\") {\n    throw new TypeError(\"[nuxt] To transform a callback into a string, `onPrehydrate` must be processed by the Nuxt build pipeline. If it is called in a third-party library, make sure to add the library to `build.transpile`.\");\n  }\n  const vm = getCurrentInstance();\n  if (vm && key) {\n    vm.attrs[PREHYDRATE_ATTR_KEY] ||= \"\";\n    key = \":\" + key + \":\";\n    if (!vm.attrs[PREHYDRATE_ATTR_KEY].includes(key)) {\n      vm.attrs[PREHYDRATE_ATTR_KEY] += key;\n    }\n  }\n  const code = vm && key ? `document.querySelectorAll('[${PREHYDRATE_ATTR_KEY}*=${JSON.stringify(key)}]').forEach` + callback : callback + \"()\";\n  useServerHead({\n    script: [{\n      key: vm && key ? key : code,\n      tagPosition: \"bodyClose\",\n      tagPriority: \"critical\",\n      innerHTML: code\n    }]\n  });\n  return vm && key ? vm.attrs[PREHYDRATE_ATTR_KEY] : void 0;\n}\n","import { customRef, getCurrentScope, nextTick, onScopeDispose, ref, watch } from \"vue\";\nimport { parse, serialize } from \"cookie-es\";\nimport { deleteCookie, getCookie, getRequestHeader, setCookie } from \"h3\";\nimport destr from \"destr\";\nimport { isEqual } from \"ohash\";\nimport { klona } from \"klona\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { useRequestEvent } from \"./ssr.js\";\nimport { cookieStore } from \"#build/nuxt.config.mjs\";\nconst CookieDefaults = {\n  path: \"/\",\n  watch: true,\n  decode: (val) => destr(decodeURIComponent(val)),\n  encode: (val) => encodeURIComponent(typeof val === \"string\" ? val : JSON.stringify(val))\n};\nconst store = import.meta.client && cookieStore ? window.cookieStore : void 0;\nexport function useCookie(name, _opts) {\n  const opts = { ...CookieDefaults, ..._opts };\n  const cookies = readRawCookies(opts) || {};\n  let delay;\n  if (opts.maxAge !== void 0) {\n    delay = opts.maxAge * 1e3;\n  } else if (opts.expires) {\n    delay = opts.expires.getTime() - Date.now();\n  }\n  const hasExpired = delay !== void 0 && delay <= 0;\n  const cookieValue = klona(hasExpired ? void 0 : cookies[name] ?? opts.default?.());\n  const cookie = import.meta.client && delay && !hasExpired ? cookieRef(cookieValue, delay, opts.watch && opts.watch !== \"shallow\") : ref(cookieValue);\n  if (import.meta.dev && hasExpired) {\n    console.warn(`[nuxt] not setting cookie \\`${name}\\` as it has already expired.`);\n  }\n  if (import.meta.client) {\n    let channel = null;\n    try {\n      if (!store && typeof BroadcastChannel !== \"undefined\") {\n        channel = new BroadcastChannel(`nuxt:cookies:${name}`);\n      }\n    } catch {\n    }\n    const callback = () => {\n      if (opts.readonly || isEqual(cookie.value, cookies[name])) {\n        return;\n      }\n      writeClientCookie(name, cookie.value, opts);\n      cookies[name] = klona(cookie.value);\n      channel?.postMessage({ value: opts.encode(cookie.value) });\n    };\n    const handleChange = (data) => {\n      const value = data.refresh ? readRawCookies(opts)?.[name] : opts.decode(data.value);\n      watchPaused = true;\n      cookie.value = value;\n      cookies[name] = klona(value);\n      nextTick(() => {\n        watchPaused = false;\n      });\n    };\n    let watchPaused = false;\n    const hasScope = !!getCurrentScope();\n    if (hasScope) {\n      onScopeDispose(() => {\n        watchPaused = true;\n        callback();\n        channel?.close();\n      });\n    }\n    if (store) {\n      const changeHandler = (event) => {\n        const cookie2 = event.changed.find((c) => c.name === name);\n        if (cookie2) {\n          handleChange({ value: cookie2.value });\n        }\n      };\n      store.addEventListener(\"change\", changeHandler);\n      if (hasScope) {\n        onScopeDispose(() => store.removeEventListener(\"change\", changeHandler));\n      }\n    } else if (channel) {\n      channel.onmessage = ({ data }) => handleChange(data);\n    }\n    if (opts.watch) {\n      watch(\n        cookie,\n        () => {\n          if (watchPaused) {\n            return;\n          }\n          callback();\n        },\n        { deep: opts.watch !== \"shallow\" }\n      );\n    } else {\n      callback();\n    }\n  } else if (import.meta.server) {\n    const nuxtApp = useNuxtApp();\n    const writeFinalCookieValue = () => {\n      if (opts.readonly || isEqual(cookie.value, cookies[name])) {\n        return;\n      }\n      nuxtApp._cookies ||= {};\n      if (name in nuxtApp._cookies) {\n        if (isEqual(cookie.value, nuxtApp._cookies[name])) {\n          return;\n        }\n        if (import.meta.dev) {\n          console.warn(`[nuxt] cookie \\`${name}\\` was previously set to \\`${opts.encode(nuxtApp._cookies[name])}\\` and is being overridden to \\`${opts.encode(cookie.value)}\\`. This may cause unexpected issues.`);\n        }\n      }\n      nuxtApp._cookies[name] = cookie.value;\n      writeServerCookie(useRequestEvent(nuxtApp), name, cookie.value, opts);\n    };\n    const unhook = nuxtApp.hooks.hookOnce(\"app:rendered\", writeFinalCookieValue);\n    nuxtApp.hooks.hookOnce(\"app:error\", () => {\n      unhook();\n      return writeFinalCookieValue();\n    });\n  }\n  return cookie;\n}\nexport function refreshCookie(name) {\n  if (import.meta.server || store || typeof BroadcastChannel === \"undefined\") {\n    return;\n  }\n  new BroadcastChannel(`nuxt:cookies:${name}`)?.postMessage({ refresh: true });\n}\nfunction readRawCookies(opts = {}) {\n  if (import.meta.server) {\n    return parse(getRequestHeader(useRequestEvent(), \"cookie\") || \"\", opts);\n  } else if (import.meta.client) {\n    return parse(document.cookie, opts);\n  }\n}\nfunction serializeCookie(name, value, opts = {}) {\n  if (value === null || value === void 0) {\n    return serialize(name, value, { ...opts, maxAge: -1 });\n  }\n  return serialize(name, value, opts);\n}\nfunction writeClientCookie(name, value, opts = {}) {\n  if (import.meta.client) {\n    document.cookie = serializeCookie(name, value, opts);\n  }\n}\nfunction writeServerCookie(event, name, value, opts = {}) {\n  if (event) {\n    if (value !== null && value !== void 0) {\n      return setCookie(event, name, value, opts);\n    }\n    if (getCookie(event, name) !== void 0) {\n      return deleteCookie(event, name, opts);\n    }\n  }\n}\nconst MAX_TIMEOUT_DELAY = 2147483647;\nfunction cookieRef(value, delay, shouldWatch) {\n  let timeout;\n  let unsubscribe;\n  let elapsed = 0;\n  const internalRef = shouldWatch ? ref(value) : { value };\n  if (getCurrentScope()) {\n    onScopeDispose(() => {\n      unsubscribe?.();\n      clearTimeout(timeout);\n    });\n  }\n  return customRef((track, trigger) => {\n    if (shouldWatch) {\n      unsubscribe = watch(internalRef, trigger);\n    }\n    function createExpirationTimeout() {\n      elapsed = 0;\n      clearTimeout(timeout);\n      const timeRemaining = delay - elapsed;\n      const timeoutLength = timeRemaining < MAX_TIMEOUT_DELAY ? timeRemaining : MAX_TIMEOUT_DELAY;\n      timeout = setTimeout(() => {\n        elapsed += timeoutLength;\n        if (elapsed < delay) {\n          return createExpirationTimeout();\n        }\n        internalRef.value = void 0;\n        trigger();\n      }, timeoutLength);\n    }\n    return {\n      get() {\n        track();\n        return internalRef.value;\n      },\n      set(newValue) {\n        createExpirationTimeout();\n        internalRef.value = newValue;\n        trigger();\n      }\n    };\n  });\n}\n","function isHTTPS(req, trustProxy = true) {\n  const _xForwardedProto = trustProxy && req.headers ? req.headers[\"x-forwarded-proto\"] : void 0;\n  const protoCheck = typeof _xForwardedProto === \"string\" ? _xForwardedProto.includes(\"https\") : void 0;\n  if (protoCheck) {\n    return true;\n  }\n  const _encrypted = req.connection ? req.connection.encrypted : void 0;\n  const encryptedCheck = _encrypted !== void 0 ? _encrypted === true : void 0;\n  if (encryptedCheck) {\n    return true;\n  }\n  if (protoCheck === void 0 && encryptedCheck === void 0) {\n    return void 0;\n  }\n  return false;\n}\n\nexport default isHTTPS;\n","import { isString, isSymbol, isFunction } from \"@intlify/shared\";\nimport { isRef, unref } from \"#imports\";\nexport const inBrowser = typeof window !== \"undefined\";\nexport function getNormalizedLocales(locales) {\n  locales = locales || [];\n  const normalized = [];\n  for (const locale of locales) {\n    if (isString(locale)) {\n      normalized.push({ code: locale });\n    } else {\n      normalized.push(locale);\n    }\n  }\n  return normalized;\n}\nfunction isI18nInstance(i18n) {\n  return i18n != null && \"global\" in i18n && \"mode\" in i18n;\n}\nfunction isComposer(target) {\n  return target != null && !(\"__composer\" in target) && \"locale\" in target && isRef(target.locale);\n}\nexport function isVueI18n(target) {\n  return target != null && \"__composer\" in target;\n}\nexport function getI18nTarget(i18n) {\n  return isI18nInstance(i18n) ? i18n.global : i18n;\n}\nexport function getComposer(i18n) {\n  const target = getI18nTarget(i18n);\n  if (isComposer(target))\n    return target;\n  if (isVueI18n(target))\n    return target.__composer;\n  return target;\n}\nexport function getLocale(i18n) {\n  return unref(getI18nTarget(i18n).locale);\n}\nexport function getLocales(i18n) {\n  return unref(getI18nTarget(i18n).locales);\n}\nexport function getLocaleCodes(i18n) {\n  return unref(getI18nTarget(i18n).localeCodes);\n}\nexport function setLocale(i18n, locale) {\n  const target = getI18nTarget(i18n);\n  if (isRef(target.locale)) {\n    target.locale.value = locale;\n  } else {\n    target.locale = locale;\n  }\n}\nexport function adjustRoutePathForTrailingSlash(pagePath, trailingSlash, isChildWithRelativePath) {\n  return pagePath.replace(/\\/+$/, \"\") + (trailingSlash ? \"/\" : \"\") || (isChildWithRelativePath ? \"\" : \"/\");\n}\nexport function getRouteName(routeName) {\n  if (isString(routeName))\n    return routeName;\n  if (isSymbol(routeName))\n    return routeName.toString();\n  return \"(null)\";\n}\nexport function getLocaleRouteName(routeName, locale, {\n  defaultLocale,\n  strategy,\n  routesNameSeparator,\n  defaultLocaleRouteNameSuffix\n}) {\n  let name = getRouteName(routeName) + (strategy === \"no_prefix\" ? \"\" : routesNameSeparator + locale);\n  if (locale === defaultLocale && strategy === \"prefix_and_default\") {\n    name += routesNameSeparator + defaultLocaleRouteNameSuffix;\n  }\n  return name;\n}\nexport function resolveBaseUrl(baseUrl, context) {\n  if (isFunction(baseUrl)) {\n    return baseUrl(context);\n  }\n  return baseUrl;\n}\nfunction matchBrowserLocale(locales, browserLocales) {\n  const matchedLocales = [];\n  for (const [index, browserCode] of browserLocales.entries()) {\n    const matchedLocale = locales.find((l) => l.iso.toLowerCase() === browserCode.toLowerCase());\n    if (matchedLocale) {\n      matchedLocales.push({ code: matchedLocale.code, score: 1 - index / browserLocales.length });\n      break;\n    }\n  }\n  for (const [index, browserCode] of browserLocales.entries()) {\n    const languageCode = browserCode.split(\"-\")[0].toLowerCase();\n    const matchedLocale = locales.find((l) => l.iso.split(\"-\")[0].toLowerCase() === languageCode);\n    if (matchedLocale) {\n      matchedLocales.push({ code: matchedLocale.code, score: 0.999 - index / browserLocales.length });\n      break;\n    }\n  }\n  return matchedLocales;\n}\nexport const DefaultBrowserLocaleMatcher = matchBrowserLocale;\nfunction compareBrowserLocale(a, b) {\n  if (a.score === b.score) {\n    return b.code.length - a.code.length;\n  }\n  return b.score - a.score;\n}\nexport const DefaultBrowerLocaleComparer = compareBrowserLocale;\nexport function findBrowserLocale(locales, browserLocales, { matcher = DefaultBrowserLocaleMatcher, comparer = DefaultBrowerLocaleComparer } = {}) {\n  const normalizedLocales = [];\n  for (const l of locales) {\n    const { code } = l;\n    const iso = l.iso || code;\n    normalizedLocales.push({ code, iso });\n  }\n  const matchedLocales = matcher(normalizedLocales, browserLocales);\n  if (matchedLocales.length > 1) {\n    matchedLocales.sort(comparer);\n  }\n  return matchedLocales.length ? matchedLocales[0].code : \"\";\n}\nexport function getLocalesRegex(localeCodes) {\n  return new RegExp(`^/(${localeCodes.join(\"|\")})(?:/|$)`, \"i\");\n}\n","import { isRef, toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nconst useStateKeyPrefix = \"$s\";\nexport function useState(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [_key, init] = args;\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useState] key must be a string: \" + _key);\n  }\n  if (init !== void 0 && typeof init !== \"function\") {\n    throw new Error(\"[nuxt] [useState] init must be a function: \" + init);\n  }\n  const key = useStateKeyPrefix + _key;\n  const nuxtApp = useNuxtApp();\n  const state = toRef(nuxtApp.payload.state, key);\n  if (state.value === void 0 && init) {\n    const initialValue = init();\n    if (isRef(initialValue)) {\n      nuxtApp.payload.state[key] = initialValue;\n      return initialValue;\n    }\n    state.value = initialValue;\n  }\n  return state;\n}\nexport function clearNuxtState(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.state).map((key) => key.substring(useStateKeyPrefix.length));\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const _key of _keys) {\n    const key = useStateKeyPrefix + _key;\n    if (key in nuxtApp.payload.state) {\n      nuxtApp.payload.state[key] = void 0;\n    }\n  }\n}\n","import { assign } from \"@intlify/shared\";\nfunction split(str, index) {\n  const result = [str.slice(0, index), str.slice(index)];\n  return result;\n}\nexport function routeToObject(route) {\n  const { fullPath, query, hash, name, path, params, meta, redirectedFrom, matched } = route;\n  return {\n    fullPath,\n    params,\n    query,\n    hash,\n    name,\n    path,\n    meta,\n    matched,\n    redirectedFrom\n  };\n}\nexport function resolve({ router }, route, strategy, locale) {\n  if (strategy !== \"prefix\") {\n    return router.resolve(route);\n  }\n  const [rootSlash, restPath] = split(route.path, 1);\n  const targetPath = `${rootSlash}${locale}${restPath === \"\" ? restPath : `/${restPath}`}`;\n  const _route = router.options?.routes?.find((r) => r.path === targetPath);\n  if (_route == null) {\n    return route;\n  }\n  const _resolvableRoute = assign({}, route, _route);\n  _resolvableRoute.path = targetPath;\n  return router.resolve(_resolvableRoute);\n}\n","import { isString, assign } from \"@intlify/shared\";\nimport { hasProtocol, parsePath, parseQuery, withTrailingSlash, withoutTrailingSlash } from \"ufo\";\nimport { DEFAULT_DYNAMIC_PARAMS_KEY } from \"#build/i18n.options.mjs\";\nimport { unref } from \"#imports\";\nimport { resolve, routeToObject } from \"./utils.mjs\";\nimport { getLocale, getLocaleRouteName, getRouteName } from \"../utils.mjs\";\nimport { extendPrefixable, extendSwitchLocalePathIntercepter } from \"../../utils.mjs\";\nconst RESOLVED_PREFIXED = /* @__PURE__ */ new Set([\"prefix_and_default\", \"prefix_except_default\"]);\nfunction prefixable(options) {\n  const { currentLocale, defaultLocale, strategy } = options;\n  const isDefaultLocale = currentLocale === defaultLocale;\n  return !(isDefaultLocale && RESOLVED_PREFIXED.has(strategy)) && // no prefix for any language\n  !(strategy === \"no_prefix\");\n}\nexport const DefaultPrefixable = prefixable;\nexport function getRouteBaseName(common, givenRoute) {\n  const { routesNameSeparator } = common.runtimeConfig.public.i18n;\n  const route = unref(givenRoute);\n  if (route == null || !route.name) {\n    return;\n  }\n  const name = getRouteName(route.name);\n  return name.split(routesNameSeparator)[0];\n}\nexport function localePath(common, route, locale) {\n  if (typeof route === \"string\" && hasProtocol(route, { acceptRelative: true })) {\n    return route;\n  }\n  const localizedRoute = resolveRoute(common, route, locale);\n  return localizedRoute == null ? \"\" : localizedRoute.redirectedFrom?.fullPath || localizedRoute.fullPath;\n}\nexport function localeRoute(common, route, locale) {\n  const resolved = resolveRoute(common, route, locale);\n  return resolved ?? void 0;\n}\nexport function localeLocation(common, route, locale) {\n  const resolved = resolveRoute(common, route, locale);\n  return resolved ?? void 0;\n}\nexport function resolveRoute(common, route, locale) {\n  const { router, i18n } = common;\n  const _locale = locale || getLocale(i18n);\n  const { routesNameSeparator, defaultLocale, defaultLocaleRouteNameSuffix, strategy, trailingSlash } = common.runtimeConfig.public.i18n;\n  const prefixable2 = extendPrefixable(common.runtimeConfig);\n  let _route;\n  if (isString(route)) {\n    if (route[0] === \"/\") {\n      const { pathname: path, search, hash } = parsePath(route);\n      const query = parseQuery(search);\n      _route = { path, query, hash };\n    } else {\n      _route = { name: route };\n    }\n  } else {\n    _route = route;\n  }\n  let localizedRoute = assign({}, _route);\n  const isRouteLocationPathRaw = (val) => \"path\" in val && !!val.path && !(\"name\" in val);\n  if (isRouteLocationPathRaw(localizedRoute)) {\n    const resolvedRoute = resolve(common, localizedRoute, strategy, _locale);\n    const resolvedRouteName = getRouteBaseName(common, resolvedRoute);\n    if (isString(resolvedRouteName)) {\n      localizedRoute = {\n        name: getLocaleRouteName(resolvedRouteName, _locale, {\n          defaultLocale,\n          strategy,\n          routesNameSeparator,\n          defaultLocaleRouteNameSuffix\n        }),\n        // @ts-ignore\n        params: resolvedRoute.params,\n        query: resolvedRoute.query,\n        hash: resolvedRoute.hash\n      };\n      localizedRoute.state = resolvedRoute.state;\n    } else {\n      if (prefixable2({ currentLocale: _locale, defaultLocale, strategy })) {\n        localizedRoute.path = `/${_locale}${localizedRoute.path}`;\n      }\n      localizedRoute.path = trailingSlash ? withTrailingSlash(localizedRoute.path, true) : withoutTrailingSlash(localizedRoute.path, true);\n    }\n  } else {\n    if (!localizedRoute.name && !(\"path\" in localizedRoute)) {\n      localizedRoute.name = getRouteBaseName(common, router.currentRoute.value);\n    }\n    localizedRoute.name = getLocaleRouteName(localizedRoute.name, _locale, {\n      defaultLocale,\n      strategy,\n      routesNameSeparator,\n      defaultLocaleRouteNameSuffix\n    });\n  }\n  try {\n    const resolvedRoute = router.resolve(localizedRoute);\n    if (resolvedRoute.name) {\n      return resolvedRoute;\n    }\n    return router.resolve(route);\n  } catch (e) {\n    if (typeof e === \"object\" && \"type\" in e && e.type === 1) {\n      return null;\n    }\n  }\n}\nexport const DefaultSwitchLocalePathIntercepter = (path) => path;\nfunction getLocalizableMetaFromDynamicParams(common, route) {\n  if (common.runtimeConfig.public.i18n.experimental.switchLocalePathLinkSSR) {\n    return unref(common.metaState.value);\n  }\n  const meta = route.meta || {};\n  return unref(meta)?.[DEFAULT_DYNAMIC_PARAMS_KEY] || {};\n}\nexport function switchLocalePath(common, locale, _route) {\n  const route = _route ?? common.router.currentRoute.value;\n  const name = getRouteBaseName(common, route);\n  if (!name) {\n    return \"\";\n  }\n  const switchLocalePathIntercepter = extendSwitchLocalePathIntercepter(common.runtimeConfig);\n  const routeCopy = routeToObject(route);\n  const resolvedParams = getLocalizableMetaFromDynamicParams(common, route)[locale];\n  const baseRoute = { ...routeCopy, name, params: { ...routeCopy.params, ...resolvedParams } };\n  const path = localePath(common, baseRoute, locale);\n  return switchLocalePathIntercepter(path, locale);\n}\n","import { unref, useNuxtApp, useRuntimeConfig } from \"#imports\";\nimport { getComposer, getLocale, getLocales, getNormalizedLocales } from \"../utils.mjs\";\nimport { getRouteBaseName, localeRoute, switchLocalePath } from \"./routing.mjs\";\nimport { isArray, isObject } from \"@intlify/shared\";\nimport { joinURL } from \"ufo\";\nexport function localeHead(common, {\n  addDirAttribute = false,\n  addSeoAttributes: seoAttributes = true,\n  identifierAttribute: idAttribute = \"hid\"\n}) {\n  const { defaultDirection } = useRuntimeConfig().public.i18n;\n  const i18n = getComposer(common.i18n);\n  const metaObject = {\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  };\n  if (unref(i18n.locales) == null || unref(i18n.baseUrl) == null) {\n    return metaObject;\n  }\n  const locale = getLocale(common.i18n);\n  const locales = getLocales(common.i18n);\n  const currentLocale = getNormalizedLocales(locales).find((l) => l.code === locale) || {\n    code: locale\n  };\n  const currentIso = currentLocale.iso;\n  const currentDir = currentLocale.dir || defaultDirection;\n  if (addDirAttribute) {\n    metaObject.htmlAttrs.dir = currentDir;\n  }\n  if (seoAttributes && locale && unref(i18n.locales)) {\n    if (currentIso) {\n      metaObject.htmlAttrs.lang = currentIso;\n    }\n    metaObject.link.push(\n      ...getHreflangLinks(common, unref(locales), idAttribute),\n      ...getCanonicalLink(common, idAttribute, seoAttributes)\n    );\n    metaObject.meta.push(\n      ...getOgUrl(common, idAttribute, seoAttributes),\n      ...getCurrentOgLocale(currentLocale, currentIso, idAttribute),\n      ...getAlternateOgLocales(unref(locales), currentIso, idAttribute)\n    );\n  }\n  return metaObject;\n}\nfunction getBaseUrl() {\n  const nuxtApp = useNuxtApp();\n  const i18n = getComposer(nuxtApp.$i18n);\n  return joinURL(unref(i18n.baseUrl), nuxtApp.$config.app.baseURL);\n}\nexport function getHreflangLinks(common, locales, idAttribute) {\n  const baseUrl = getBaseUrl();\n  const { defaultLocale, strategy } = useRuntimeConfig().public.i18n;\n  const links = [];\n  if (strategy === \"no_prefix\")\n    return links;\n  const localeMap = /* @__PURE__ */ new Map();\n  for (const locale of locales) {\n    const localeIso = locale.iso;\n    if (!localeIso) {\n      console.warn(\"Locale ISO code is required to generate alternate link\");\n      continue;\n    }\n    const [language, region] = localeIso.split(\"-\");\n    if (language && region && (locale.isCatchallLocale || !localeMap.has(language))) {\n      localeMap.set(language, locale);\n    }\n    localeMap.set(localeIso, locale);\n  }\n  for (const [iso, mapLocale] of localeMap.entries()) {\n    const localePath = switchLocalePath(common, mapLocale.code);\n    if (localePath) {\n      links.push({\n        [idAttribute]: `i18n-alt-${iso}`,\n        rel: \"alternate\",\n        href: toAbsoluteUrl(localePath, baseUrl),\n        hreflang: iso\n      });\n    }\n  }\n  if (defaultLocale) {\n    const localePath = switchLocalePath(common, defaultLocale);\n    if (localePath) {\n      links.push({\n        [idAttribute]: \"i18n-xd\",\n        rel: \"alternate\",\n        href: toAbsoluteUrl(localePath, baseUrl),\n        hreflang: \"x-default\"\n      });\n    }\n  }\n  return links;\n}\nexport function getCanonicalUrl(common, baseUrl, seoAttributes) {\n  const route = common.router.currentRoute.value;\n  const currentRoute = localeRoute(common, {\n    ...route,\n    path: void 0,\n    name: getRouteBaseName(common, route)\n  });\n  if (!currentRoute)\n    return \"\";\n  let href = toAbsoluteUrl(currentRoute.path, baseUrl);\n  const canonicalQueries = isObject(seoAttributes) && seoAttributes.canonicalQueries || [];\n  const currentRouteQueryParams = currentRoute.query;\n  const params = new URLSearchParams();\n  for (const queryParamName of canonicalQueries) {\n    if (queryParamName in currentRouteQueryParams) {\n      const queryParamValue = currentRouteQueryParams[queryParamName];\n      if (isArray(queryParamValue)) {\n        queryParamValue.forEach((v) => params.append(queryParamName, v || \"\"));\n      } else {\n        params.append(queryParamName, queryParamValue || \"\");\n      }\n    }\n  }\n  const queryString = params.toString();\n  if (queryString) {\n    href = `${href}?${queryString}`;\n  }\n  return href;\n}\nexport function getCanonicalLink(common, idAttribute, seoAttributes) {\n  const baseUrl = getBaseUrl();\n  const href = getCanonicalUrl(common, baseUrl, seoAttributes);\n  if (!href)\n    return [];\n  return [{ [idAttribute]: \"i18n-can\", rel: \"canonical\", href }];\n}\nexport function getOgUrl(common, idAttribute, seoAttributes) {\n  const baseUrl = getBaseUrl();\n  const href = getCanonicalUrl(common, baseUrl, seoAttributes);\n  if (!href)\n    return [];\n  return [{ [idAttribute]: \"i18n-og-url\", property: \"og:url\", content: href }];\n}\nexport function getCurrentOgLocale(currentLocale, currentIso, idAttribute) {\n  if (!currentLocale || !currentIso)\n    return [];\n  return [{ [idAttribute]: \"i18n-og\", property: \"og:locale\", content: hypenToUnderscore(currentIso) }];\n}\nexport function getAlternateOgLocales(locales, currentIso, idAttribute) {\n  const alternateLocales = locales.filter((locale) => locale.iso && locale.iso !== currentIso);\n  return alternateLocales.map((locale) => ({\n    [idAttribute]: `i18n-og-alt-${locale.iso}`,\n    property: \"og:locale:alternate\",\n    content: hypenToUnderscore(locale.iso)\n  }));\n}\nfunction hypenToUnderscore(str) {\n  return (str || \"\").replace(/-/g, \"_\");\n}\nfunction toAbsoluteUrl(urlOrPath, baseUrl) {\n  if (urlOrPath.match(/^https?:\\/\\//))\n    return urlOrPath;\n  return joinURL(baseUrl, urlOrPath);\n}\n","import { joinURL, isEqual } from \"ufo\";\nimport { isString, isFunction, isObject } from \"@intlify/shared\";\nimport { navigateTo, useNuxtApp, useRouter, useRuntimeConfig, useState } from \"#imports\";\nimport {\n  NUXT_I18N_MODULE_ID,\n  isSSG,\n  localeLoaders,\n  normalizedLocales\n} from \"#build/i18n.options.mjs\";\nimport {\n  wrapComposable,\n  detectBrowserLanguage,\n  callVueI18nInterfaces,\n  getVueI18nPropertyValue,\n  defineGetter,\n  getLocaleDomain,\n  getDomainFromLocale,\n  DefaultDetectBrowserLanguageFromResult,\n  runtimeDetectBrowserLanguage\n} from \"./internal.mjs\";\nimport { loadLocale, makeFallbackLocaleCodes } from \"./messages.mjs\";\nimport {\n  localeHead,\n  localePath,\n  localeRoute,\n  getRouteBaseName,\n  switchLocalePath,\n  DefaultPrefixable,\n  DefaultSwitchLocalePathIntercepter\n} from \"./routing/compatibles/index.mjs\";\nimport { getLocale, setLocale, getLocaleCodes, getI18nTarget } from \"./routing/utils.mjs\";\nexport function _setLocale(i18n, locale) {\n  return callVueI18nInterfaces(i18n, \"setLocale\", locale);\n}\nexport function setCookieLocale(i18n, locale) {\n  return callVueI18nInterfaces(i18n, \"setLocaleCookie\", locale);\n}\nexport function setLocaleMessage(i18n, locale, messages) {\n  return callVueI18nInterfaces(i18n, \"setLocaleMessage\", locale, messages);\n}\nexport function mergeLocaleMessage(i18n, locale, messages) {\n  return callVueI18nInterfaces(i18n, \"mergeLocaleMessage\", locale, messages);\n}\nfunction onBeforeLanguageSwitch(i18n, oldLocale, newLocale, initial, context) {\n  return callVueI18nInterfaces(i18n, \"onBeforeLanguageSwitch\", oldLocale, newLocale, initial, context);\n}\nexport function onLanguageSwitched(i18n, oldLocale, newLocale) {\n  return callVueI18nInterfaces(i18n, \"onLanguageSwitched\", oldLocale, newLocale);\n}\nexport async function finalizePendingLocaleChange(i18n) {\n  return callVueI18nInterfaces(i18n, \"finalizePendingLocaleChange\");\n}\nexport function initCommonComposableOptions(i18n) {\n  return {\n    i18n: i18n ?? useNuxtApp().$i18n,\n    router: useRouter(),\n    runtimeConfig: useRuntimeConfig(),\n    metaState: useState(\"nuxt-i18n-meta\", () => ({}))\n  };\n}\nexport async function loadAndSetLocale(newLocale, i18n, runtimeI18n, initial = false) {\n  const { differentDomains, skipSettingLocaleOnNavigate, lazy } = runtimeI18n;\n  const opts = runtimeDetectBrowserLanguage(runtimeI18n);\n  const nuxtApp = useNuxtApp();\n  const oldLocale = getLocale(i18n);\n  const localeCodes = getLocaleCodes(i18n);\n  function syncCookie(locale = oldLocale) {\n    if (opts === false || !opts.useCookie)\n      return;\n    if (skipSettingLocaleOnNavigate)\n      return;\n    setCookieLocale(i18n, locale);\n  }\n  __DEBUG__ && console.log(\"setLocale: new -> \", newLocale, \" old -> \", oldLocale, \" initial -> \", initial);\n  if (!newLocale) {\n    syncCookie();\n    return false;\n  }\n  if (!initial && differentDomains) {\n    syncCookie();\n    return false;\n  }\n  if (oldLocale === newLocale) {\n    syncCookie();\n    return false;\n  }\n  const localeOverride = await onBeforeLanguageSwitch(i18n, oldLocale, newLocale, initial, nuxtApp);\n  if (localeOverride && localeCodes.includes(localeOverride)) {\n    if (oldLocale === localeOverride) {\n      syncCookie();\n      return false;\n    }\n    newLocale = localeOverride;\n  }\n  if (lazy) {\n    const i18nFallbackLocales = getVueI18nPropertyValue(i18n, \"fallbackLocale\");\n    const setter = (locale, message) => mergeLocaleMessage(i18n, locale, message);\n    if (i18nFallbackLocales) {\n      const fallbackLocales = makeFallbackLocaleCodes(i18nFallbackLocales, [newLocale]);\n      await Promise.all(fallbackLocales.map((locale) => loadLocale(locale, localeLoaders, setter)));\n    }\n    await loadLocale(newLocale, localeLoaders, setter);\n  }\n  if (skipSettingLocaleOnNavigate) {\n    return false;\n  }\n  syncCookie(newLocale);\n  setLocale(i18n, newLocale);\n  await onLanguageSwitched(i18n, oldLocale, newLocale);\n  return true;\n}\nexport function detectLocale(route, routeLocaleGetter, vueI18nOptionsLocale, initialLocaleLoader, detectLocaleContext, runtimeI18n) {\n  const { strategy, defaultLocale, differentDomains } = runtimeI18n;\n  const _detectBrowserLanguage = runtimeDetectBrowserLanguage(runtimeI18n);\n  const initialLocale = isFunction(initialLocaleLoader) ? initialLocaleLoader() : initialLocaleLoader;\n  __DEBUG__ && console.log(\"detectLocale: initialLocale -\", initialLocale);\n  const { ssg, callType, firstAccess, localeCookie } = detectLocaleContext;\n  __DEBUG__ && console.log(\"detectLocale: (ssg, callType, firstAccess) - \", ssg, callType, firstAccess);\n  const {\n    locale: browserLocale,\n    stat,\n    reason,\n    from\n  } = _detectBrowserLanguage ? detectBrowserLanguage(route, vueI18nOptionsLocale, detectLocaleContext, initialLocale) : DefaultDetectBrowserLanguageFromResult;\n  __DEBUG__ && console.log(\n    \"detectLocale: detectBrowserLanguage (browserLocale, stat, reason, from) -\",\n    browserLocale,\n    stat,\n    reason,\n    from\n  );\n  if (reason === \"detect_ignore_on_ssg\") {\n    return initialLocale;\n  }\n  if ((from === \"navigator_or_header\" || from === \"cookie\" || from === \"fallback\") && browserLocale) {\n    return browserLocale;\n  }\n  let finalLocale = browserLocale;\n  __DEBUG__ && console.log(\"detectLocale: finaleLocale first (finaleLocale, strategy) -\", finalLocale, strategy);\n  if (!finalLocale) {\n    if (differentDomains) {\n      finalLocale = getLocaleDomain(normalizedLocales, strategy, route);\n    } else if (strategy !== \"no_prefix\") {\n      finalLocale = routeLocaleGetter(route);\n    } else {\n      if (!_detectBrowserLanguage) {\n        finalLocale = initialLocale;\n      }\n    }\n  }\n  __DEBUG__ && console.log(\n    \"detectLocale: finaleLocale second (finaleLocale, detectBrowserLanguage) -\",\n    finalLocale,\n    _detectBrowserLanguage\n  );\n  if (!finalLocale && _detectBrowserLanguage && _detectBrowserLanguage.useCookie) {\n    finalLocale = localeCookie || \"\";\n  }\n  __DEBUG__ && console.log(\"detectLocale: finalLocale last (finalLocale, defaultLocale) -\", finalLocale, defaultLocale);\n  if (!finalLocale) {\n    finalLocale = defaultLocale || \"\";\n  }\n  __DEBUG__ && console.log(\"detectLocale: finalLocale -\", finalLocale);\n  return finalLocale;\n}\nexport function detectRedirect({\n  route,\n  targetLocale,\n  routeLocaleGetter,\n  calledWithRouting = false\n}) {\n  const nuxtApp = useNuxtApp();\n  const common = initCommonComposableOptions();\n  const { strategy, differentDomains } = common.runtimeConfig.public.i18n;\n  __DEBUG__ && console.log(\"detectRedirect: targetLocale -> \", targetLocale);\n  __DEBUG__ && console.log(\"detectRedirect: route -> \", route);\n  __DEBUG__ && console.log(\"detectRedirect: calledWithRouting -> \", calledWithRouting, routeLocaleGetter(route.to));\n  let redirectPath = \"\";\n  const { fullPath: toFullPath } = route.to;\n  const isStaticGenerate = isSSG && import.meta.server;\n  if (!isStaticGenerate && !differentDomains && (calledWithRouting || strategy !== \"no_prefix\") && routeLocaleGetter(route.to) !== targetLocale) {\n    const routePath = nuxtApp.$switchLocalePath(targetLocale) || nuxtApp.$localePath(toFullPath, targetLocale);\n    __DEBUG__ && console.log(\"detectRedirect: calculate routePath -> \", routePath, toFullPath);\n    if (isString(routePath) && routePath && !isEqual(routePath, toFullPath) && !routePath.startsWith(\"//\")) {\n      redirectPath = !(route.from && route.from.fullPath === routePath) ? routePath : \"\";\n    }\n  }\n  if ((differentDomains || isSSG && import.meta.client) && routeLocaleGetter(route.to) !== targetLocale) {\n    const routePath = switchLocalePath(common, targetLocale, route.to);\n    __DEBUG__ && console.log(\"detectRedirect: calculate domain or ssg routePath -> \", routePath);\n    if (isString(routePath) && routePath && !isEqual(routePath, toFullPath) && !routePath.startsWith(\"//\")) {\n      redirectPath = routePath;\n    }\n  }\n  return redirectPath;\n}\nfunction isRootRedirectOptions(rootRedirect) {\n  return isObject(rootRedirect) && \"path\" in rootRedirect && \"statusCode\" in rootRedirect;\n}\nconst useRedirectState = () => useState(NUXT_I18N_MODULE_ID + \":redirect\", () => \"\");\nfunction _navigate(redirectPath, status) {\n  return navigateTo(redirectPath, { redirectCode: status });\n}\nexport async function navigate(args, { status = 302, enableNavigate = false } = {}) {\n  const { nuxtApp, i18n, locale, route } = args;\n  const { rootRedirect, differentDomains, skipSettingLocaleOnNavigate } = nuxtApp.$config.public.i18n;\n  let { redirectPath } = args;\n  __DEBUG__ && console.log(\n    \"navigate options \",\n    status,\n    rootRedirect,\n    differentDomains,\n    skipSettingLocaleOnNavigate,\n    enableNavigate\n  );\n  __DEBUG__ && console.log(\"navigate isSSG\", isSSG);\n  if (route.path === \"/\" && rootRedirect) {\n    if (isString(rootRedirect)) {\n      redirectPath = \"/\" + rootRedirect;\n    } else if (isRootRedirectOptions(rootRedirect)) {\n      redirectPath = \"/\" + rootRedirect.path;\n      status = rootRedirect.statusCode;\n    }\n    redirectPath = nuxtApp.$localePath(redirectPath, locale);\n    __DEBUG__ && console.log(\"navigate: rootRedirect mode redirectPath -> \", redirectPath, \" status -> \", status);\n    return _navigate(redirectPath, status);\n  }\n  if (import.meta.client && skipSettingLocaleOnNavigate) {\n    i18n.__pendingLocale = locale;\n    i18n.__pendingLocalePromise = new Promise((resolve) => {\n      i18n.__resolvePendingLocalePromise = resolve;\n    });\n    if (!enableNavigate) {\n      return;\n    }\n  }\n  if (!differentDomains) {\n    if (redirectPath) {\n      return _navigate(redirectPath, status);\n    }\n  } else {\n    const state = useRedirectState();\n    __DEBUG__ && console.log(\"redirect state ->\", state.value, \"redirectPath -> \", redirectPath);\n    if (state.value && state.value !== redirectPath) {\n      if (import.meta.client) {\n        state.value = \"\";\n        window.location.assign(redirectPath);\n      } else if (import.meta.server) {\n        __DEBUG__ && console.log(\"differentDomains servermode \", redirectPath);\n        state.value = redirectPath;\n      }\n    }\n  }\n}\nexport function injectNuxtHelpers(nuxt, i18n) {\n  defineGetter(nuxt, \"$i18n\", getI18nTarget(i18n));\n  defineGetter(nuxt, \"$getRouteBaseName\", wrapComposable(getRouteBaseName));\n  defineGetter(nuxt, \"$localePath\", wrapComposable(localePath));\n  defineGetter(nuxt, \"$localeRoute\", wrapComposable(localeRoute));\n  defineGetter(nuxt, \"$switchLocalePath\", wrapComposable(switchLocalePath));\n  defineGetter(nuxt, \"$localeHead\", wrapComposable(localeHead));\n}\nexport function extendPrefixable(runtimeConfig = useRuntimeConfig()) {\n  return (opts) => {\n    __DEBUG__ && console.log(\"extendPrefixable\", DefaultPrefixable(opts));\n    return DefaultPrefixable(opts) && !runtimeConfig.public.i18n.differentDomains;\n  };\n}\nexport function extendSwitchLocalePathIntercepter(runtimeConfig = useRuntimeConfig()) {\n  return (path, locale) => {\n    if (runtimeConfig.public.i18n.differentDomains) {\n      const domain = getDomainFromLocale(locale);\n      __DEBUG__ && console.log(\"extendSwitchLocalePathIntercepter: domain -> \", domain, \" path -> \", path);\n      if (domain) {\n        return joinURL(domain, path);\n      } else {\n        return path;\n      }\n    } else {\n      return DefaultSwitchLocalePathIntercepter(path, locale);\n    }\n  };\n}\nexport function extendBaseUrl() {\n  return () => {\n    const ctx = useNuxtApp();\n    const { baseUrl, defaultLocale, differentDomains } = ctx.$config.public.i18n;\n    if (isFunction(baseUrl)) {\n      const baseUrlResult = baseUrl(ctx);\n      __DEBUG__ && console.log(\"baseUrl: using localeLoader function -\", baseUrlResult);\n      return baseUrlResult;\n    }\n    const localeCode = isFunction(defaultLocale) ? defaultLocale() : defaultLocale;\n    if (differentDomains && localeCode) {\n      const domain = getDomainFromLocale(localeCode);\n      if (domain) {\n        __DEBUG__ && console.log(\"baseUrl: using differentDomains -\", domain);\n        return domain;\n      }\n    }\n    if (baseUrl) {\n      __DEBUG__ && console.log(\"baseUrl: using runtimeConfig -\", baseUrl);\n      return baseUrl;\n    }\n    return baseUrl;\n  };\n}\nexport function getNormalizedLocales(locales) {\n  const normalized = [];\n  for (const locale of locales) {\n    if (isString(locale)) {\n      normalized.push({ code: locale });\n      continue;\n    }\n    normalized.push(locale);\n  }\n  return normalized;\n}\n","import { isArray, isString, isObject } from \"@intlify/shared\";\nimport { hasProtocol } from \"ufo\";\nimport isHTTPS from \"is-https\";\nimport {\n  useRequestHeaders,\n  useRequestEvent,\n  useCookie as useNuxtCookie,\n  useRuntimeConfig,\n  useNuxtApp,\n  unref\n} from \"#imports\";\nimport { NUXT_I18N_MODULE_ID, DEFAULT_COOKIE_KEY, isSSG, localeCodes, normalizedLocales } from \"#build/i18n.options.mjs\";\nimport { findBrowserLocale, getLocalesRegex, getI18nTarget } from \"./routing/utils.mjs\";\nimport { initCommonComposableOptions } from \"./utils.mjs\";\nexport function formatMessage(message) {\n  return NUXT_I18N_MODULE_ID + \" \" + message;\n}\nexport function callVueI18nInterfaces(i18n, name, ...args) {\n  const target = getI18nTarget(i18n);\n  const [obj, method] = [target, target[name]];\n  return Reflect.apply(method, obj, [...args]);\n}\nexport function getVueI18nPropertyValue(i18n, name) {\n  const target = getI18nTarget(i18n);\n  return unref(target[name]);\n}\nexport function defineGetter(obj, key, val) {\n  Object.defineProperty(obj, key, { get: () => val });\n}\nexport function wrapComposable(fn, common = initCommonComposableOptions()) {\n  return (...args) => fn(common, ...args);\n}\nexport function parseAcceptLanguage(input) {\n  return input.split(\",\").map((tag) => tag.split(\";\")[0]);\n}\nexport function getBrowserLocale() {\n  let ret;\n  if (import.meta.client) {\n    if (navigator.languages) {\n      ret = findBrowserLocale(normalizedLocales, navigator.languages);\n      __DEBUG__ && console.log(\"getBrowserLocale (navigator.languages, ret) -\", navigator.languages, ret);\n    }\n  } else if (import.meta.server) {\n    const header = useRequestHeaders([\"accept-language\"]);\n    __DEBUG__ && console.log(\"getBrowserLocale accept-language\", header);\n    const accept = header[\"accept-language\"];\n    if (accept) {\n      ret = findBrowserLocale(normalizedLocales, parseAcceptLanguage(accept));\n      __DEBUG__ && console.log(\"getBrowserLocale ret\", ret);\n    }\n  }\n  return ret;\n}\nexport function getI18nCookie() {\n  const detect = runtimeDetectBrowserLanguage();\n  const cookieKey = detect && detect.cookieKey || DEFAULT_COOKIE_KEY;\n  const date = /* @__PURE__ */ new Date();\n  const cookieOptions = {\n    expires: new Date(date.setDate(date.getDate() + 365)),\n    path: \"/\",\n    sameSite: detect && detect.cookieCrossOrigin ? \"none\" : \"lax\",\n    secure: detect && detect.cookieCrossOrigin || detect && detect.cookieSecure\n  };\n  if (detect && detect.cookieDomain) {\n    cookieOptions.domain = detect.cookieDomain;\n  }\n  return useNuxtCookie(cookieKey, cookieOptions);\n}\nexport function getLocaleCookie(cookieRef, detect, defaultLocale) {\n  __DEBUG__ && console.log(\"getLocaleCookie\", {\n    useCookie: detect && detect.useCookie,\n    cookieKey: detect && detect.cookieKey,\n    localeCodes\n  });\n  if (detect === false || !detect.useCookie) {\n    return;\n  }\n  const localeCode = cookieRef.value ?? void 0;\n  const env = import.meta.client ? \"client\" : \"server\";\n  if (localeCode == null) {\n    __DEBUG__ && console.log(`getLocaleCookie (${env}) - none`);\n    return;\n  }\n  if (localeCodes.includes(localeCode)) {\n    __DEBUG__ && console.log(`getLocaleCookie (${env}) - locale from cookie: `, localeCode);\n    return localeCode;\n  }\n  if (defaultLocale) {\n    __DEBUG__ && console.log(\n      `getLocaleCookie (${env}) - unknown locale cookie (${localeCode}), setting to defaultLocale (${defaultLocale})`\n    );\n    cookieRef.value = defaultLocale;\n    return defaultLocale;\n  }\n  __DEBUG__ && console.log(`getLocaleCookie (${env}) - unknown locale cookie (${localeCode}), unsetting cookie`);\n  cookieRef.value = void 0;\n  return;\n}\nexport function setLocaleCookie(cookieRef, locale, detect) {\n  if (detect === false || !detect.useCookie) {\n    return;\n  }\n  cookieRef.value = locale;\n}\nexport const DefaultDetectBrowserLanguageFromResult = {\n  locale: \"\",\n  stat: false,\n  reason: \"unknown\",\n  from: \"unknown\"\n};\nexport function detectBrowserLanguage(route, vueI18nOptionsLocale, detectLocaleContext, locale = \"\") {\n  const { strategy } = useRuntimeConfig().public.i18n;\n  const { ssg, callType, firstAccess, localeCookie } = detectLocaleContext;\n  __DEBUG__ && console.log(\"detectBrowserLanguage: (ssg, callType, firstAccess) - \", ssg, callType, firstAccess);\n  if (isSSG && strategy === \"no_prefix\" && (import.meta.server || ssg === \"ssg_ignore\")) {\n    return { locale: \"\", stat: true, reason: \"detect_ignore_on_ssg\" };\n  }\n  if (!firstAccess) {\n    return { locale: strategy === \"no_prefix\" ? locale : \"\", stat: false, reason: \"first_access_only\" };\n  }\n  const { redirectOn, alwaysRedirect, useCookie, fallbackLocale } = runtimeDetectBrowserLanguage();\n  const path = isString(route) ? route : route.path;\n  __DEBUG__ && console.log(\n    \"detectBrowserLanguage: (path, strategy, alwaysRedirect, redirectOn, locale) -\",\n    path,\n    strategy,\n    alwaysRedirect,\n    redirectOn,\n    locale\n  );\n  if (strategy !== \"no_prefix\") {\n    if (redirectOn === \"root\") {\n      if (path !== \"/\") {\n        __DEBUG__ && console.log(\"detectBrowserLanguage: not root\");\n        return { locale: \"\", stat: false, reason: \"not_redirect_on_root\" };\n      }\n    } else if (redirectOn === \"no prefix\") {\n      __DEBUG__ && console.log(\"detectBrowserLanguage: no prefix (path) -\", path);\n      if (!alwaysRedirect && path.match(getLocalesRegex(localeCodes))) {\n        return { locale: \"\", stat: false, reason: \"not_redirect_on_no_prefix\" };\n      }\n    }\n  }\n  let localeFrom = \"unknown\";\n  let cookieLocale;\n  let matchedLocale;\n  if (useCookie) {\n    matchedLocale = cookieLocale = localeCookie;\n    localeFrom = \"cookie\";\n    __DEBUG__ && console.log(\"detectBrowserLanguage: cookieLocale\", cookieLocale);\n  }\n  if (!matchedLocale) {\n    matchedLocale = getBrowserLocale();\n    localeFrom = \"navigator_or_header\";\n    __DEBUG__ && console.log(\"detectBrowserLanguage: browserLocale\", matchedLocale);\n  }\n  __DEBUG__ && console.log(\n    \"detectBrowserLanguage: (matchedLocale, cookieLocale, localeFrom) -\",\n    matchedLocale,\n    cookieLocale,\n    localeFrom\n  );\n  const finalLocale = matchedLocale || fallbackLocale;\n  if (!matchedLocale && fallbackLocale) {\n    localeFrom = \"fallback\";\n  }\n  __DEBUG__ && console.log(\n    \"detectBrowserLanguage: first finaleLocale (finaleLocale, cookieLocale, localeFrom) -\",\n    finalLocale,\n    cookieLocale,\n    localeFrom\n  );\n  const vueI18nLocale = locale || vueI18nOptionsLocale;\n  __DEBUG__ && console.log(\"detectBrowserLanguage: vueI18nLocale\", vueI18nLocale);\n  if (finalLocale && (!useCookie || alwaysRedirect || !cookieLocale)) {\n    if (strategy === \"no_prefix\") {\n      return { locale: finalLocale, stat: true, from: localeFrom };\n    } else {\n      if (callType === \"setup\") {\n        if (finalLocale !== vueI18nLocale) {\n          __DEBUG__ && console.log(\"detectBrowserLanguage: finalLocale !== vueI18nLocale\", finalLocale);\n          return { locale: finalLocale, stat: true, from: localeFrom };\n        }\n      }\n      if (alwaysRedirect) {\n        const redirectOnRoot = path === \"/\";\n        const redirectOnAll = redirectOn === \"all\";\n        const redirectOnNoPrefix = redirectOn === \"no prefix\" && !path.match(getLocalesRegex(localeCodes));\n        __DEBUG__ && console.log(\n          \"detectBrowserLanguage: (redirectOnRoot, redirectOnAll, redirectOnNoPrefix) - \",\n          redirectOnRoot,\n          redirectOnAll,\n          redirectOnNoPrefix\n        );\n        if (redirectOnRoot || redirectOnAll || redirectOnNoPrefix) {\n          return { locale: finalLocale, stat: true, from: localeFrom };\n        }\n      }\n    }\n  }\n  if (ssg === \"ssg_setup\" && finalLocale) {\n    return { locale: finalLocale, stat: true, from: localeFrom };\n  }\n  if ((localeFrom === \"navigator_or_header\" || localeFrom === \"cookie\") && finalLocale) {\n    return { locale: finalLocale, stat: true, from: localeFrom };\n  }\n  return { locale: \"\", stat: false, reason: \"not_found_match\" };\n}\nexport function getHost() {\n  let host;\n  if (import.meta.client) {\n    host = window.location.host;\n  } else if (import.meta.server) {\n    const header = useRequestHeaders([\"x-forwarded-host\", \"host\"]);\n    let detectedHost;\n    if (\"x-forwarded-host\" in header) {\n      detectedHost = header[\"x-forwarded-host\"];\n    } else if (\"host\" in header) {\n      detectedHost = header[\"host\"];\n    }\n    host = isArray(detectedHost) ? detectedHost[0] : detectedHost;\n  }\n  return host;\n}\nexport function getLocaleDomain(locales, strategy, route) {\n  let host = getHost() || \"\";\n  if (host) {\n    __DEBUG__ && console.log(\n      `MultiDomainsMultiLocales: locating domain for host: `,\n      host,\n      strategy,\n      isObject(route) ? route.path : route\n    );\n    let matchingLocale;\n    const matchingLocales = locales.filter((locale) => {\n      if (locale && locale.domain) {\n        let domain = locale.domain;\n        if (hasProtocol(locale.domain)) {\n          domain = locale.domain.replace(/(http|https):\\/\\//, \"\");\n        }\n        return domain === host;\n      }\n      return false;\n    });\n    if (matchingLocales.length === 1) {\n      matchingLocale = matchingLocales[0];\n      __DEBUG__ && console.log(`MultiDomainsMultiLocales: found only one matching domain: `, host, matchingLocales[0].code);\n    } else if (matchingLocales.length > 1) {\n      if (strategy === \"no_prefix\") {\n        console.warn(\n          formatMessage(\n            \"Multiple matching domains found! This is not supported for no_prefix strategy in combination with differentDomains!\"\n          )\n        );\n        matchingLocale = matchingLocales[0];\n      } else {\n        if (route) {\n          const routePath = isObject(route) ? route.path : isString(route) ? route : \"\";\n          __DEBUG__ && console.log(`MultiDomainsMultiLocales: Check in matched domain for locale match in path: `, routePath, host);\n          if (routePath && routePath !== \"\") {\n            const matches = routePath.match(getLocalesRegex(matchingLocales.map((l) => l.code)));\n            if (matches && matches.length > 1) {\n              matchingLocale = matchingLocales.find((l) => l.code === matches[1]);\n              __DEBUG__ && console.log(\n                `MultiDomainsMultiLocales: Found matching locale from path. MatchingLocale is now`,\n                matchingLocale?.code\n              );\n            }\n          }\n        }\n        if (!matchingLocale) {\n          matchingLocale = matchingLocales.find((l) => l.domainDefault);\n          __DEBUG__ && console.log(\n            `MultiDomainsMultiLocales: matching locale not found - trying to get default for this domain. MatchingLocale is now`,\n            matchingLocale?.code\n          );\n        }\n      }\n    }\n    if (matchingLocale) {\n      return matchingLocale.code;\n    } else {\n      host = \"\";\n    }\n  }\n  return host;\n}\nexport function getDomainFromLocale(localeCode) {\n  const runtimeConfig = useRuntimeConfig();\n  const nuxtApp = useNuxtApp();\n  const config = runtimeConfig.public.i18n;\n  const lang = normalizedLocales.find((locale) => locale.code === localeCode);\n  const domain = config?.locales?.[localeCode]?.domain ?? lang?.domain;\n  if (domain) {\n    if (hasProtocol(domain, { strict: true })) {\n      return domain;\n    }\n    let protocol;\n    if (import.meta.server) {\n      const {\n        node: { req }\n      } = useRequestEvent(nuxtApp);\n      protocol = req && isHTTPS(req) ? \"https:\" : \"http:\";\n    } else {\n      protocol = new URL(window.location.origin).protocol;\n    }\n    return protocol + \"//\" + domain;\n  }\n  console.warn(formatMessage(\"Could not find domain name for locale \" + localeCode));\n}\nexport const runtimeDetectBrowserLanguage = (opts = useRuntimeConfig().public.i18n) => {\n  if (opts?.detectBrowserLanguage === false)\n    return false;\n  return opts?.detectBrowserLanguage;\n};\n","import { useRequestHeaders, useCookie as useNuxtCookie } from \"#imports\";\nimport { ref, computed, watch, onUnmounted } from \"vue\";\nimport { parseAcceptLanguage, wrapComposable, runtimeDetectBrowserLanguage } from \"../internal.mjs\";\nimport { localeCodes, normalizedLocales } from \"#build/i18n.options.mjs\";\nimport { getActiveHead } from \"unhead\";\nimport { getNormalizedLocales, initCommonComposableOptions } from \"../utils.mjs\";\nimport {\n  getAlternateOgLocales,\n  getCanonicalLink,\n  getCurrentOgLocale,\n  getHreflangLinks,\n  getOgUrl,\n  getRouteBaseName,\n  localeHead,\n  localeLocation,\n  localePath,\n  localeRoute,\n  switchLocalePath\n} from \"../routing/compatibles/index.mjs\";\nimport { findBrowserLocale, getComposer, getLocale, getLocales } from \"../routing/utils.mjs\";\nexport * from \"vue-i18n\";\nexport * from \"./shared.mjs\";\nexport function useSetI18nParams(seoAttributes) {\n  const common = initCommonComposableOptions();\n  const head = getActiveHead();\n  const i18n = getComposer(common.i18n);\n  const router = common.router;\n  const locale = getLocale(i18n);\n  const locales = getNormalizedLocales(getLocales(i18n));\n  const _i18nParams = ref({});\n  const experimentalSSR = common.runtimeConfig.public.i18n.experimental.switchLocalePathLinkSSR;\n  const i18nParams = computed({\n    get() {\n      return experimentalSSR ? common.metaState.value : router.currentRoute.value.meta.nuxtI18n ?? {};\n    },\n    set(val) {\n      common.metaState.value = val;\n      _i18nParams.value = val;\n      router.currentRoute.value.meta.nuxtI18n = val;\n    }\n  });\n  const stop = watch(\n    () => router.currentRoute.value.fullPath,\n    () => {\n      router.currentRoute.value.meta.nuxtI18n = experimentalSSR ? common.metaState.value : _i18nParams.value;\n    }\n  );\n  onUnmounted(() => {\n    stop();\n  });\n  const currentLocale = getNormalizedLocales(locales).find((l) => l.code === locale) || { code: locale };\n  const currentLocaleIso = currentLocale.iso;\n  const setMeta = () => {\n    const metaObject = {\n      link: [],\n      meta: []\n    };\n    if (locale && i18n.locales) {\n      const idAttribute = \"id\";\n      metaObject.link.push(\n        ...getHreflangLinks(common, locales, idAttribute),\n        ...getCanonicalLink(common, idAttribute, seoAttributes)\n      );\n      metaObject.meta.push(\n        ...getOgUrl(common, idAttribute, seoAttributes),\n        ...getCurrentOgLocale(currentLocale, currentLocaleIso, idAttribute),\n        ...getAlternateOgLocales(locales, currentLocaleIso, idAttribute)\n      );\n    }\n    head?.push(metaObject);\n  };\n  return function(params) {\n    i18nParams.value = { ...params };\n    setMeta();\n  };\n}\nexport function useLocaleHead({\n  addDirAttribute = false,\n  addSeoAttributes = false,\n  identifierAttribute = \"hid\"\n} = {}) {\n  const common = initCommonComposableOptions();\n  const metaObject = ref({\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  });\n  function cleanMeta() {\n    metaObject.value = {\n      htmlAttrs: {},\n      link: [],\n      meta: []\n    };\n  }\n  function updateMeta() {\n    metaObject.value = localeHead(common, {\n      addDirAttribute,\n      addSeoAttributes,\n      identifierAttribute\n    });\n  }\n  if (import.meta.client) {\n    const i18n = getComposer(common.i18n);\n    const stop = watch(\n      [() => common.router.currentRoute.value, i18n.locale],\n      () => {\n        cleanMeta();\n        updateMeta();\n      },\n      { immediate: true }\n    );\n    onUnmounted(() => stop());\n  } else {\n    updateMeta();\n  }\n  return metaObject;\n}\nexport function useRouteBaseName() {\n  return wrapComposable(getRouteBaseName);\n}\nexport function useLocalePath() {\n  return wrapComposable(localePath);\n}\nexport function useLocaleRoute() {\n  return wrapComposable(localeRoute);\n}\nexport function useLocaleLocation() {\n  return wrapComposable(localeLocation);\n}\nexport function useSwitchLocalePath() {\n  return wrapComposable(switchLocalePath);\n}\nexport function useBrowserLocale() {\n  const headers = useRequestHeaders([\"accept-language\"]);\n  return findBrowserLocale(\n    normalizedLocales,\n    import.meta.client ? navigator.languages : parseAcceptLanguage(headers[\"accept-language\"] || \"\")\n  ) || null;\n}\nexport function useCookieLocale() {\n  const locale = ref(\"\");\n  const detect = runtimeDetectBrowserLanguage();\n  if (detect && detect.useCookie) {\n    const cookieKey = detect.cookieKey;\n    let code = null;\n    if (import.meta.client) {\n      code = useNuxtCookie(cookieKey).value;\n    } else if (import.meta.server) {\n      const cookie = useRequestHeaders([\"cookie\"]);\n      code = cookie[cookieKey];\n    }\n    if (code && localeCodes.includes(code)) {\n      locale.value = code;\n    }\n  }\n  return locale;\n}\nconst warnRuntimeUsage = (method) => console.warn(\n  method + \"() is a compiler-hint helper that is only usable inside the script block of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.\"\n);\nexport function defineI18nRoute(route) {\n  if (import.meta.dev) {\n    warnRuntimeUsage(\"defineI18nRoute\");\n  }\n}\n","import { isObject, isFunction, assign } from \"@intlify/shared\";\nimport { computed, effectScope, ref, watch } from \"#imports\";\nimport { resolveBaseUrl, isVueI18n, getComposer, inBrowser } from \"../utils.mjs\";\nimport {\n  getRouteBaseName,\n  localeHead,\n  localeLocation,\n  localePath,\n  localeRoute,\n  resolveRoute,\n  switchLocalePath\n} from \"../compatibles/index.mjs\";\nimport { wrapComposable } from \"../../internal.mjs\";\nimport { initCommonComposableOptions } from \"../../utils.mjs\";\nexport function extendI18n(i18n, {\n  locales = [],\n  localeCodes = [],\n  baseUrl = \"\",\n  hooks = {},\n  context = {}\n} = {}) {\n  const scope = effectScope();\n  const orgInstall = i18n.install;\n  i18n.install = (vue, ...options) => {\n    const pluginOptions = isPluginOptions(options[0]) ? assign({}, options[0]) : { inject: true };\n    if (pluginOptions.inject == null) {\n      pluginOptions.inject = true;\n    }\n    const orgComposerExtend = pluginOptions.__composerExtend;\n    pluginOptions.__composerExtend = (localComposer) => {\n      const globalComposer2 = getComposer(i18n);\n      localComposer.locales = computed(() => globalComposer2.locales.value);\n      localComposer.localeCodes = computed(() => globalComposer2.localeCodes.value);\n      localComposer.baseUrl = computed(() => globalComposer2.baseUrl.value);\n      let orgComposerDispose;\n      if (isFunction(orgComposerExtend)) {\n        orgComposerDispose = Reflect.apply(orgComposerExtend, pluginOptions, [localComposer]);\n      }\n      return () => {\n        orgComposerDispose && orgComposerDispose();\n      };\n    };\n    if (i18n.mode === \"legacy\") {\n      const orgVueI18nExtend = pluginOptions.__vueI18nExtend;\n      pluginOptions.__vueI18nExtend = (vueI18n) => {\n        extendVueI18n(vueI18n, hooks.onExtendVueI18n);\n        let orgVueI18nDispose;\n        if (isFunction(orgVueI18nExtend)) {\n          orgVueI18nDispose = Reflect.apply(orgVueI18nExtend, pluginOptions, [vueI18n]);\n        }\n        return () => {\n          orgVueI18nDispose && orgVueI18nDispose();\n        };\n      };\n    }\n    options[0] = pluginOptions;\n    Reflect.apply(orgInstall, i18n, [vue, ...options]);\n    const globalComposer = getComposer(i18n);\n    scope.run(() => {\n      extendComposer(globalComposer, { locales, localeCodes, baseUrl, hooks, context });\n      if (i18n.mode === \"legacy\" && isVueI18n(i18n.global)) {\n        extendVueI18n(i18n.global, hooks.onExtendVueI18n);\n      }\n    });\n    const app = vue;\n    const exported = i18n.mode === \"composition\" ? app.config.globalProperties.$i18n : null;\n    if (exported) {\n      extendExportedGlobal(exported, globalComposer, hooks.onExtendExportedGlobal);\n    }\n    if (pluginOptions.inject) {\n      const common = initCommonComposableOptions(i18n);\n      vue.mixin({\n        methods: {\n          getRouteBaseName: wrapComposable(getRouteBaseName, common),\n          resolveRoute: wrapComposable(resolveRoute, common),\n          localePath: wrapComposable(localePath, common),\n          localeRoute: wrapComposable(localeRoute, common),\n          localeLocation: wrapComposable(localeLocation, common),\n          switchLocalePath: wrapComposable(switchLocalePath, common),\n          localeHead: wrapComposable(localeHead, common)\n        }\n      });\n    }\n    if (app.unmount) {\n      const unmountApp = app.unmount;\n      app.unmount = () => {\n        scope.stop();\n        unmountApp();\n      };\n    }\n  };\n  return scope;\n}\nfunction extendComposer(composer, options) {\n  const { locales, localeCodes, baseUrl, context } = options;\n  const _locales = ref(locales);\n  const _localeCodes = ref(localeCodes);\n  const _baseUrl = ref(\"\");\n  composer.locales = computed(() => _locales.value);\n  composer.localeCodes = computed(() => _localeCodes.value);\n  composer.baseUrl = computed(() => _baseUrl.value);\n  if (inBrowser) {\n    watch(\n      composer.locale,\n      () => {\n        _baseUrl.value = resolveBaseUrl(baseUrl, context);\n      },\n      { immediate: true }\n    );\n  } else {\n    _baseUrl.value = resolveBaseUrl(baseUrl, context);\n  }\n  if (options.hooks && options.hooks.onExtendComposer) {\n    options.hooks.onExtendComposer(composer);\n  }\n}\nfunction extendPropertyDescriptors(composer, exported, hook) {\n  const properties = [\n    {\n      locales: {\n        get() {\n          return composer.locales.value;\n        }\n      },\n      localeCodes: {\n        get() {\n          return composer.localeCodes.value;\n        }\n      },\n      baseUrl: {\n        get() {\n          return composer.baseUrl.value;\n        }\n      }\n    }\n  ];\n  hook && properties.push(hook(composer));\n  for (const property of properties) {\n    for (const [key, descriptor] of Object.entries(property)) {\n      Object.defineProperty(exported, key, descriptor);\n    }\n  }\n}\nfunction extendExportedGlobal(exported, g, hook) {\n  extendPropertyDescriptors(g, exported, hook);\n}\nfunction extendVueI18n(vueI18n, hook) {\n  const c = getComposer(vueI18n);\n  extendPropertyDescriptors(c, vueI18n, hook);\n}\nfunction isPluginOptions(options) {\n  return isObject(options) && (\"inject\" in options || \"__composerExtend\" in options || \"__vueI18nExtend\" in options);\n}\n","import { computed, getCurrentInstance, getCurrentScope, onBeforeMount, onScopeDispose, onServerPrefetch, onUnmounted, ref, shallowRef, toRef, unref, watch } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nimport { createError } from \"./error.js\";\nimport { onNuxtReady } from \"./ready.js\";\nimport { asyncDataDefaults, resetAsyncDataToUndefined } from \"#build/nuxt.config.mjs\";\nconst isDefer = (dedupe) => dedupe === \"defer\" || dedupe === false;\nexport function useAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  let [key, _handler, options = {}] = args;\n  if (typeof key !== \"string\") {\n    throw new TypeError(\"[nuxt] [asyncData] key must be a string.\");\n  }\n  if (typeof _handler !== \"function\") {\n    throw new TypeError(\"[nuxt] [asyncData] handler must be a function.\");\n  }\n  const nuxtApp = useNuxtApp();\n  const handler = import.meta.client || !import.meta.prerender || !nuxtApp.ssrContext?._sharedPrerenderCache ? _handler : () => {\n    const value = nuxtApp.ssrContext._sharedPrerenderCache.get(key);\n    if (value) {\n      return value;\n    }\n    const promise = Promise.resolve().then(() => nuxtApp.runWithContext(_handler));\n    nuxtApp.ssrContext._sharedPrerenderCache.set(key, promise);\n    return promise;\n  };\n  const getDefault = () => asyncDataDefaults.value;\n  const getDefaultCachedData = () => nuxtApp.isHydrating ? nuxtApp.payload.data[key] : nuxtApp.static.data[key];\n  options.server = options.server ?? true;\n  options.default = options.default ?? getDefault;\n  options.getCachedData = options.getCachedData ?? getDefaultCachedData;\n  options.lazy = options.lazy ?? false;\n  options.immediate = options.immediate ?? true;\n  options.deep = options.deep ?? asyncDataDefaults.deep;\n  options.dedupe = options.dedupe ?? \"cancel\";\n  if (import.meta.dev && typeof options.dedupe === \"boolean\") {\n    console.warn(\"[nuxt] `boolean` values are deprecated for the `dedupe` option of `useAsyncData` and will be removed in the future. Use 'cancel' or 'defer' instead.\");\n  }\n  const hasCachedData = () => options.getCachedData(key, nuxtApp) != null;\n  if (!nuxtApp._asyncData[key] || !options.immediate) {\n    nuxtApp.payload._errors[key] ??= asyncDataDefaults.errorValue;\n    const _ref = options.deep ? ref : shallowRef;\n    nuxtApp._asyncData[key] = {\n      data: _ref(options.getCachedData(key, nuxtApp) ?? options.default()),\n      pending: ref(!hasCachedData()),\n      error: toRef(nuxtApp.payload._errors, key),\n      status: ref(\"idle\"),\n      _default: options.default\n    };\n  }\n  const asyncData = { ...nuxtApp._asyncData[key] };\n  delete asyncData._default;\n  asyncData.refresh = asyncData.execute = (opts = {}) => {\n    if (nuxtApp._asyncDataPromises[key]) {\n      if (isDefer(opts.dedupe ?? options.dedupe)) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      nuxtApp._asyncDataPromises[key].cancelled = true;\n    }\n    if ((opts._initial || nuxtApp.isHydrating && opts._initial !== false) && hasCachedData()) {\n      return Promise.resolve(options.getCachedData(key, nuxtApp));\n    }\n    asyncData.pending.value = true;\n    asyncData.status.value = \"pending\";\n    const promise = new Promise(\n      (resolve, reject) => {\n        try {\n          resolve(handler(nuxtApp));\n        } catch (err) {\n          reject(err);\n        }\n      }\n    ).then(async (_result) => {\n      if (promise.cancelled) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      let result = _result;\n      if (options.transform) {\n        result = await options.transform(_result);\n      }\n      if (options.pick) {\n        result = pick(result, options.pick);\n      }\n      if (import.meta.dev && import.meta.server && typeof result === \"undefined\") {\n        console.warn(`[nuxt] \\`${options._functionName || \"useAsyncData\"}\\` must return a value (it should not be \\`undefined\\`) or the request may be duplicated on the client side.`);\n      }\n      nuxtApp.payload.data[key] = result;\n      asyncData.data.value = result;\n      asyncData.error.value = asyncDataDefaults.errorValue;\n      asyncData.status.value = \"success\";\n    }).catch((error) => {\n      if (promise.cancelled) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      asyncData.error.value = createError(error);\n      asyncData.data.value = unref(options.default());\n      asyncData.status.value = \"error\";\n    }).finally(() => {\n      if (promise.cancelled) {\n        return;\n      }\n      asyncData.pending.value = false;\n      delete nuxtApp._asyncDataPromises[key];\n    });\n    nuxtApp._asyncDataPromises[key] = promise;\n    return nuxtApp._asyncDataPromises[key];\n  };\n  asyncData.clear = () => clearNuxtDataByKey(nuxtApp, key);\n  const initialFetch = () => asyncData.refresh({ _initial: true });\n  const fetchOnServer = options.server !== false && nuxtApp.payload.serverRendered;\n  if (import.meta.server && fetchOnServer && options.immediate) {\n    const promise = initialFetch();\n    if (getCurrentInstance()) {\n      onServerPrefetch(() => promise);\n    } else {\n      nuxtApp.hook(\"app:created\", async () => {\n        await promise;\n      });\n    }\n  }\n  if (import.meta.client) {\n    const instance = getCurrentInstance();\n    if (import.meta.dev && !nuxtApp.isHydrating && (!instance || instance?.isMounted)) {\n      console.warn(`[nuxt] [${options._functionName || \"useAsyncData\"}] Component is already mounted, please use $fetch instead. See https://nuxt.com/docs/getting-started/data-fetching`);\n    }\n    if (instance && !instance._nuxtOnBeforeMountCbs) {\n      instance._nuxtOnBeforeMountCbs = [];\n      const cbs = instance._nuxtOnBeforeMountCbs;\n      onBeforeMount(() => {\n        cbs.forEach((cb) => {\n          cb();\n        });\n        cbs.splice(0, cbs.length);\n      });\n      onUnmounted(() => cbs.splice(0, cbs.length));\n    }\n    if (fetchOnServer && nuxtApp.isHydrating && (asyncData.error.value || hasCachedData())) {\n      asyncData.pending.value = false;\n      asyncData.status.value = asyncData.error.value ? \"error\" : \"success\";\n    } else if (instance && (nuxtApp.payload.serverRendered && nuxtApp.isHydrating || options.lazy) && options.immediate) {\n      instance._nuxtOnBeforeMountCbs.push(initialFetch);\n    } else if (options.immediate) {\n      initialFetch();\n    }\n    const hasScope = getCurrentScope();\n    if (options.watch) {\n      const unsub = watch(options.watch, () => asyncData.refresh());\n      if (hasScope) {\n        onScopeDispose(unsub);\n      }\n    }\n    const off = nuxtApp.hook(\"app:data:refresh\", async (keys) => {\n      if (!keys || keys.includes(key)) {\n        await asyncData.refresh();\n      }\n    });\n    if (hasScope) {\n      onScopeDispose(off);\n    }\n  }\n  const asyncDataPromise = Promise.resolve(nuxtApp._asyncDataPromises[key]).then(() => asyncData);\n  Object.assign(asyncDataPromise, asyncData);\n  return asyncDataPromise;\n}\nexport function useLazyAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [key, handler, options = {}] = args;\n  if (import.meta.dev && import.meta.client) {\n    options._functionName ||= \"useLazyAsyncData\";\n  }\n  return useAsyncData(key, handler, { ...options, lazy: true }, null);\n}\nexport function useNuxtData(key) {\n  const nuxtApp = useNuxtApp();\n  if (!(key in nuxtApp.payload.data)) {\n    nuxtApp.payload.data[key] = asyncDataDefaults.value;\n  }\n  return {\n    data: computed({\n      get() {\n        return nuxtApp._asyncData[key]?.data.value ?? nuxtApp.payload.data[key];\n      },\n      set(value) {\n        if (nuxtApp._asyncData[key]) {\n          nuxtApp._asyncData[key].data.value = value;\n        } else {\n          nuxtApp.payload.data[key] = value;\n        }\n      }\n    })\n  };\n}\nexport async function refreshNuxtData(keys) {\n  if (import.meta.server) {\n    return Promise.resolve();\n  }\n  await new Promise((resolve) => onNuxtReady(resolve));\n  const _keys = keys ? toArray(keys) : void 0;\n  await useNuxtApp().hooks.callHookParallel(\"app:data:refresh\", _keys);\n}\nexport function clearNuxtData(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.data);\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const key of _keys) {\n    clearNuxtDataByKey(nuxtApp, key);\n  }\n}\nfunction clearNuxtDataByKey(nuxtApp, key) {\n  if (key in nuxtApp.payload.data) {\n    nuxtApp.payload.data[key] = void 0;\n  }\n  if (key in nuxtApp.payload._errors) {\n    nuxtApp.payload._errors[key] = asyncDataDefaults.errorValue;\n  }\n  if (nuxtApp._asyncData[key]) {\n    nuxtApp._asyncData[key].data.value = resetAsyncDataToUndefined ? void 0 : nuxtApp._asyncData[key]._default();\n    nuxtApp._asyncData[key].error.value = asyncDataDefaults.errorValue;\n    nuxtApp._asyncData[key].pending.value = false;\n    nuxtApp._asyncData[key].status.value = \"idle\";\n  }\n  if (key in nuxtApp._asyncDataPromises) {\n    if (nuxtApp._asyncDataPromises[key]) {\n      nuxtApp._asyncDataPromises[key].cancelled = true;\n    }\n    nuxtApp._asyncDataPromises[key] = void 0;\n  }\n}\nfunction pick(obj, keys) {\n  const newObj = {};\n  for (const key of keys) {\n    newObj[key] = obj[key];\n  }\n  return newObj;\n}\n","import { cloneVNode, createElementBlock, createStaticVNode, defineComponent, getCurrentInstance, h, onMounted, provide, ref } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { getFragmentHTML } from \"./utils.js\";\nexport const clientOnlySymbol = Symbol.for(\"nuxt:client-only\");\nexport default defineComponent({\n  name: \"ClientOnly\",\n  inheritAttrs: false,\n  props: [\"fallback\", \"placeholder\", \"placeholderTag\", \"fallbackTag\"],\n  setup(_, { slots, attrs }) {\n    const mounted = ref(false);\n    onMounted(() => {\n      mounted.value = true;\n    });\n    if (import.meta.dev) {\n      const nuxtApp = useNuxtApp();\n      nuxtApp._isNuxtPageUsed = true;\n      nuxtApp._isNuxtLayoutUsed = true;\n    }\n    provide(clientOnlySymbol, true);\n    return (props) => {\n      if (mounted.value) {\n        return slots.default?.();\n      }\n      const slot = slots.fallback || slots.placeholder;\n      if (slot) {\n        return slot();\n      }\n      const fallbackStr = props.fallback || props.placeholder || \"\";\n      const fallbackTag = props.fallbackTag || props.placeholderTag || \"span\";\n      return createElementBlock(fallbackTag, attrs, fallbackStr);\n    };\n  }\n});\nconst cache = /* @__PURE__ */ new WeakMap();\n// @__NO_SIDE_EFFECTS__\nexport function createClientOnly(component) {\n  if (cache.has(component)) {\n    return cache.get(component);\n  }\n  const clone = { ...component };\n  if (clone.render) {\n    clone.render = (ctx, cache2, $props, $setup, $data, $options) => {\n      if ($setup.mounted$ ?? ctx.mounted$) {\n        const res = component.render?.bind(ctx)(ctx, cache2, $props, $setup, $data, $options);\n        return res.children === null || typeof res.children === \"string\" ? cloneVNode(res) : h(res);\n      } else {\n        const fragment = getFragmentHTML(ctx._.vnode.el ?? null) ?? [\"<div></div>\"];\n        return import.meta.client ? createStaticVNode(fragment.join(\"\"), fragment.length) : h(\"div\", ctx.$attrs ?? ctx._.attrs);\n      }\n    };\n  } else if (clone.template) {\n    clone.template = `\n      <template v-if=\"mounted$\">${component.template}</template>\n      <template v-else><div></div></template>\n    `;\n  }\n  clone.setup = (props, ctx) => {\n    const instance = getCurrentInstance();\n    const attrs = { ...instance.attrs };\n    const directives = extractDirectives(instance);\n    for (const key in attrs) {\n      delete instance.attrs[key];\n    }\n    const mounted$ = ref(false);\n    onMounted(() => {\n      Object.assign(instance.attrs, attrs);\n      instance.vnode.dirs = directives;\n      mounted$.value = true;\n    });\n    return Promise.resolve(component.setup?.(props, ctx) || {}).then((setupState) => {\n      if (typeof setupState !== \"function\") {\n        setupState = setupState || {};\n        setupState.mounted$ = mounted$;\n        return setupState;\n      }\n      return (...args) => {\n        if (mounted$.value) {\n          const res = setupState(...args);\n          return res.children === null || typeof res.children === \"string\" ? cloneVNode(res) : h(res);\n        } else {\n          const fragment = getFragmentHTML(instance?.vnode.el ?? null) ?? [\"<div></div>\"];\n          return import.meta.client ? createStaticVNode(fragment.join(\"\"), fragment.length) : h(\"div\", ctx.attrs);\n        }\n      };\n    });\n  };\n  cache.set(component, clone);\n  return clone;\n}\nfunction extractDirectives(instance) {\n  if (!instance || !instance.vnode.dirs) {\n    return null;\n  }\n  const directives = instance.vnode.dirs;\n  instance.vnode.dirs = null;\n  return directives;\n}\n","import { computed, defineComponent, h, inject, onBeforeUnmount, onMounted, provide, ref, resolveComponent } from \"vue\";\nimport { hasProtocol, joinURL, parseQuery, withTrailingSlash, withoutTrailingSlash } from \"ufo\";\nimport { preloadRouteComponents } from \"../composables/preload.js\";\nimport { onNuxtReady } from \"../composables/ready.js\";\nimport { navigateTo, resolveRouteObject, useRouter } from \"../composables/router.js\";\nimport { useNuxtApp, useRuntimeConfig } from \"../nuxt.js\";\nimport { cancelIdleCallback, requestIdleCallback } from \"../compat/idle-callback.js\";\nimport { nuxtLinkDefaults } from \"#build/nuxt.config.mjs\";\nconst firstNonUndefined = (...args) => args.find((arg) => arg !== void 0);\nconst NuxtLinkDevKeySymbol = Symbol(\"nuxt-link-dev-key\");\n// @__NO_SIDE_EFFECTS__\nexport function defineNuxtLink(options) {\n  const componentName = options.componentName || \"NuxtLink\";\n  function checkPropConflicts(props, main, sub) {\n    if (import.meta.dev && props[main] !== void 0 && props[sub] !== void 0) {\n      console.warn(`[${componentName}] \\`${main}\\` and \\`${sub}\\` cannot be used together. \\`${sub}\\` will be ignored.`);\n    }\n  }\n  function resolveTrailingSlashBehavior(to, resolve) {\n    if (!to || options.trailingSlash !== \"append\" && options.trailingSlash !== \"remove\") {\n      return to;\n    }\n    if (typeof to === \"string\") {\n      return applyTrailingSlashBehavior(to, options.trailingSlash);\n    }\n    const path = \"path\" in to && to.path !== void 0 ? to.path : resolve(to).path;\n    const resolvedPath = {\n      ...to,\n      name: void 0,\n      // named routes would otherwise always override trailing slash behavior\n      path: applyTrailingSlashBehavior(path, options.trailingSlash)\n    };\n    return resolvedPath;\n  }\n  function useNuxtLink(props) {\n    const router = useRouter();\n    const config = useRuntimeConfig();\n    const hasTarget = computed(() => !!props.target && props.target !== \"_self\");\n    const isAbsoluteUrl = computed(() => {\n      const path = props.to || props.href || \"\";\n      return typeof path === \"string\" && hasProtocol(path, { acceptRelative: true });\n    });\n    const builtinRouterLink = resolveComponent(\"RouterLink\");\n    const useBuiltinLink = builtinRouterLink && typeof builtinRouterLink !== \"string\" ? builtinRouterLink.useLink : void 0;\n    const isExternal = computed(() => {\n      if (props.external) {\n        return true;\n      }\n      const path = props.to || props.href || \"\";\n      if (typeof path === \"object\") {\n        return false;\n      }\n      return path === \"\" || isAbsoluteUrl.value;\n    });\n    const to = computed(() => {\n      checkPropConflicts(props, \"to\", \"href\");\n      const path = props.to || props.href || \"\";\n      if (isExternal.value) {\n        return path;\n      }\n      return resolveTrailingSlashBehavior(path, router.resolve);\n    });\n    const link = isExternal.value ? void 0 : useBuiltinLink?.({ ...props, to });\n    const href = computed(() => {\n      if (!to.value || isAbsoluteUrl.value) {\n        return to.value;\n      }\n      if (isExternal.value) {\n        const path = typeof to.value === \"object\" && \"path\" in to.value ? resolveRouteObject(to.value) : to.value;\n        const href2 = typeof path === \"object\" ? router.resolve(path).href : path;\n        return resolveTrailingSlashBehavior(\n          href2,\n          router.resolve\n          /* will not be called */\n        );\n      }\n      if (typeof to.value === \"object\") {\n        return router.resolve(to.value)?.href ?? null;\n      }\n      return resolveTrailingSlashBehavior(\n        joinURL(config.app.baseURL, to.value),\n        router.resolve\n        /* will not be called */\n      );\n    });\n    return {\n      to,\n      hasTarget,\n      isAbsoluteUrl,\n      isExternal,\n      //\n      href,\n      isActive: link?.isActive ?? computed(() => to.value === router.currentRoute.value.path),\n      isExactActive: link?.isExactActive ?? computed(() => to.value === router.currentRoute.value.path),\n      route: link?.route ?? computed(() => router.resolve(to.value)),\n      async navigate() {\n        await navigateTo(href.value, { replace: props.replace, external: isExternal.value || hasTarget.value });\n      }\n    };\n  }\n  return defineComponent({\n    name: componentName,\n    props: {\n      // Routing\n      to: {\n        type: [String, Object],\n        default: void 0,\n        required: false\n      },\n      href: {\n        type: [String, Object],\n        default: void 0,\n        required: false\n      },\n      // Attributes\n      target: {\n        type: String,\n        default: void 0,\n        required: false\n      },\n      rel: {\n        type: String,\n        default: void 0,\n        required: false\n      },\n      noRel: {\n        type: Boolean,\n        default: void 0,\n        required: false\n      },\n      // Prefetching\n      prefetch: {\n        type: Boolean,\n        default: void 0,\n        required: false\n      },\n      noPrefetch: {\n        type: Boolean,\n        default: void 0,\n        required: false\n      },\n      // Styling\n      activeClass: {\n        type: String,\n        default: void 0,\n        required: false\n      },\n      exactActiveClass: {\n        type: String,\n        default: void 0,\n        required: false\n      },\n      prefetchedClass: {\n        type: String,\n        default: void 0,\n        required: false\n      },\n      // Vue Router's `<RouterLink>` additional props\n      replace: {\n        type: Boolean,\n        default: void 0,\n        required: false\n      },\n      ariaCurrentValue: {\n        type: String,\n        default: void 0,\n        required: false\n      },\n      // Edge cases handling\n      external: {\n        type: Boolean,\n        default: void 0,\n        required: false\n      },\n      // Slot API\n      custom: {\n        type: Boolean,\n        default: void 0,\n        required: false\n      }\n    },\n    useLink: useNuxtLink,\n    setup(props, { slots }) {\n      const router = useRouter();\n      const { to, href, navigate, isExternal, hasTarget, isAbsoluteUrl } = useNuxtLink(props);\n      const prefetched = ref(false);\n      const el = import.meta.server ? void 0 : ref(null);\n      const elRef = import.meta.server ? void 0 : (ref2) => {\n        el.value = props.custom ? ref2?.$el?.nextElementSibling : ref2?.$el;\n      };\n      if (import.meta.client) {\n        checkPropConflicts(props, \"prefetch\", \"noPrefetch\");\n        const shouldPrefetch = props.prefetch !== false && props.noPrefetch !== true && props.target !== \"_blank\" && !isSlowConnection();\n        if (shouldPrefetch) {\n          const nuxtApp = useNuxtApp();\n          let idleId;\n          let unobserve = null;\n          onMounted(() => {\n            const observer = useObserver();\n            onNuxtReady(() => {\n              idleId = requestIdleCallback(() => {\n                if (el?.value?.tagName) {\n                  unobserve = observer.observe(el.value, async () => {\n                    unobserve?.();\n                    unobserve = null;\n                    const path = typeof to.value === \"string\" ? to.value : isExternal.value ? resolveRouteObject(to.value) : router.resolve(to.value).fullPath;\n                    await Promise.all([\n                      nuxtApp.hooks.callHook(\"link:prefetch\", path).catch(() => {\n                      }),\n                      !isExternal.value && !hasTarget.value && preloadRouteComponents(to.value, router).catch(() => {\n                      })\n                    ]);\n                    prefetched.value = true;\n                  });\n                }\n              });\n            });\n          });\n          onBeforeUnmount(() => {\n            if (idleId) {\n              cancelIdleCallback(idleId);\n            }\n            unobserve?.();\n            unobserve = null;\n          });\n        }\n      }\n      if (import.meta.dev && import.meta.server && !props.custom) {\n        const isNuxtLinkChild = inject(NuxtLinkDevKeySymbol, false);\n        if (isNuxtLinkChild) {\n          console.log(\"[nuxt] [NuxtLink] You can't nest one <a> inside another <a>. This will cause a hydration error on client-side. You can pass the `custom` prop to take full control of the markup.\");\n        } else {\n          provide(NuxtLinkDevKeySymbol, true);\n        }\n      }\n      return () => {\n        if (!isExternal.value && !hasTarget.value) {\n          const routerLinkProps = {\n            ref: elRef,\n            to: to.value,\n            activeClass: props.activeClass || options.activeClass,\n            exactActiveClass: props.exactActiveClass || options.exactActiveClass,\n            replace: props.replace,\n            ariaCurrentValue: props.ariaCurrentValue,\n            custom: props.custom\n          };\n          if (!props.custom) {\n            if (prefetched.value) {\n              routerLinkProps.class = props.prefetchedClass || options.prefetchedClass;\n            }\n            routerLinkProps.rel = props.rel || void 0;\n          }\n          return h(\n            resolveComponent(\"RouterLink\"),\n            routerLinkProps,\n            slots.default\n          );\n        }\n        const target = props.target || null;\n        checkPropConflicts(props, \"noRel\", \"rel\");\n        const rel = firstNonUndefined(\n          // converts `\"\"` to `null` to prevent the attribute from being added as empty (`rel=\"\"`)\n          props.noRel ? \"\" : props.rel,\n          options.externalRelAttribute,\n          /*\n          * A fallback rel of `noopener noreferrer` is applied for external links or links that open in a new tab.\n          * This solves a reverse tabnapping security flaw in browsers pre-2021 as well as improving privacy.\n          */\n          isAbsoluteUrl.value || hasTarget.value ? \"noopener noreferrer\" : \"\"\n        ) || null;\n        if (props.custom) {\n          if (!slots.default) {\n            return null;\n          }\n          return slots.default({\n            href: href.value,\n            navigate,\n            get route() {\n              if (!href.value) {\n                return void 0;\n              }\n              const url = new URL(href.value, import.meta.client ? window.location.href : \"http://localhost\");\n              return {\n                path: url.pathname,\n                fullPath: url.pathname,\n                get query() {\n                  return parseQuery(url.search);\n                },\n                hash: url.hash,\n                params: {},\n                name: void 0,\n                matched: [],\n                redirectedFrom: void 0,\n                meta: {},\n                href: href.value\n              };\n            },\n            rel,\n            target,\n            isExternal: isExternal.value || hasTarget.value,\n            isActive: false,\n            isExactActive: false\n          });\n        }\n        return h(\"a\", { ref: el, href: href.value || null, rel, target }, slots.default?.());\n      };\n    }\n  });\n}\nexport default /* @__PURE__ */ defineNuxtLink(nuxtLinkDefaults);\nfunction applyTrailingSlashBehavior(to, trailingSlash) {\n  const normalizeFn = trailingSlash === \"append\" ? withTrailingSlash : withoutTrailingSlash;\n  const hasProtocolDifferentFromHttp = hasProtocol(to) && !to.startsWith(\"http\");\n  if (hasProtocolDifferentFromHttp) {\n    return to;\n  }\n  return normalizeFn(to, true);\n}\nfunction useObserver() {\n  if (import.meta.server) {\n    return;\n  }\n  const nuxtApp = useNuxtApp();\n  if (nuxtApp._observer) {\n    return nuxtApp._observer;\n  }\n  let observer = null;\n  const callbacks = /* @__PURE__ */ new Map();\n  const observe = (element, callback) => {\n    if (!observer) {\n      observer = new IntersectionObserver((entries) => {\n        for (const entry of entries) {\n          const callback2 = callbacks.get(entry.target);\n          const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n          if (isVisible && callback2) {\n            callback2();\n          }\n        }\n      });\n    }\n    callbacks.set(element, callback);\n    observer.observe(element);\n    return () => {\n      callbacks.delete(element);\n      observer.unobserve(element);\n      if (callbacks.size === 0) {\n        observer.disconnect();\n        observer = null;\n      }\n    };\n  };\n  const _observer = nuxtApp._observer = {\n    observe\n  };\n  return _observer;\n}\nfunction isSlowConnection() {\n  if (import.meta.server) {\n    return;\n  }\n  const cn = navigator.connection;\n  if (cn && (cn.saveData || /2g/.test(cn.effectiveType))) {\n    return true;\n  }\n  return false;\n}\n","/**\n * App configuration.\n * This file is used to configure the app settings.\n * Below are the default values.\n */\nexport default defineAppConfig({\n  siteName: 'Függöny Oázis',\n  shortDescription: 'This is an example of a WooNuxt store. It provides a modern, fast, and SEO friendly ecommerce store built with Nuxt and WooCommerce.',\n  description: `WooNuxt is unmatched when it comes to performance and scalability. Reap the benefits of having a online store that out performs all of your competitors. You can edit components to display your own information just like the one you're reading now.`,\n  baseUrl: 'https://v3.woonuxt.com',\n  siteImage: 'https://user-images.githubusercontent.com/5116925/218879668-f4c1f9fd-bef4-44b0-bc7f-e87d994aa3a1.png',\n  storeSettings: {\n    autoOpenCart: false,\n    showReviews: true,\n    showFilters: true,\n    showOrderByDropdown: true,\n    showSKU: true,\n    showRelatedProducts: true,\n    showProductCategoriesOnSingleProduct: true,\n    showBreadcrumbOnSingleProduct: true,\n    showMoveToWishlist: true,\n    saleBadge: 'percent', // 'percent', 'onSale' or 'hidden'\n  },\n});\n","\nimport { updateAppConfig } from '#app/config'\nimport { defuFn } from 'defu'\n\nconst inlineConfig = {\n  \"nuxt\": {},\n  \"icon\": {\n    \"provider\": \"server\",\n    \"class\": \"\",\n    \"aliases\": {},\n    \"iconifyApiEndpoint\": \"https://api.iconify.design\",\n    \"localApiEndpoint\": \"/api/_nuxt_icon\",\n    \"fallbackToApi\": true,\n    \"cssSelectorPrefix\": \"i-\",\n    \"cssWherePseudo\": true,\n    \"mode\": \"css\",\n    \"attrs\": {\n      \"aria-hidden\": true\n    },\n    \"collections\": [\n      \"academicons\",\n      \"akar-icons\",\n      \"ant-design\",\n      \"arcticons\",\n      \"basil\",\n      \"bi\",\n      \"bitcoin-icons\",\n      \"bpmn\",\n      \"brandico\",\n      \"bx\",\n      \"bxl\",\n      \"bxs\",\n      \"bytesize\",\n      \"carbon\",\n      \"cbi\",\n      \"charm\",\n      \"ci\",\n      \"cib\",\n      \"cif\",\n      \"cil\",\n      \"circle-flags\",\n      \"circum\",\n      \"clarity\",\n      \"codicon\",\n      \"covid\",\n      \"cryptocurrency\",\n      \"cryptocurrency-color\",\n      \"dashicons\",\n      \"devicon\",\n      \"devicon-plain\",\n      \"ei\",\n      \"el\",\n      \"emojione\",\n      \"emojione-monotone\",\n      \"emojione-v1\",\n      \"entypo\",\n      \"entypo-social\",\n      \"eos-icons\",\n      \"ep\",\n      \"et\",\n      \"eva\",\n      \"f7\",\n      \"fa\",\n      \"fa-brands\",\n      \"fa-regular\",\n      \"fa-solid\",\n      \"fa6-brands\",\n      \"fa6-regular\",\n      \"fa6-solid\",\n      \"fad\",\n      \"fe\",\n      \"feather\",\n      \"file-icons\",\n      \"flag\",\n      \"flagpack\",\n      \"flat-color-icons\",\n      \"flat-ui\",\n      \"flowbite\",\n      \"fluent\",\n      \"fluent-emoji\",\n      \"fluent-emoji-flat\",\n      \"fluent-emoji-high-contrast\",\n      \"fluent-mdl2\",\n      \"fontelico\",\n      \"fontisto\",\n      \"formkit\",\n      \"foundation\",\n      \"fxemoji\",\n      \"gala\",\n      \"game-icons\",\n      \"geo\",\n      \"gg\",\n      \"gis\",\n      \"gravity-ui\",\n      \"gridicons\",\n      \"grommet-icons\",\n      \"guidance\",\n      \"healthicons\",\n      \"heroicons\",\n      \"heroicons-outline\",\n      \"heroicons-solid\",\n      \"humbleicons\",\n      \"ic\",\n      \"icomoon-free\",\n      \"icon-park\",\n      \"icon-park-outline\",\n      \"icon-park-solid\",\n      \"icon-park-twotone\",\n      \"iconamoon\",\n      \"iconoir\",\n      \"icons8\",\n      \"il\",\n      \"ion\",\n      \"iwwa\",\n      \"jam\",\n      \"la\",\n      \"lets-icons\",\n      \"line-md\",\n      \"logos\",\n      \"ls\",\n      \"lucide\",\n      \"mage\",\n      \"majesticons\",\n      \"maki\",\n      \"map\",\n      \"marketeq\",\n      \"material-symbols\",\n      \"material-symbols-light\",\n      \"mdi\",\n      \"mdi-light\",\n      \"medical-icon\",\n      \"memory\",\n      \"meteocons\",\n      \"mi\",\n      \"mingcute\",\n      \"mono-icons\",\n      \"mynaui\",\n      \"nimbus\",\n      \"nonicons\",\n      \"noto\",\n      \"noto-v1\",\n      \"octicon\",\n      \"oi\",\n      \"ooui\",\n      \"openmoji\",\n      \"oui\",\n      \"pajamas\",\n      \"pepicons\",\n      \"pepicons-pencil\",\n      \"pepicons-pop\",\n      \"pepicons-print\",\n      \"ph\",\n      \"pixelarticons\",\n      \"prime\",\n      \"ps\",\n      \"quill\",\n      \"radix-icons\",\n      \"raphael\",\n      \"ri\",\n      \"si-glyph\",\n      \"simple-icons\",\n      \"simple-line-icons\",\n      \"skill-icons\",\n      \"solar\",\n      \"streamline\",\n      \"streamline-emojis\",\n      \"subway\",\n      \"svg-spinners\",\n      \"system-uicons\",\n      \"tabler\",\n      \"tdesign\",\n      \"teenyicons\",\n      \"token\",\n      \"token-branded\",\n      \"topcoat\",\n      \"twemoji\",\n      \"typcn\",\n      \"uil\",\n      \"uim\",\n      \"uis\",\n      \"uit\",\n      \"uiw\",\n      \"unjs\",\n      \"vaadin\",\n      \"vs\",\n      \"vscode-icons\",\n      \"websymbol\",\n      \"whh\",\n      \"wi\",\n      \"wpf\",\n      \"zmdi\",\n      \"zondicons\"\n    ]\n  }\n}\n\n// Vite - webpack is handled directly in #app/config\nif (import.meta.hot) {\n  import.meta.hot.accept((newModule) => {\n    updateAppConfig(newModule.default)\n  })\n}\n\nimport cfg0 from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/app.config.ts\"\n\nexport default /*@__PURE__*/ defuFn(cfg0, inlineConfig)\n","import { reactive } from \"vue\";\nimport { klona } from \"klona\";\nimport { useNuxtApp } from \"./nuxt.js\";\nimport __appConfig from \"#build/app.config.mjs\";\nexport const _getAppConfig = () => __appConfig;\nfunction deepDelete(obj, newObj) {\n  for (const key in obj) {\n    const val = newObj[key];\n    if (!(key in newObj)) {\n      delete obj[key];\n    }\n    if (val !== null && typeof val === \"object\") {\n      deepDelete(obj[key], newObj[key]);\n    }\n  }\n}\nfunction deepAssign(obj, newObj) {\n  for (const key in newObj) {\n    const val = newObj[key];\n    if (val !== null && typeof val === \"object\") {\n      const defaultVal = Array.isArray(val) ? [] : {};\n      obj[key] = obj[key] || defaultVal;\n      deepAssign(obj[key], val);\n    } else {\n      obj[key] = val;\n    }\n  }\n}\nexport function useAppConfig() {\n  const nuxtApp = useNuxtApp();\n  if (!nuxtApp._appConfig) {\n    nuxtApp._appConfig = import.meta.server ? klona(__appConfig) : reactive(__appConfig);\n  }\n  return nuxtApp._appConfig;\n}\nexport function updateAppConfig(appConfig) {\n  const _appConfig = useAppConfig();\n  deepAssign(_appConfig, appConfig);\n}\nif (import.meta.dev) {\n  const applyHMR = (newConfig) => {\n    const appConfig = useAppConfig();\n    if (newConfig && appConfig) {\n      deepAssign(appConfig, newConfig);\n      deepDelete(appConfig, newConfig);\n    }\n  };\n  if (import.meta.hot) {\n    import.meta.hot.accept((newModule) => {\n      const newConfig = newModule?._getAppConfig();\n      applyHMR(newConfig);\n    });\n  }\n  if (import.meta.webpackHot) {\n    import.meta.webpackHot.accept(\"#build/app.config.mjs\", () => {\n      applyHMR(__appConfig);\n    });\n  }\n}\n","import { isString, isObject } from \"@intlify/shared\";\nimport { getLocalesRegex } from \"../utils.mjs\";\nimport { localeCodes } from \"#build/i18n.options.mjs\";\nimport { useRuntimeConfig } from \"nuxt/app\";\nexport function createLocaleFromRouteGetter() {\n  const { routesNameSeparator, defaultLocaleRouteNameSuffix } = useRuntimeConfig().public.i18n;\n  const localesPattern = `(${localeCodes.join(\"|\")})`;\n  const defaultSuffixPattern = `(?:${routesNameSeparator}${defaultLocaleRouteNameSuffix})?`;\n  const regexpName = new RegExp(`${routesNameSeparator}${localesPattern}${defaultSuffixPattern}$`, \"i\");\n  const regexpPath = getLocalesRegex(localeCodes);\n  const getLocaleFromRoute = (route) => {\n    if (isObject(route)) {\n      if (route.name) {\n        const name = isString(route.name) ? route.name : route.name.toString();\n        const matches = name.match(regexpName);\n        if (matches && matches.length > 1) {\n          return matches[1];\n        }\n      } else if (route.path) {\n        const matches = route.path.match(regexpPath);\n        if (matches && matches.length > 1) {\n          return matches[1];\n        }\n      }\n    } else if (isString(route)) {\n      const matches = route.match(regexpPath);\n      if (matches && matches.length > 1) {\n        return matches[1];\n      }\n    }\n    return \"\";\n  };\n  return getLocaleFromRoute;\n}\n","import { computed } from \"vue\";\nimport { createI18n } from \"vue-i18n\";\nimport { defineNuxtPlugin, useRoute, addRouteMiddleware, defineNuxtRouteMiddleware, useNuxtApp } from \"#imports\";\nimport {\n  localeCodes,\n  vueI18nConfigs,\n  isSSG,\n  localeLoaders,\n  parallelPlugin,\n  normalizedLocales,\n  SWITCH_LOCALE_PATH_LINK_IDENTIFIER\n} from \"#build/i18n.options.mjs\";\nimport { loadVueI18nOptions, loadInitialMessages, loadLocale } from \"../messages.mjs\";\nimport { useSwitchLocalePath } from \"../composables/index.mjs\";\nimport {\n  loadAndSetLocale,\n  detectLocale,\n  detectRedirect,\n  navigate,\n  injectNuxtHelpers,\n  extendBaseUrl,\n  _setLocale,\n  mergeLocaleMessage\n} from \"../utils.mjs\";\nimport {\n  getBrowserLocale as _getBrowserLocale,\n  getLocaleCookie as _getLocaleCookie,\n  setLocaleCookie as _setLocaleCookie,\n  detectBrowserLanguage,\n  DefaultDetectBrowserLanguageFromResult,\n  getI18nCookie,\n  runtimeDetectBrowserLanguage\n} from \"../internal.mjs\";\nimport { getComposer, getLocale, setLocale } from \"../routing/utils.mjs\";\nimport { extendI18n, createLocaleFromRouteGetter } from \"../routing/extends/index.mjs\";\nexport default defineNuxtPlugin({\n  name: \"i18n:plugin\",\n  parallel: parallelPlugin,\n  async setup(nuxt) {\n    const route = useRoute();\n    const { vueApp: app } = nuxt;\n    const nuxtContext = nuxt;\n    const runtimeI18n = { ...nuxtContext.$config.public.i18n };\n    runtimeI18n.baseUrl = extendBaseUrl();\n    const _detectBrowserLanguage = runtimeDetectBrowserLanguage();\n    __DEBUG__ && console.log(\"isSSG\", isSSG);\n    __DEBUG__ && console.log(\"useCookie on setup\", _detectBrowserLanguage && _detectBrowserLanguage.useCookie);\n    __DEBUG__ && console.log(\"defaultLocale on setup\", runtimeI18n.defaultLocale);\n    const vueI18nOptions = await loadVueI18nOptions(vueI18nConfigs, useNuxtApp());\n    vueI18nOptions.messages = vueI18nOptions.messages || {};\n    vueI18nOptions.fallbackLocale = vueI18nOptions.fallbackLocale ?? false;\n    const getLocaleFromRoute = createLocaleFromRouteGetter();\n    const getDefaultLocale = (defaultLocale) => defaultLocale || vueI18nOptions.locale || \"en-US\";\n    const localeCookie = getI18nCookie();\n    let initialLocale = detectLocale(\n      route,\n      getLocaleFromRoute,\n      vueI18nOptions.locale,\n      getDefaultLocale(runtimeI18n.defaultLocale),\n      {\n        ssg: isSSG && runtimeI18n.strategy === \"no_prefix\" ? \"ssg_ignore\" : \"normal\",\n        callType: \"setup\",\n        firstAccess: true,\n        localeCookie: _getLocaleCookie(localeCookie, _detectBrowserLanguage, runtimeI18n.defaultLocale)\n      },\n      runtimeI18n\n    );\n    __DEBUG__ && console.log(\"first detect initial locale\", initialLocale);\n    vueI18nOptions.messages = await loadInitialMessages(vueI18nOptions.messages, localeLoaders, {\n      localeCodes,\n      initialLocale,\n      lazy: runtimeI18n.lazy,\n      defaultLocale: runtimeI18n.defaultLocale,\n      fallbackLocale: vueI18nOptions.fallbackLocale\n    });\n    initialLocale = getDefaultLocale(initialLocale);\n    __DEBUG__ && console.log(\"final initial locale:\", initialLocale);\n    const i18n = createI18n({ ...vueI18nOptions, locale: initialLocale });\n    let notInitialSetup = true;\n    const isInitialLocaleSetup = (locale) => initialLocale !== locale && notInitialSetup;\n    let ssgModeInitialSetup = true;\n    const isSSGModeInitialSetup = () => isSSG && ssgModeInitialSetup;\n    if (isSSGModeInitialSetup() && runtimeI18n.strategy === \"no_prefix\" && import.meta.client) {\n      nuxt.hook(\"app:mounted\", async () => {\n        __DEBUG__ && console.log(\"hook app:mounted\");\n        const {\n          locale: browserLocale,\n          stat,\n          reason,\n          from\n        } = _detectBrowserLanguage ? detectBrowserLanguage(\n          route,\n          vueI18nOptions.locale,\n          {\n            ssg: \"ssg_setup\",\n            callType: \"setup\",\n            firstAccess: true,\n            localeCookie: _getLocaleCookie(localeCookie, _detectBrowserLanguage, runtimeI18n.defaultLocale)\n          },\n          initialLocale\n        ) : DefaultDetectBrowserLanguageFromResult;\n        __DEBUG__ && console.log(\n          \"app:mounted: detectBrowserLanguage (browserLocale, stat, reason, from) -\",\n          browserLocale,\n          stat,\n          reason,\n          from\n        );\n        _setLocale(i18n, browserLocale);\n        ssgModeInitialSetup = false;\n      });\n    }\n    extendI18n(i18n, {\n      locales: runtimeI18n.configLocales,\n      localeCodes,\n      baseUrl: runtimeI18n.baseUrl,\n      context: nuxtContext,\n      hooks: {\n        onExtendComposer(composer) {\n          composer.strategy = runtimeI18n.strategy;\n          composer.localeProperties = computed(\n            () => normalizedLocales.find((l) => l.code === composer.locale.value) || { code: composer.locale.value }\n          );\n          composer.setLocale = async (locale) => {\n            const localeSetup = isInitialLocaleSetup(locale);\n            const modified = await loadAndSetLocale(locale, i18n, runtimeI18n, localeSetup);\n            if (modified && localeSetup) {\n              notInitialSetup = false;\n            }\n            const redirectPath = await nuxtContext.runWithContext(\n              () => detectRedirect({\n                route: { to: route },\n                targetLocale: locale,\n                routeLocaleGetter: getLocaleFromRoute\n              })\n            );\n            __DEBUG__ && console.log(\"redirectPath on setLocale\", redirectPath);\n            await nuxtContext.runWithContext(\n              async () => await navigate(\n                {\n                  nuxtApp: nuxtContext,\n                  i18n,\n                  redirectPath,\n                  locale,\n                  route\n                },\n                { enableNavigate: true }\n              )\n            );\n          };\n          composer.loadLocaleMessages = async (locale) => {\n            const setter = (locale2, message) => mergeLocaleMessage(i18n, locale2, message);\n            await loadLocale(locale, localeLoaders, setter);\n          };\n          composer.differentDomains = runtimeI18n.differentDomains;\n          composer.defaultLocale = runtimeI18n.defaultLocale;\n          composer.getBrowserLocale = () => _getBrowserLocale();\n          composer.getLocaleCookie = () => _getLocaleCookie(localeCookie, _detectBrowserLanguage, runtimeI18n.defaultLocale);\n          composer.setLocaleCookie = (locale) => _setLocaleCookie(localeCookie, locale, _detectBrowserLanguage);\n          composer.onBeforeLanguageSwitch = (oldLocale, newLocale, initialSetup, context) => nuxt.callHook(\"i18n:beforeLocaleSwitch\", { oldLocale, newLocale, initialSetup, context });\n          composer.onLanguageSwitched = (oldLocale, newLocale) => nuxt.callHook(\"i18n:localeSwitched\", { oldLocale, newLocale });\n          composer.finalizePendingLocaleChange = async () => {\n            if (!i18n.__pendingLocale) {\n              return;\n            }\n            setLocale(i18n, i18n.__pendingLocale);\n            if (i18n.__resolvePendingLocalePromise) {\n              await i18n.__resolvePendingLocalePromise();\n            }\n            i18n.__pendingLocale = void 0;\n          };\n          composer.waitForPendingLocaleChange = async () => {\n            if (i18n.__pendingLocale && i18n.__pendingLocalePromise) {\n              await i18n.__pendingLocalePromise;\n            }\n          };\n        },\n        onExtendExportedGlobal(g) {\n          return {\n            strategy: {\n              get() {\n                return g.strategy;\n              }\n            },\n            localeProperties: {\n              get() {\n                return g.localeProperties.value;\n              }\n            },\n            setLocale: {\n              get() {\n                return async (locale) => Reflect.apply(g.setLocale, g, [locale]);\n              }\n            },\n            differentDomains: {\n              get() {\n                return g.differentDomains;\n              }\n            },\n            defaultLocale: {\n              get() {\n                return g.defaultLocale;\n              }\n            },\n            getBrowserLocale: {\n              get() {\n                return () => Reflect.apply(g.getBrowserLocale, g, []);\n              }\n            },\n            getLocaleCookie: {\n              get() {\n                return () => Reflect.apply(g.getLocaleCookie, g, []);\n              }\n            },\n            setLocaleCookie: {\n              get() {\n                return (locale) => Reflect.apply(g.setLocaleCookie, g, [locale]);\n              }\n            },\n            onBeforeLanguageSwitch: {\n              get() {\n                return (oldLocale, newLocale, initialSetup, context) => Reflect.apply(g.onBeforeLanguageSwitch, g, [oldLocale, newLocale, initialSetup, context]);\n              }\n            },\n            onLanguageSwitched: {\n              get() {\n                return (oldLocale, newLocale) => Reflect.apply(g.onLanguageSwitched, g, [oldLocale, newLocale]);\n              }\n            },\n            finalizePendingLocaleChange: {\n              get() {\n                return () => Reflect.apply(g.finalizePendingLocaleChange, g, []);\n              }\n            },\n            waitForPendingLocaleChange: {\n              get() {\n                return () => Reflect.apply(g.waitForPendingLocaleChange, g, []);\n              }\n            }\n          };\n        },\n        onExtendVueI18n(composer) {\n          return {\n            strategy: {\n              get() {\n                return composer.strategy;\n              }\n            },\n            localeProperties: {\n              get() {\n                return composer.localeProperties.value;\n              }\n            },\n            setLocale: {\n              get() {\n                return async (locale) => Reflect.apply(composer.setLocale, composer, [locale]);\n              }\n            },\n            loadLocaleMessages: {\n              get() {\n                return async (locale) => Reflect.apply(composer.loadLocaleMessages, composer, [locale]);\n              }\n            },\n            differentDomains: {\n              get() {\n                return composer.differentDomains;\n              }\n            },\n            defaultLocale: {\n              get() {\n                return composer.defaultLocale;\n              }\n            },\n            getBrowserLocale: {\n              get() {\n                return () => Reflect.apply(composer.getBrowserLocale, composer, []);\n              }\n            },\n            getLocaleCookie: {\n              get() {\n                return () => Reflect.apply(composer.getLocaleCookie, composer, []);\n              }\n            },\n            setLocaleCookie: {\n              get() {\n                return (locale) => Reflect.apply(composer.setLocaleCookie, composer, [locale]);\n              }\n            },\n            onBeforeLanguageSwitch: {\n              get() {\n                return (oldLocale, newLocale, initialSetup, context) => Reflect.apply(composer.onBeforeLanguageSwitch, composer, [\n                  oldLocale,\n                  newLocale,\n                  initialSetup,\n                  context\n                ]);\n              }\n            },\n            onLanguageSwitched: {\n              get() {\n                return (oldLocale, newLocale) => Reflect.apply(composer.onLanguageSwitched, composer, [oldLocale, newLocale]);\n              }\n            },\n            finalizePendingLocaleChange: {\n              get() {\n                return () => Reflect.apply(composer.finalizePendingLocaleChange, composer, []);\n              }\n            },\n            waitForPendingLocaleChange: {\n              get() {\n                return () => Reflect.apply(composer.waitForPendingLocaleChange, composer, []);\n              }\n            }\n          };\n        }\n      }\n    });\n    const pluginOptions = {\n      __composerExtend: (c) => {\n        const g = getComposer(i18n);\n        c.strategy = g.strategy;\n        c.localeProperties = computed(() => g.localeProperties.value);\n        c.setLocale = g.setLocale;\n        c.differentDomains = g.differentDomains;\n        c.getBrowserLocale = g.getBrowserLocale;\n        c.getLocaleCookie = g.getLocaleCookie;\n        c.setLocaleCookie = g.setLocaleCookie;\n        c.onBeforeLanguageSwitch = g.onBeforeLanguageSwitch;\n        c.onLanguageSwitched = g.onLanguageSwitched;\n        c.finalizePendingLocaleChange = g.finalizePendingLocaleChange;\n        c.waitForPendingLocaleChange = g.waitForPendingLocaleChange;\n        return () => {\n        };\n      }\n    };\n    app.use(i18n, pluginOptions);\n    injectNuxtHelpers(nuxtContext, i18n);\n    if (runtimeI18n.experimental.switchLocalePathLinkSSR === true) {\n      const switchLocalePath = useSwitchLocalePath();\n      const switchLocalePathLinkWrapperExpr = new RegExp(\n        [\n          `<!--${SWITCH_LOCALE_PATH_LINK_IDENTIFIER}-\\\\[(\\\\w+)\\\\]-->`,\n          `.+?`,\n          `<!--/${SWITCH_LOCALE_PATH_LINK_IDENTIFIER}-->`\n        ].join(\"\"),\n        \"g\"\n      );\n      nuxt.hook(\"app:rendered\", (ctx) => {\n        if (ctx.renderResult?.html == null)\n          return;\n        ctx.renderResult.html = ctx.renderResult.html.replaceAll(\n          switchLocalePathLinkWrapperExpr,\n          (match, p1) => match.replace(/href=\"([^\"]+)\"/, `href=\"${switchLocalePath(p1 ?? \"\")}\"`)\n        );\n      });\n    }\n    let routeChangeCount = 0;\n    addRouteMiddleware(\n      \"locale-changing\",\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      defineNuxtRouteMiddleware(async (to, from) => {\n        __DEBUG__ && console.log(\"locale-changing middleware\", to, from);\n        const locale = detectLocale(\n          to,\n          getLocaleFromRoute,\n          vueI18nOptions.locale,\n          () => {\n            return getLocale(i18n) || getDefaultLocale(runtimeI18n.defaultLocale);\n          },\n          {\n            ssg: isSSGModeInitialSetup() && runtimeI18n.strategy === \"no_prefix\" ? \"ssg_ignore\" : \"normal\",\n            callType: \"routing\",\n            firstAccess: routeChangeCount === 0,\n            localeCookie: _getLocaleCookie(localeCookie, _detectBrowserLanguage, runtimeI18n.defaultLocale)\n          },\n          runtimeI18n\n        );\n        __DEBUG__ && console.log(\"detect locale\", locale);\n        const localeSetup = isInitialLocaleSetup(locale);\n        __DEBUG__ && console.log(\"localeSetup\", localeSetup);\n        const modified = await loadAndSetLocale(locale, i18n, runtimeI18n, localeSetup);\n        if (modified && localeSetup) {\n          notInitialSetup = false;\n        }\n        const redirectPath = await nuxtContext.runWithContext(\n          () => detectRedirect({\n            route: { to, from },\n            targetLocale: locale,\n            routeLocaleGetter: runtimeI18n.strategy === \"no_prefix\" ? () => locale : getLocaleFromRoute,\n            calledWithRouting: true\n          })\n        );\n        __DEBUG__ && console.log(\"redirectPath on locale-changing middleware\", redirectPath);\n        routeChangeCount++;\n        return await nuxtContext.runWithContext(\n          async () => navigate({ nuxtApp: nuxtContext, i18n, redirectPath, locale, route: to })\n        );\n      }),\n      { global: true }\n    );\n  }\n});\n","import { addAPIProvider, _api, disableCache } from \"@iconify/vue\";\nimport { defineNuxtPlugin, useAppConfig, useRuntimeConfig } from \"#imports\";\nexport default defineNuxtPlugin({\n  name: \"@nuxt/icon\",\n  setup() {\n    const config = useRuntimeConfig();\n    const options = useAppConfig().icon;\n    _api.setFetch($fetch.native);\n    disableCache(\"all\");\n    const resources = [];\n    if (options.provider === \"server\") {\n      const baseURL = config.app?.baseURL?.replace(/\\/$/, \"\") ?? \"\";\n      resources.push(baseURL + (options.localApiEndpoint || \"/api/_nuxt_icon\"));\n      if (options.fallbackToApi) {\n        resources.push(options.iconifyApiEndpoint);\n      }\n    } else {\n      resources.push(options.iconifyApiEndpoint);\n    }\n    addAPIProvider(\"\", { resources });\n  }\n});\n","import { defu } from \"defu\";\nimport { GraphQLClient } from \"graphql-request\";\nimport { ref, useCookie, defineNuxtPlugin, useRuntimeConfig, useRequestHeaders } from \"#imports\";\nexport default defineNuxtPlugin((nuxtApp) => {\n  if (!nuxtApp?._gqlState) {\n    nuxtApp._gqlState = ref({});\n    const config = useRuntimeConfig();\n    const { clients } = defu(config?.[\"graphql-client\"], config?.public?.[\"graphql-client\"]);\n    const proxyHeaders = Object.values(clients || {}).flatMap((v) => v?.proxyHeaders).filter((v, i, a) => Boolean(v) && a.indexOf(v) === i);\n    if (!proxyHeaders.includes(\"cookie\")) {\n      proxyHeaders.push(\"cookie\");\n    }\n    const requestHeaders = import.meta.server && useRequestHeaders(proxyHeaders) || void 0;\n    for (const [name, v] of Object.entries(clients || {})) {\n      const host = import.meta.client && v?.clientHost || v.host;\n      const proxyCookie = v?.proxyCookies && !!requestHeaders?.cookie;\n      let headers = v?.headers;\n      const serverHeaders = import.meta.server && (typeof headers?.serverOnly === \"object\" && headers?.serverOnly) || {};\n      if (headers?.serverOnly) {\n        headers = { ...headers };\n        delete headers.serverOnly;\n      }\n      for (const header of v?.proxyHeaders || []) {\n        if (!requestHeaders?.[header]) {\n          continue;\n        }\n        headers = { ...headers, [header]: requestHeaders?.[header] };\n      }\n      const opts = {\n        headers: {\n          ...headers,\n          ...serverHeaders,\n          ...proxyCookie && { cookie: requestHeaders?.cookie }\n        },\n        ...v?.corsOptions\n      };\n      nuxtApp._gqlState.value[name] = {\n        options: opts,\n        instance: new GraphQLClient(host, {\n          ...v?.preferGETQueries && {\n            method: \"GET\",\n            jsonSerializer: { parse: JSON.parse, stringify: JSON.stringify }\n          },\n          requestMiddleware: async (req) => {\n            const token = ref();\n            await nuxtApp.callHook(\"gql:auth:init\", { token, client: name });\n            const reqOpts = defu(nuxtApp._gqlState.value?.[name]?.options || {}, { headers: {} });\n            if (!token.value) {\n              token.value = reqOpts?.token?.value;\n            }\n            if (token.value === void 0 && typeof v.tokenStorage === \"object\") {\n              if (v.tokenStorage?.mode === \"cookie\") {\n                if (import.meta.client) {\n                  token.value = useCookie(v.tokenStorage.name).value;\n                } else if (requestHeaders?.cookie) {\n                  const cookieName = `${v.tokenStorage.name}=`;\n                  token.value = requestHeaders?.cookie.split(\";\").find((c) => c.trim().startsWith(cookieName))?.split(\"=\")?.[1];\n                }\n              } else if (import.meta.client && v.tokenStorage?.mode === \"localStorage\") {\n                const storedToken = localStorage.getItem(v.tokenStorage.name);\n                if (storedToken) {\n                  token.value = storedToken;\n                }\n              }\n            }\n            if (token.value === void 0) {\n              token.value = v?.token?.value;\n            }\n            if (token.value) {\n              token.value = token.value.trim();\n              const tokenName = token.value === reqOpts?.token?.value ? reqOpts?.token?.name || v?.token?.name : v?.token?.name;\n              const tokenType = token.value === reqOpts?.token?.value ? reqOpts?.token?.type === null ? null : reqOpts?.token?.type || v?.token?.type : v?.token?.type;\n              const authScheme = !!token.value?.match(/^[a-zA-Z]+\\s/)?.[0];\n              if (authScheme) {\n                reqOpts.headers[tokenName] = token.value;\n              } else {\n                reqOpts.headers[tokenName] = !tokenType ? token.value : `${tokenType} ${token.value}`;\n              }\n            }\n            if (reqOpts?.token) {\n              delete reqOpts.token;\n            }\n            return defu(req, reqOpts);\n          }\n        })\n      };\n    }\n  }\n});\n","import pkg from '../../../woonuxt_base/package.json';\n\n// A collection of helper functions.\nexport function useHelpers() {\n  const route = useRoute();\n  const runtimeConfig = useRuntimeConfig();\n\n  const isShowingMobileMenu = useState<boolean>('isShowingMobileMenu', () => false);\n  const wooNuxtVersionInfo: string = pkg.version || '0.0.0';\n  const productsPerPage: number = runtimeConfig.public?.PRODUCTS_PER_PAGE || 24;\n  const wooNuxtSEO = runtimeConfig.public?.WOO_NUXT_SEO as WooNuxtSEOItem[];\n  const frontEndUrl = runtimeConfig.public?.FRONT_END_URL?.replace(/\\/$/, '') || null;\n  const isDev: boolean = process.env.NODE_ENV === 'development';\n  const fallbackImage = '/images/placeholder.jpg';\n\n  /**\n   * Toggles the mobile menu.\n   */\n  function toggleMobileMenu(state: boolean | undefined = undefined): void {\n    isShowingMobileMenu.value = state ?? !isShowingMobileMenu.value;\n  }\n\n  /**\n   * Formats an array of variation objects by removing spaces and hyphens from the 'name' and 'value' properties.\n   * @param {any[]} arr - The array of variation objects to format. Each object should have 'name' and 'value' properties.\n   * @returns {any[]} The formatted array of variation objects.\n   */\n  const formatVariationArrays = (arr: any[]): any[] => arr.map((a) => ({ name: a.name.replace(/[-\\s]/g, ''), value: a.value.replace(/[-\\s]/g, '') }));\n\n  /**\n   * Determines if two arrays of variations are equal by comparing the formatted arrays.\n   * @param {any[]} a1 - The first array of variations to compare.\n   * @param {any[]} a2 - The second array of variations to compare.\n   * @returns {boolean} True if the arrays are equal, false otherwise.\n   */\n  const arraysEqual = (a1: any[], a2: any[]): boolean => JSON.stringify(formatVariationArrays(a1)) === JSON.stringify(formatVariationArrays(a2));\n\n  // Formats an array of variations by converting the name and value properties to lowercase.\n  const formatArray = (arr: any[]): any[] => {\n    return arr.map((v) => {\n      let name = v.name.toLowerCase();\n      name = name.startsWith('pa_') ? name.replace('pa_', '') : name;\n      const value = v.value.toLowerCase();\n      return { name, value };\n    });\n  };\n\n  /**\n   * Clears all cookies.\n   */\n  function clearAllCookies(): void {\n    const cookies = document.cookie.split(';');\n    for (const cookie of cookies) {\n      const eqPos = cookie.indexOf('=');\n      const name = eqPos > -1 ? cookie.substring(0, eqPos) : cookie;\n      document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT';\n    }\n  }\n\n  /**\n   * Clear all local storage.\n   */\n  function clearAllLocalStorage(): void {\n    localStorage.clear();\n  }\n\n  /**\n   * Replaces a query parameter in a URL.Replace a query parameter in a URL\n   * @param {string} param - The query parameter to replace.\n   * @param {string} newval - The new value for the query parameter.\n   * @param {string} search - The URL to search.\n   * @returns {string} The updated URL.\n   */\n  function replaceQueryParam(param: string, newval: string, search: string): string {\n    const regex = new RegExp('([?;&])' + param + '[^&;]*[;&]?');\n    const query = search.replace(regex, '$1').replace(/&$/, '');\n    return (query.length > 2 ? query + '&' : '?') + (newval ? param + '=' + newval : '');\n  }\n\n  /**\n   * Removes a class from the body element.\n   * @param {string} className - The class to remove.\n   */\n  function removeBodyClass(className: string): void {\n    const body = document.querySelector('body');\n    body?.classList.remove(className);\n  }\n\n  /**\n   * Adds a class to the body element.\n   * @param {string} className - The class to add.\n   */\n  function addBodyClass(className: string): void {\n    const body = document.querySelector('body');\n    body?.classList.add(className);\n  }\n\n  /**\n   * Toggles a class on the body element.\n   * @param {string} className - The class to toggle.\n   */\n  function toggleBodyClass(className: string): void {\n    const body = document.querySelector('body');\n    body?.classList.contains(className) ? body.classList.remove(className) : body?.classList.add(className);\n  }\n\n  /**\n   * Checks for variation type of 'any' and returns an array of the indexes of those variations.\n   * @param {Product} product - The product to check.\n   * @returns {number[]} An array of the indexes of variations with a type of 'any'.\n   */\n  const checkForVariationTypeOfAny = (product: Product): number[] => {\n    const numberOfVariation = product?.attributes?.nodes?.length ?? 0;\n    let indexOfTypeAny = [] as number[];\n\n    for (let index = 0; index < numberOfVariation; index++) {\n      const tempArray = [] as string[];\n      product.variations?.nodes.forEach((element) => {\n        // @ts-ignore\n        if (element.attributes?.nodes[index]?.value) tempArray.push(element.attributes.nodes[index].value);\n      });\n\n      if (!tempArray.some(Boolean)) indexOfTypeAny.push(index);\n    }\n\n    return indexOfTypeAny;\n  };\n\n  /**\n   * Determines if the route query is empty.\n   * @returns {boolean} True if the route query is empty, false otherwise.\n   */\n  const isQueryEmpty = computed<boolean>(() => Object.keys(route.query).length === 0);\n\n  /**\n   * Formats a date string.\n   * @param {string} date - The date string to format.\n   * @returns {string} The formatted date string.\n   */\n  const formatDate = (date?: string | null): string => {\n    if (!date) return '';\n    return new Date(date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });\n  };\n\n  /**\n   * Formats a price string.\n   * @param {string} price - The price string to format.\n   * @returns {string} The formatted price string.\n   */\n  const formatPrice = (price: string): string => parseFloat(price).toLocaleString('en-US', { style: 'currency', currency: 'EUR' });\n\n  /**\n   * Scrolls to the top of the page.\n   */\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  /**\n   * Strips HTML tags from a string.\n   * @param {string} str - The string to strip.\n   * @returns {string} The stripped string.\n   */\n  const stripHtml = (str: string | null | undefined = ''): string => {\n    return str === null ? '' : str.replace(/(<([^>]+)>)/gi, '');\n  };\n\n  /**\n   * Debounces a function.\n   * @param {Function}\n   * @param {number} delay - The delay in milliseconds.\n   * @returns {Function} The debounced function.\n   */\n  const debounce = (func: Function, delay: number = 100) => {\n    let inDebounce: NodeJS.Timeout;\n    return function (this: any, ...args: any[]) {\n      clearTimeout(inDebounce);\n      inDebounce = setTimeout(() => func.apply(this, args), delay);\n    };\n  };\n\n  /**\n   *  Logs a GraphQL error message. Only show logs in development or when the 'debug' query parameter is present.\n   * @param error\n   */\n  const logGQLError = (error: any) => {\n    if (!isDev && !route.query.debug) return;\n    const errorMessage = error?.gqlErrors?.[0]?.message;\n    if (errorMessage) {\n      console.error(errorMessage);\n    }\n  };\n\n  return {\n    isShowingMobileMenu,\n    wooNuxtVersionInfo,\n    productsPerPage,\n    isQueryEmpty,\n    wooNuxtSEO,\n    frontEndUrl,\n    isDev,\n    fallbackImage,\n    formatArray,\n    arraysEqual,\n    clearAllCookies,\n    clearAllLocalStorage,\n    replaceQueryParam,\n    addBodyClass,\n    removeBodyClass,\n    toggleBodyClass,\n    toggleMobileMenu,\n    checkForVariationTypeOfAny,\n    formatDate,\n    formatPrice,\n    scrollToTop,\n    stripHtml,\n    debounce,\n    logGQLError,\n  };\n}\n","import type { GraphQLClient, RequestOptions } from 'graphql-request';\nimport { gql } from 'graphql-request';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\ntype GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n};\n\n/** Input for the addCartItems mutation. */\nexport type AddCartItemsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Cart items to be added */\n  items?: InputMaybe<Array<InputMaybe<CartItemInput>>>;\n};\n\n/** Input for the addFee mutation. */\nexport type AddFeeInput = {\n  /** Fee amount */\n  amount?: InputMaybe<Scalars['Float']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Unique name for the fee. */\n  name: Scalars['String']['input'];\n  /** The tax class for the fee if taxable. */\n  taxClass?: InputMaybe<TaxClassEnum>;\n  /** Is the fee taxable? */\n  taxable?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Input for the addMethodToShippingZone mutation. */\nexport type AddMethodToShippingZoneInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the shipping method is enabled or not. */\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the shipping method to add. */\n  methodId: Scalars['String']['input'];\n  /** The order of the shipping method. */\n  order?: InputMaybe<Scalars['Int']['input']>;\n  /** The settings for the shipping method. */\n  settings?: InputMaybe<Array<InputMaybe<WcSettingInput>>>;\n  /** The ID of the shipping zone to delete. */\n  zoneId: Scalars['Int']['input'];\n};\n\n/** Input for the addToCart mutation. */\nexport type AddToCartInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** JSON string representation of extra cart item data */\n  extraData?: InputMaybe<Scalars['String']['input']>;\n  /** Cart item product database ID or global ID */\n  productId: Scalars['Int']['input'];\n  /** Cart item quantity */\n  quantity?: InputMaybe<Scalars['Int']['input']>;\n  /** Cart item product variation attributes */\n  variation?: InputMaybe<Array<InputMaybe<ProductAttributeInput>>>;\n  /** Cart item product variation database ID or global ID */\n  variationId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Input for the applyCoupon mutation. */\nexport type ApplyCouponInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Code of coupon being applied */\n  code: Scalars['String']['input'];\n};\n\n/** Collection statistic attributes operators */\nexport enum AttributeOperatorEnum {\n  AND = 'AND',\n  IN = 'IN',\n  NOT_IN = 'NOT_IN'\n}\n\n/** What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option */\nexport enum AvatarRatingEnum {\n  /** Indicates a G level avatar rating level. */\n  G = 'G',\n  /** Indicates a PG level avatar rating level. */\n  PG = 'PG',\n  /** Indicates an R level avatar rating level. */\n  R = 'R',\n  /** Indicates an X level avatar rating level. */\n  X = 'X'\n}\n\n/** Product backorder enumeration */\nexport enum BackordersEnum {\n  NO = 'NO',\n  NOTIFY = 'NOTIFY',\n  YES = 'YES'\n}\n\n/** Cart error type enumeration */\nexport enum CartErrorType {\n  INVALID_CART_ITEM = 'INVALID_CART_ITEM',\n  INVALID_COUPON = 'INVALID_COUPON',\n  INVALID_SHIPPING_METHOD = 'INVALID_SHIPPING_METHOD',\n  UNKNOWN = 'UNKNOWN'\n}\n\n/** Cart item quantity */\nexport type CartItemInput = {\n  /** JSON string representation of extra cart item data */\n  extraData?: InputMaybe<Scalars['String']['input']>;\n  /** Cart item product database ID or global ID */\n  productId: Scalars['Int']['input'];\n  /** Cart item quantity */\n  quantity?: InputMaybe<Scalars['Int']['input']>;\n  /** Cart item product variation attributes */\n  variation?: InputMaybe<Array<InputMaybe<ProductAttributeInput>>>;\n  /** Cart item product variation database ID or global ID */\n  variationId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Cart item quantity */\nexport type CartItemQuantityInput = {\n  /** Cart item being updated */\n  key: Scalars['ID']['input'];\n  /** Cart item's new quantity */\n  quantity: Scalars['Int']['input'];\n};\n\n/** Arguments for filtering the CartItemToProductConnection connection */\nexport type CartItemToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the CartToCartItemConnection connection */\nexport type CartToCartItemConnectionWhereArgs = {\n  /** Limit results to cart items that require shipping */\n  needsShipping?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Product catalog visibility enumeration */\nexport enum CatalogVisibilityEnum {\n  CATALOG = 'CATALOG',\n  HIDDEN = 'HIDDEN',\n  SEARCH = 'SEARCH',\n  VISIBLE = 'VISIBLE'\n}\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum CategoryIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the CategoryToCategoryConnection connection */\nexport type CategoryToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the CategoryToContentNodeConnection connection */\nexport type CategoryToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfCategoryEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the CategoryToPostConnection connection */\nexport type CategoryToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the checkout mutation. */\nexport type CheckoutInput = {\n  /** Create new customer account */\n  account?: InputMaybe<CreateAccountInput>;\n  /** Order billing address */\n  billing?: InputMaybe<CustomerAddressInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Order customer note */\n  customerNote?: InputMaybe<Scalars['String']['input']>;\n  /** Define if the order is paid. It will set the status to processing and reduce stock items. */\n  isPaid?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Order meta data */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** Payment method ID. */\n  paymentMethod?: InputMaybe<Scalars['String']['input']>;\n  /** Ship to a separate address */\n  shipToDifferentAddress?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Order shipping address */\n  shipping?: InputMaybe<CustomerAddressInput>;\n  /** Order shipping method */\n  shippingMethod?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Order transaction ID */\n  transactionId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the clearShippingZoneLocations mutation. */\nexport type ClearShippingZoneLocationsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The type of location to remove. */\n  type?: InputMaybe<ShippingLocationTypeEnum>;\n  /** The ID of the shipping zone to delete. */\n  zoneId: Scalars['Int']['input'];\n};\n\n/** Taxonomy query */\nexport type CollectionStatsQueryInput = {\n  /** Taxonomy relation to query */\n  relation?: InputMaybe<RelationEnum>;\n  /** Product Taxonomy */\n  taxonomy: ProductAttributeEnum;\n};\n\n/** Arguments used to filter the collection results */\nexport type CollectionStatsWhereArgs = {\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** The Type of Identifier used to fetch a single comment node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum CommentNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID'\n}\n\n/** The status of the comment object. */\nexport enum CommentStatusEnum {\n  /** Comments with the Engedélyezve status */\n  APPROVE = 'APPROVE',\n  /** Comments with the Elutasítva status */\n  HOLD = 'HOLD',\n  /** Comments with the Szemét status */\n  SPAM = 'SPAM',\n  /** Comments with the Lomtárban status */\n  TRASH = 'TRASH'\n}\n\n/** Arguments for filtering the CommentToCommentConnection connection */\nexport type CommentToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the CommentToParentCommentConnection connection */\nexport type CommentToParentCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Options for ordering the connection */\nexport enum CommentsConnectionOrderbyEnum {\n  /** Order by browser user agent of the commenter. */\n  COMMENT_AGENT = 'COMMENT_AGENT',\n  /** Order by approval status of the comment. */\n  COMMENT_APPROVED = 'COMMENT_APPROVED',\n  /** Order by name of the comment author. */\n  COMMENT_AUTHOR = 'COMMENT_AUTHOR',\n  /** Order by e-mail of the comment author. */\n  COMMENT_AUTHOR_EMAIL = 'COMMENT_AUTHOR_EMAIL',\n  /** Order by IP address of the comment author. */\n  COMMENT_AUTHOR_IP = 'COMMENT_AUTHOR_IP',\n  /** Order by URL address of the comment author. */\n  COMMENT_AUTHOR_URL = 'COMMENT_AUTHOR_URL',\n  /** Order by the comment contents. */\n  COMMENT_CONTENT = 'COMMENT_CONTENT',\n  /** Order by date/time timestamp of the comment. */\n  COMMENT_DATE = 'COMMENT_DATE',\n  /** Order by GMT timezone date/time timestamp of the comment. */\n  COMMENT_DATE_GMT = 'COMMENT_DATE_GMT',\n  /** Order by the globally unique identifier for the comment object */\n  COMMENT_ID = 'COMMENT_ID',\n  /** Order by the array list of comment IDs listed in the where clause. */\n  COMMENT_IN = 'COMMENT_IN',\n  /** Order by the comment karma score. */\n  COMMENT_KARMA = 'COMMENT_KARMA',\n  /** Order by the comment parent ID. */\n  COMMENT_PARENT = 'COMMENT_PARENT',\n  /** Order by the post object ID. */\n  COMMENT_POST_ID = 'COMMENT_POST_ID',\n  /** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */\n  COMMENT_TYPE = 'COMMENT_TYPE',\n  /** Order by the user ID. */\n  USER_ID = 'USER_ID'\n}\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum ContentNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID',\n  /** Identify a resource by the URI. */\n  URI = 'URI'\n}\n\n/** Allowed Content Types */\nexport enum ContentTypeEnum {\n  /** The Type of Content object */\n  ATTACHMENT = 'ATTACHMENT',\n  /** The Type of Content object */\n  PAGE = 'PAGE',\n  /** The Type of Content object */\n  POST = 'POST',\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** The Type of Identifier used to fetch a single Content Type node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum ContentTypeIdTypeEnum {\n  /** The globally unique ID */\n  ID = 'ID',\n  /** The name of the content type. */\n  NAME = 'NAME'\n}\n\n/** Arguments for filtering the ContentTypeToContentNodeConnection connection */\nexport type ContentTypeToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Allowed Content Types of the Category taxonomy. */\nexport enum ContentTypesOfCategoryEnum {\n  /** The Type of Content object */\n  POST = 'POST'\n}\n\n/** Allowed Content Types of the PaColor taxonomy. */\nexport enum ContentTypesOfPaColorEnum {\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** Allowed Content Types of the PaSize taxonomy. */\nexport enum ContentTypesOfPaSizeEnum {\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** Allowed Content Types of the PaTesztElek taxonomy. */\nexport enum ContentTypesOfPaTesztElekEnum {\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** Allowed Content Types of the PostFormat taxonomy. */\nexport enum ContentTypesOfPostFormatEnum {\n  /** The Type of Content object */\n  POST = 'POST'\n}\n\n/** Allowed Content Types of the ProductCategory taxonomy. */\nexport enum ContentTypesOfProductCategoryEnum {\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** Allowed Content Types of the ProductTag taxonomy. */\nexport enum ContentTypesOfProductTagEnum {\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** Allowed Content Types of the ProductType taxonomy. */\nexport enum ContentTypesOfProductTypeEnum {\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** Allowed Content Types of the ShippingClass taxonomy. */\nexport enum ContentTypesOfShippingClassEnum {\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** Allowed Content Types of the Tag taxonomy. */\nexport enum ContentTypesOfTagEnum {\n  /** The Type of Content object */\n  POST = 'POST'\n}\n\n/** Allowed Content Types of the VisibleProduct taxonomy. */\nexport enum ContentTypesOfVisibleProductEnum {\n  /** The Type of Content object */\n  PRODUCT = 'PRODUCT'\n}\n\n/** Countries enumeration */\nexport enum CountriesEnum {\n  AD = 'AD',\n  AE = 'AE',\n  AF = 'AF',\n  AG = 'AG',\n  AI = 'AI',\n  AL = 'AL',\n  AM = 'AM',\n  AO = 'AO',\n  AQ = 'AQ',\n  AR = 'AR',\n  AS = 'AS',\n  AT = 'AT',\n  AU = 'AU',\n  AW = 'AW',\n  AX = 'AX',\n  AZ = 'AZ',\n  BA = 'BA',\n  BB = 'BB',\n  BD = 'BD',\n  BE = 'BE',\n  BF = 'BF',\n  BG = 'BG',\n  BH = 'BH',\n  BI = 'BI',\n  BJ = 'BJ',\n  BL = 'BL',\n  BM = 'BM',\n  BN = 'BN',\n  BO = 'BO',\n  BQ = 'BQ',\n  BR = 'BR',\n  BS = 'BS',\n  BT = 'BT',\n  BV = 'BV',\n  BW = 'BW',\n  BY = 'BY',\n  BZ = 'BZ',\n  CA = 'CA',\n  CC = 'CC',\n  CD = 'CD',\n  CF = 'CF',\n  CG = 'CG',\n  CH = 'CH',\n  CI = 'CI',\n  CK = 'CK',\n  CL = 'CL',\n  CM = 'CM',\n  CN = 'CN',\n  CO = 'CO',\n  CR = 'CR',\n  CU = 'CU',\n  CV = 'CV',\n  CW = 'CW',\n  CX = 'CX',\n  CY = 'CY',\n  CZ = 'CZ',\n  DE = 'DE',\n  DJ = 'DJ',\n  DK = 'DK',\n  DM = 'DM',\n  DO = 'DO',\n  DZ = 'DZ',\n  EC = 'EC',\n  EE = 'EE',\n  EG = 'EG',\n  EH = 'EH',\n  ER = 'ER',\n  ES = 'ES',\n  ET = 'ET',\n  FI = 'FI',\n  FJ = 'FJ',\n  FK = 'FK',\n  FM = 'FM',\n  FO = 'FO',\n  FR = 'FR',\n  GA = 'GA',\n  GB = 'GB',\n  GD = 'GD',\n  GE = 'GE',\n  GF = 'GF',\n  GG = 'GG',\n  GH = 'GH',\n  GI = 'GI',\n  GL = 'GL',\n  GM = 'GM',\n  GN = 'GN',\n  GP = 'GP',\n  GQ = 'GQ',\n  GR = 'GR',\n  GS = 'GS',\n  GT = 'GT',\n  GU = 'GU',\n  GW = 'GW',\n  GY = 'GY',\n  HK = 'HK',\n  HM = 'HM',\n  HN = 'HN',\n  HR = 'HR',\n  HT = 'HT',\n  HU = 'HU',\n  ID = 'ID',\n  IE = 'IE',\n  IL = 'IL',\n  IM = 'IM',\n  IN = 'IN',\n  IO = 'IO',\n  IQ = 'IQ',\n  IR = 'IR',\n  IS = 'IS',\n  IT = 'IT',\n  JE = 'JE',\n  JM = 'JM',\n  JO = 'JO',\n  JP = 'JP',\n  KE = 'KE',\n  KG = 'KG',\n  KH = 'KH',\n  KI = 'KI',\n  KM = 'KM',\n  KN = 'KN',\n  KP = 'KP',\n  KR = 'KR',\n  KW = 'KW',\n  KY = 'KY',\n  KZ = 'KZ',\n  LA = 'LA',\n  LB = 'LB',\n  LC = 'LC',\n  LI = 'LI',\n  LK = 'LK',\n  LR = 'LR',\n  LS = 'LS',\n  LT = 'LT',\n  LU = 'LU',\n  LV = 'LV',\n  LY = 'LY',\n  MA = 'MA',\n  MC = 'MC',\n  MD = 'MD',\n  ME = 'ME',\n  MF = 'MF',\n  MG = 'MG',\n  MH = 'MH',\n  MK = 'MK',\n  ML = 'ML',\n  MM = 'MM',\n  MN = 'MN',\n  MO = 'MO',\n  MP = 'MP',\n  MQ = 'MQ',\n  MR = 'MR',\n  MS = 'MS',\n  MT = 'MT',\n  MU = 'MU',\n  MV = 'MV',\n  MW = 'MW',\n  MX = 'MX',\n  MY = 'MY',\n  MZ = 'MZ',\n  NA = 'NA',\n  NC = 'NC',\n  NE = 'NE',\n  NF = 'NF',\n  NG = 'NG',\n  NI = 'NI',\n  NL = 'NL',\n  NO = 'NO',\n  NP = 'NP',\n  NR = 'NR',\n  NU = 'NU',\n  NZ = 'NZ',\n  OM = 'OM',\n  PA = 'PA',\n  PE = 'PE',\n  PF = 'PF',\n  PG = 'PG',\n  PH = 'PH',\n  PK = 'PK',\n  PL = 'PL',\n  PM = 'PM',\n  PN = 'PN',\n  PR = 'PR',\n  PS = 'PS',\n  PT = 'PT',\n  PW = 'PW',\n  PY = 'PY',\n  QA = 'QA',\n  RE = 'RE',\n  RO = 'RO',\n  RS = 'RS',\n  RU = 'RU',\n  RW = 'RW',\n  SA = 'SA',\n  SB = 'SB',\n  SC = 'SC',\n  SD = 'SD',\n  SE = 'SE',\n  SG = 'SG',\n  SH = 'SH',\n  SI = 'SI',\n  SJ = 'SJ',\n  SK = 'SK',\n  SL = 'SL',\n  SM = 'SM',\n  SN = 'SN',\n  SO = 'SO',\n  SR = 'SR',\n  SS = 'SS',\n  ST = 'ST',\n  SV = 'SV',\n  SX = 'SX',\n  SY = 'SY',\n  SZ = 'SZ',\n  TC = 'TC',\n  TD = 'TD',\n  TF = 'TF',\n  TG = 'TG',\n  TH = 'TH',\n  TJ = 'TJ',\n  TK = 'TK',\n  TL = 'TL',\n  TM = 'TM',\n  TN = 'TN',\n  TO = 'TO',\n  TR = 'TR',\n  TT = 'TT',\n  TV = 'TV',\n  TW = 'TW',\n  TZ = 'TZ',\n  UA = 'UA',\n  UG = 'UG',\n  UM = 'UM',\n  US = 'US',\n  UY = 'UY',\n  UZ = 'UZ',\n  VA = 'VA',\n  VC = 'VC',\n  VE = 'VE',\n  VG = 'VG',\n  VI = 'VI',\n  VN = 'VN',\n  VU = 'VU',\n  WF = 'WF',\n  WS = 'WS',\n  YE = 'YE',\n  YT = 'YT',\n  ZA = 'ZA',\n  ZM = 'ZM',\n  ZW = 'ZW'\n}\n\n/** The Type of Identifier used to fetch a single Coupon. Default is ID. */\nexport enum CouponIdTypeEnum {\n  /** Coupon code. */\n  CODE = 'CODE',\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID'\n}\n\n/** Arguments for filtering the CouponToCustomerConnection connection */\nexport type CouponToCustomerConnectionWhereArgs = {\n  /** Limit result set to resources with a specific email. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Order of results. */\n  order?: InputMaybe<OrderEnum>;\n  /** Order results by a specific field. */\n  orderby?: InputMaybe<CustomerConnectionOrderbyEnum>;\n  /** Limit results to those matching a string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the CouponToExcludedProductCategoriesConnection connection */\nexport type CouponToExcludedProductCategoriesConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the CouponToExcludedProductsConnection connection */\nexport type CouponToExcludedProductsConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the CouponToProductCategoryConnection connection */\nexport type CouponToProductCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the CouponToProductUnionConnection connection */\nexport type CouponToProductUnionConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Customer account credentials */\nexport type CreateAccountInput = {\n  /** Customer password */\n  password: Scalars['String']['input'];\n  /** Customer username */\n  username: Scalars['String']['input'];\n};\n\n/** Input for the createCategory mutation. */\nexport type CreateCategoryInput = {\n  /** The slug that the category will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the category object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the category object to mutate */\n  name: Scalars['String']['input'];\n  /** The ID of the category that should be set as the parent */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createComment mutation. */\nexport type CreateCommentInput = {\n  /** The approval status of the comment. */\n  approved?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the comment's author. */\n  author?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the comment's author. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The url of the comment's author. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The database ID of the post object the comment belongs to. */\n  commentOn?: InputMaybe<Scalars['Int']['input']>;\n  /** Content of the comment. */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** Parent comment ID of current comment. */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** The approval status of the comment */\n  status?: InputMaybe<CommentStatusEnum>;\n  /** Type of comment. */\n  type?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createCoupon mutation. */\nexport type CreateCouponInput = {\n  /** The amount of discount. Should always be numeric, even if setting a percentage. */\n  amount?: InputMaybe<Scalars['Float']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Coupon code. */\n  code: Scalars['String']['input'];\n  /** The date the coupon expires, in the site's timezone. */\n  dateExpires?: InputMaybe<Scalars['String']['input']>;\n  /** The date the coupon expires, as GMT. */\n  dateExpiresGmt?: InputMaybe<Scalars['String']['input']>;\n  /** Coupon description. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Determines the type of discount that will be applied. */\n  discountType?: InputMaybe<DiscountTypeEnum>;\n  /** List of email addresses that can use this coupon. */\n  emailRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** If true, this coupon will not be applied to items that have sale prices. */\n  excludeSaleItems?: InputMaybe<Scalars['Boolean']['input']>;\n  /** List of category IDs the coupon does not apply to. */\n  excludedProductCategories?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** List of product IDs the coupon cannot be used on. */\n  excludedProductIds?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** If true and if the free shipping method requires a coupon, this coupon will enable free shipping. */\n  freeShipping?: InputMaybe<Scalars['Boolean']['input']>;\n  /** If true, the coupon can only be used individually. Other applied coupons will be removed from the cart. */\n  individualUse?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Max number of items in the cart the coupon can be applied to. */\n  limitUsageToXItems?: InputMaybe<Scalars['Int']['input']>;\n  /** Maximum order amount allowed when using the coupon. */\n  maximumAmount?: InputMaybe<Scalars['String']['input']>;\n  /** Meta data. */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** Minimum order amount that needs to be in the cart before coupon applies. */\n  minimumAmount?: InputMaybe<Scalars['String']['input']>;\n  /** List of category IDs the coupon applies to. */\n  productCategories?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** List of product IDs the coupon can be used on. */\n  productIds?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** How many times the coupon can be used in total. */\n  usageLimit?: InputMaybe<Scalars['Int']['input']>;\n  /** How many times the coupon can be used per customer. */\n  usageLimitPerUser?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Input for the createMediaItem mutation. */\nexport type CreateMediaItemInput = {\n  /** Alternative text to display when mediaItem is not displayed */\n  altText?: InputMaybe<Scalars['String']['input']>;\n  /** The userId to assign as the author of the mediaItem */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** The caption for the mediaItem */\n  caption?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the mediaItem */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the mediaItem */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The date (in GMT zone) of the mediaItem */\n  dateGmt?: InputMaybe<Scalars['String']['input']>;\n  /** Description of the mediaItem */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The file name of the mediaItem */\n  filePath?: InputMaybe<Scalars['String']['input']>;\n  /** The file type of the mediaItem */\n  fileType?: InputMaybe<MimeTypeEnum>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The ping status for the mediaItem */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the mediaItem */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the mediaItem */\n  status?: InputMaybe<MediaItemStatusEnum>;\n  /** The title of the mediaItem */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createOrder mutation. */\nexport type CreateOrderInput = {\n  /** Order billing address */\n  billing?: InputMaybe<CustomerAddressInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Coupons codes to be applied to order */\n  coupons?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Currency the order was created with, in ISO format. */\n  currency?: InputMaybe<CurrencyEnum>;\n  /** Order customer ID */\n  customerId?: InputMaybe<Scalars['Int']['input']>;\n  /** Note left by customer during checkout. */\n  customerNote?: InputMaybe<Scalars['String']['input']>;\n  /** Order shipping lines */\n  feeLines?: InputMaybe<Array<InputMaybe<FeeLineInput>>>;\n  /** Define if the order is paid. It will set the status to processing and reduce stock items. */\n  isPaid?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Order line items */\n  lineItems?: InputMaybe<Array<InputMaybe<LineItemInput>>>;\n  /** Order meta data */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** Parent order ID. */\n  parentId?: InputMaybe<Scalars['Int']['input']>;\n  /** Payment method ID. */\n  paymentMethod?: InputMaybe<Scalars['String']['input']>;\n  /** Payment method title. */\n  paymentMethodTitle?: InputMaybe<Scalars['String']['input']>;\n  /** Order shipping address */\n  shipping?: InputMaybe<CustomerAddressInput>;\n  /** Order shipping lines */\n  shippingLines?: InputMaybe<Array<InputMaybe<ShippingLineInput>>>;\n  /** Order status */\n  status?: InputMaybe<OrderStatusEnum>;\n  /** Order transaction ID */\n  transactionId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createPaColor mutation. */\nexport type CreatePaColorInput = {\n  /** The slug that the pa_color will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the pa_color object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the pa_color object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createPaSize mutation. */\nexport type CreatePaSizeInput = {\n  /** The slug that the pa_size will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the pa_size object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the pa_size object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createPaTesztElek mutation. */\nexport type CreatePaTesztElekInput = {\n  /** The slug that the pa_teszt-elek will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the pa_teszt-elek object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the pa_teszt-elek object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createPage mutation. */\nexport type CreatePageInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createPostFormat mutation. */\nexport type CreatePostFormatInput = {\n  /** The slug that the post_format will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_format object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the post_format object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createPost mutation. */\nexport type CreatePostInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** Set connections between the post and categories */\n  categories?: InputMaybe<PostCategoriesInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The excerpt of the object */\n  excerpt?: InputMaybe<Scalars['String']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The ping status for the object */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** URLs that have been pinged. */\n  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Set connections between the post and postFormats */\n  postFormats?: InputMaybe<PostPostFormatsInput>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Set connections between the post and tags */\n  tags?: InputMaybe<PostTagsInput>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n  /** URLs queued to be pinged. */\n  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Input for the createProductCategory mutation. */\nexport type CreateProductCategoryInput = {\n  /** The slug that the product_cat will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_cat object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the product_cat object to mutate */\n  name: Scalars['String']['input'];\n  /** The ID of the product_cat that should be set as the parent */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createProduct mutation. */\nexport type CreateProductInput = {\n  /** Set connections between the Product and allPaColor */\n  allPaColor?: InputMaybe<ProductAllPaColorInput>;\n  /** Set connections between the Product and allPaSize */\n  allPaSize?: InputMaybe<ProductAllPaSizeInput>;\n  /** Set connections between the Product and allPaTesztElek */\n  allPaTesztElek?: InputMaybe<ProductAllPaTesztElekInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The excerpt of the object */\n  excerpt?: InputMaybe<Scalars['String']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Set connections between the Product and productCategories */\n  productCategories?: InputMaybe<ProductProductCategoriesInput>;\n  /** Set connections between the Product and productTags */\n  productTags?: InputMaybe<ProductProductTagsInput>;\n  /** Set connections between the Product and productTypes */\n  productTypes?: InputMaybe<ProductProductTypesInput>;\n  /** Set connections between the Product and shippingClasses */\n  shippingClasses?: InputMaybe<ProductShippingClassesInput>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n  /** Set connections between the Product and visibleProducts */\n  visibleProducts?: InputMaybe<ProductVisibleProductsInput>;\n};\n\n/** Input for the createProductTag mutation. */\nexport type CreateProductTagInput = {\n  /** The slug that the product_tag will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_tag object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the product_tag object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createProductType mutation. */\nexport type CreateProductTypeInput = {\n  /** The slug that the product_type will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_type object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the product_type object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createShippingClass mutation. */\nexport type CreateShippingClassInput = {\n  /** The slug that the product_shipping_class will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_shipping_class object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the product_shipping_class object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createShippingZone mutation. */\nexport type CreateShippingZoneInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Name of the shipping zone. */\n  name: Scalars['String']['input'];\n  /** Order of the shipping zone. */\n  order?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Input for the createTag mutation. */\nexport type CreateTagInput = {\n  /** The slug that the post_tag will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_tag object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the post_tag object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createTaxClass mutation. */\nexport type CreateTaxClassInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Name of the tax class. */\n  name: Scalars['String']['input'];\n  /** Slug of the tax class. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createTaxRate mutation. */\nexport type CreateTaxRateInput = {\n  /** Cities for the tax rate. */\n  cities?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Tax rate class. */\n  class?: InputMaybe<TaxClassEnum>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the tax rate is compound. */\n  compound?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Country code for the tax rate. */\n  country?: InputMaybe<Scalars['String']['input']>;\n  /** Tax rate name. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Tax rate order. */\n  order?: InputMaybe<Scalars['Int']['input']>;\n  /** Postcodes for the tax rate. */\n  postcodes?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Tax rate priority. */\n  priority?: InputMaybe<Scalars['Int']['input']>;\n  /** Tax rate. */\n  rate?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the tax rate is applied to shipping. */\n  shipping?: InputMaybe<Scalars['Boolean']['input']>;\n  /** State code for the tax rate. */\n  state?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createUser mutation. */\nexport type CreateUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** An array of roles to be assigned to the user. */\n  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** A string that contains the user's username for logging in. */\n  username: Scalars['String']['input'];\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the createVisibleProduct mutation. */\nexport type CreateVisibleProductInput = {\n  /** The slug that the product_visibility will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_visibility object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the product_visibility object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Currencies enumeration */\nexport enum CurrencyEnum {\n  /** Egyesült Arab Emírségek dirham */\n  AED = 'AED',\n  /** Afgán afgáni */\n  AFN = 'AFN',\n  /** Albán lek */\n  ALL = 'ALL',\n  /** Örmény dram */\n  AMD = 'AMD',\n  /** Holland antillákbeli forint */\n  ANG = 'ANG',\n  /** Angolai kwanza */\n  AOA = 'AOA',\n  /** Argentin peso */\n  ARS = 'ARS',\n  /** Ausztrál dollár */\n  AUD = 'AUD',\n  /** Arubai florin */\n  AWG = 'AWG',\n  /** Azeri manat */\n  AZN = 'AZN',\n  /** Bosnyák konvertibilis márka */\n  BAM = 'BAM',\n  /** Barbadosi dollár */\n  BBD = 'BBD',\n  /** Bangladeshi taka */\n  BDT = 'BDT',\n  /** Bolgár leva */\n  BGN = 'BGN',\n  /** Bahreini dinár */\n  BHD = 'BHD',\n  /** Burundi frank */\n  BIF = 'BIF',\n  /** Bermudai dollár */\n  BMD = 'BMD',\n  /** Brunei dollár */\n  BND = 'BND',\n  /** Bolíviai boliviano */\n  BOB = 'BOB',\n  /** Brazíliai real */\n  BRL = 'BRL',\n  /** Bahamai dollár */\n  BSD = 'BSD',\n  /** bitcoin */\n  BTC = 'BTC',\n  /** Bhutáni ngultrum */\n  BTN = 'BTN',\n  /** Botswanai pula */\n  BWP = 'BWP',\n  /** Belarusz rubel */\n  BYN = 'BYN',\n  /** Fehérorosz rubel (régi) */\n  BYR = 'BYR',\n  /** Belize-i dollár */\n  BZD = 'BZD',\n  /** Kanadai dollár */\n  CAD = 'CAD',\n  /** Kongói frank */\n  CDF = 'CDF',\n  /** Svájci frank */\n  CHF = 'CHF',\n  /** Chilei peso */\n  CLP = 'CLP',\n  /** Kínai jüan */\n  CNY = 'CNY',\n  /** Kolumbiai peso */\n  COP = 'COP',\n  /** Costa Rica-i col&oacute;n */\n  CRC = 'CRC',\n  /** Kubai konvertibilis peso */\n  CUC = 'CUC',\n  /** Kubai peso */\n  CUP = 'CUP',\n  /** Zöld-foki escudo */\n  CVE = 'CVE',\n  /** Cseh korona */\n  CZK = 'CZK',\n  /** Dzsibuti frank */\n  DJF = 'DJF',\n  /** Dán korona */\n  DKK = 'DKK',\n  /** Dominikai peso */\n  DOP = 'DOP',\n  /** Algériai dinár */\n  DZD = 'DZD',\n  /** Egyiptomi font */\n  EGP = 'EGP',\n  /** Eritreai nakfa */\n  ERN = 'ERN',\n  /** Etióp birr */\n  ETB = 'ETB',\n  /** euró */\n  EUR = 'EUR',\n  /** Fidzsi dollár */\n  FJD = 'FJD',\n  /** Falkland-szigeteki font */\n  FKP = 'FKP',\n  /** Font sterling */\n  GBP = 'GBP',\n  /** Grúz lari */\n  GEL = 'GEL',\n  /** Guernsey-i font */\n  GGP = 'GGP',\n  /** Ghánai cedi */\n  GHS = 'GHS',\n  /** Gibraltári font */\n  GIP = 'GIP',\n  /** Gambiai dalasi */\n  GMD = 'GMD',\n  /** Guineai frank */\n  GNF = 'GNF',\n  /** Guatemalai quetzal */\n  GTQ = 'GTQ',\n  /** Guyanai dollár */\n  GYD = 'GYD',\n  /** Hongkongi dollár */\n  HKD = 'HKD',\n  /** Hondurasi lempira */\n  HNL = 'HNL',\n  /** Horvát kuna */\n  HRK = 'HRK',\n  /** Haiti gourde */\n  HTG = 'HTG',\n  /** Magyar forint */\n  HUF = 'HUF',\n  /** Indonéz rúpia */\n  IDR = 'IDR',\n  /** Izraeli új sékel */\n  ILS = 'ILS',\n  /** Man-szigeti font */\n  IMP = 'IMP',\n  /** Indiai rúpia */\n  INR = 'INR',\n  /** Iraki dinár */\n  IQD = 'IQD',\n  /** Iráni riál */\n  IRR = 'IRR',\n  /** Iráni toman */\n  IRT = 'IRT',\n  /** Izlandi korona */\n  ISK = 'ISK',\n  /** Jersey-i font */\n  JEP = 'JEP',\n  /** Jamaicai dollár */\n  JMD = 'JMD',\n  /** Jordán dinár */\n  JOD = 'JOD',\n  /** Japán yen */\n  JPY = 'JPY',\n  /** Kenyai shilling */\n  KES = 'KES',\n  /** Kirgiz szom */\n  KGS = 'KGS',\n  /** Kambodzsai riel */\n  KHR = 'KHR',\n  /** Comore-i frank */\n  KMF = 'KMF',\n  /** Észak-koreai von */\n  KPW = 'KPW',\n  /** Dél-koreai von */\n  KRW = 'KRW',\n  /** Kuvaiti dinár */\n  KWD = 'KWD',\n  /** Kajmán-szigeteki dollár */\n  KYD = 'KYD',\n  /** Kazah tenge */\n  KZT = 'KZT',\n  /** Lao kip */\n  LAK = 'LAK',\n  /** Libanoni font */\n  LBP = 'LBP',\n  /** Srí Lanka-i rúpia */\n  LKR = 'LKR',\n  /** Libériai dollár */\n  LRD = 'LRD',\n  /** Lesothói loti */\n  LSL = 'LSL',\n  /** Líbiai dinár */\n  LYD = 'LYD',\n  /** Marokkói dirham */\n  MAD = 'MAD',\n  /** Moldáv lej */\n  MDL = 'MDL',\n  /** Madagaszkári ariary */\n  MGA = 'MGA',\n  /** Macedón dinár */\n  MKD = 'MKD',\n  /** Mianmari kjap */\n  MMK = 'MMK',\n  /** Mongol tugrik */\n  MNT = 'MNT',\n  /** Makaói pataca */\n  MOP = 'MOP',\n  /** Mauritániai ouguiya */\n  MRU = 'MRU',\n  /** Mauritiusi rúpia */\n  MUR = 'MUR',\n  /** Maldív rúfia */\n  MVR = 'MVR',\n  /** Malawi kwacha */\n  MWK = 'MWK',\n  /** Mexikói peso */\n  MXN = 'MXN',\n  /** Maláj ringgit */\n  MYR = 'MYR',\n  /** Mozambiki metical */\n  MZN = 'MZN',\n  /** Namíbiai dollár */\n  NAD = 'NAD',\n  /** Nigériai naira */\n  NGN = 'NGN',\n  /** Nicaraguai c&oacute;rdoba */\n  NIO = 'NIO',\n  /** Norvég korona */\n  NOK = 'NOK',\n  /** Nepáli rúpia */\n  NPR = 'NPR',\n  /** Új-zélandi dollár */\n  NZD = 'NZD',\n  /** Ománi riál */\n  OMR = 'OMR',\n  /** Panamai balboa */\n  PAB = 'PAB',\n  /** Sol */\n  PEN = 'PEN',\n  /** Pápua új-guineai kina */\n  PGK = 'PGK',\n  /** Fülöp-szigeteki peso */\n  PHP = 'PHP',\n  /** Pakisztáni rúpia */\n  PKR = 'PKR',\n  /** Lengyel z&#x142;oty */\n  PLN = 'PLN',\n  /** Dnyeszter menti rubel */\n  PRB = 'PRB',\n  /** Paraguayi guaran&iacute; */\n  PYG = 'PYG',\n  /** Katari riál */\n  QAR = 'QAR',\n  /** Román lej */\n  RON = 'RON',\n  /** Szerb dinár */\n  RSD = 'RSD',\n  /** Orosz rubel */\n  RUB = 'RUB',\n  /** Ruandai frank */\n  RWF = 'RWF',\n  /** Szaúdi riál */\n  SAR = 'SAR',\n  /** Salamon-szigeteki dollár */\n  SBD = 'SBD',\n  /** Seychelle-i rúpia */\n  SCR = 'SCR',\n  /** Szudáni font */\n  SDG = 'SDG',\n  /** Svéd korona */\n  SEK = 'SEK',\n  /** Szingapúri dollár */\n  SGD = 'SGD',\n  /** Szent Ilona-i font */\n  SHP = 'SHP',\n  /** Sierra Leone-i leone */\n  SLL = 'SLL',\n  /** Szomáliai shilling */\n  SOS = 'SOS',\n  /** Suriname-i dollár */\n  SRD = 'SRD',\n  /** Dél-szudáni font */\n  SSP = 'SSP',\n  /** S&atilde;o Tom&eacute; és Pr&iacute;ncipe-i dobra */\n  STN = 'STN',\n  /** Szír font */\n  SYP = 'SYP',\n  /** Szváziföldi lilangeni */\n  SZL = 'SZL',\n  /** Thai bát */\n  THB = 'THB',\n  /** Tádzsik szomoni */\n  TJS = 'TJS',\n  /** Türkmén manat */\n  TMT = 'TMT',\n  /** Tunéziai dinár */\n  TND = 'TND',\n  /** Tongai pa&#x2bb;anga */\n  TOP = 'TOP',\n  /** Török líra */\n  TRY = 'TRY',\n  /** Trinidad és Tobagó-i dollár */\n  TTD = 'TTD',\n  /** Tajvani új dollár */\n  TWD = 'TWD',\n  /** Tanzániai shilling */\n  TZS = 'TZS',\n  /** Ukrán hrivnya */\n  UAH = 'UAH',\n  /** Ugandai shilling */\n  UGX = 'UGX',\n  /** Egyesült Államok (USA) dollár */\n  USD = 'USD',\n  /** Uruguayi peso */\n  UYU = 'UYU',\n  /** Üzbég szom */\n  UZS = 'UZS',\n  /** Venezuelai bolívar (2008–2018) */\n  VEF = 'VEF',\n  /** Venezuelai bol&iacute;var */\n  VES = 'VES',\n  /** Vietnami &#x111;&#x1ed3;ng */\n  VND = 'VND',\n  /** Vanuatui vatu */\n  VUV = 'VUV',\n  /** szamoai t&#x101;l&#x101; */\n  WST = 'WST',\n  /** Közép-afrikai valutaközösségi frank */\n  XAF = 'XAF',\n  /** Kelet-karibi dollár */\n  XCD = 'XCD',\n  /** Nyugat-afrikai valutaközösségi frank */\n  XOF = 'XOF',\n  /** Csendes-óceáni valutaközösségi frank */\n  XPF = 'XPF',\n  /** jemeni riál */\n  YER = 'YER',\n  /** Dél-afrikai rand */\n  ZAR = 'ZAR',\n  /** Zambiai kwacha */\n  ZMW = 'ZMW'\n}\n\n/** Customer address information */\nexport type CustomerAddressInput = {\n  /** Address 1 */\n  address1?: InputMaybe<Scalars['String']['input']>;\n  /** Address 2 */\n  address2?: InputMaybe<Scalars['String']['input']>;\n  /** City */\n  city?: InputMaybe<Scalars['String']['input']>;\n  /** Company */\n  company?: InputMaybe<Scalars['String']['input']>;\n  /** Country */\n  country?: InputMaybe<CountriesEnum>;\n  /** E-mail */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** First name */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** Last name */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** Clear old address data */\n  overwrite?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Phone */\n  phone?: InputMaybe<Scalars['String']['input']>;\n  /** Zip Postal Code */\n  postcode?: InputMaybe<Scalars['String']['input']>;\n  /** State */\n  state?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Field to order the connection by */\nexport enum CustomerConnectionOrderbyEnum {\n  /** Order by customer email */\n  EMAIL = 'EMAIL',\n  /** Order by customer ID */\n  ID = 'ID',\n  /** Order by include field */\n  INCLUDE = 'INCLUDE',\n  /** Order by customer display name */\n  NAME = 'NAME',\n  /** Order by customer registration date */\n  REGISTERED_DATE = 'REGISTERED_DATE',\n  /** Order by customer username */\n  USERNAME = 'USERNAME'\n}\n\n/** Arguments for filtering the CustomerToDownloadableItemConnection connection */\nexport type CustomerToDownloadableItemConnectionWhereArgs = {\n  /** Limit results to downloadable items that can be downloaded now. */\n  active?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit results to downloadable items that are expired. */\n  expired?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit results to downloadable items that have downloads remaining. */\n  hasDownloadsRemaining?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the CustomerToOrderConnection connection */\nexport type CustomerToOrderConnectionWhereArgs = {\n  /** Limit result set to orders assigned a specific billing email. */\n  billingEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to orders assigned a specific customer. */\n  customerId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to orders assigned a specific group of customers. */\n  customersIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<OrdersOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to orders assigned a specific product. */\n  productId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit results to those matching a string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to orders assigned a specific status. */\n  statuses?: InputMaybe<Array<InputMaybe<OrderStatusEnum>>>;\n};\n\n/** Arguments for filtering the CustomerToRefundConnection connection */\nexport type CustomerToRefundConnectionWhereArgs = {\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to refunds from a specific group of order IDs. */\n  orderIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostTypeOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit results to those matching a string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to refunds assigned a specific status. */\n  statuses?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Date values */\nexport type DateInput = {\n  /** Day of the month (from 1 to 31) */\n  day?: InputMaybe<Scalars['Int']['input']>;\n  /** Month number (from 1 to 12) */\n  month?: InputMaybe<Scalars['Int']['input']>;\n  /** 4 digit year (e.g. 2017) */\n  year?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Filter the connection based on input */\nexport type DateQueryInput = {\n  /** Nodes should be returned after this date */\n  after?: InputMaybe<DateInput>;\n  /** Nodes should be returned before this date */\n  before?: InputMaybe<DateInput>;\n  /** Column to query against */\n  column?: InputMaybe<PostObjectsConnectionDateColumnEnum>;\n  /** For after/before, whether exact value should be matched or not */\n  compare?: InputMaybe<Scalars['String']['input']>;\n  /** Day of the month (from 1 to 31) */\n  day?: InputMaybe<Scalars['Int']['input']>;\n  /** Hour (from 0 to 23) */\n  hour?: InputMaybe<Scalars['Int']['input']>;\n  /** For after/before, whether exact value should be matched or not */\n  inclusive?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Minute (from 0 to 59) */\n  minute?: InputMaybe<Scalars['Int']['input']>;\n  /** Month number (from 1 to 12) */\n  month?: InputMaybe<Scalars['Int']['input']>;\n  /** OR or AND, how the sub-arrays should be compared */\n  relation?: InputMaybe<RelationEnum>;\n  /** Second (0 to 59) */\n  second?: InputMaybe<Scalars['Int']['input']>;\n  /** Week of the year (from 0 to 53) */\n  week?: InputMaybe<Scalars['Int']['input']>;\n  /** 4 digit year (e.g. 2017) */\n  year?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Input for the deleteCategory mutation. */\nexport type DeleteCategoryInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteComment mutation. */\nexport type DeleteCommentInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the comment should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The deleted comment ID */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteCoupon mutation. */\nexport type DeleteCouponInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Delete the object. Set to \"false\" by default. */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Unique identifier for the object. */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteMediaItem mutation. */\nexport type DeleteMediaItemInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the mediaItem should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the mediaItem to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteOrder mutation. */\nexport type DeleteOrderInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Delete or simply place in trash. */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Order global ID */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** Order WP ID */\n  orderId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Input for the deleteOrderItems mutation. */\nexport type DeleteOrderItemsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Order global ID */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** ID Order items being deleted */\n  itemIds?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Order WP ID */\n  orderId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Input for the deletePaColor mutation. */\nexport type DeletePaColorInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paColor to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deletePaSize mutation. */\nexport type DeletePaSizeInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paSize to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deletePaTesztElek mutation. */\nexport type DeletePaTesztElekInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paTesztElek to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deletePage mutation. */\nexport type DeletePageInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the page to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Input for the deletePaymentMethod mutation. */\nexport type DeletePaymentMethodInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Token ID of the payment token being deleted. */\n  tokenId: Scalars['Int']['input'];\n};\n\n/** Input for the deletePostFormat mutation. */\nexport type DeletePostFormatInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deletePost mutation. */\nexport type DeletePostInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the post to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Input for the deleteProductCategory mutation. */\nexport type DeleteProductCategoryInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productCategory to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteProduct mutation. */\nexport type DeleteProductInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the Product to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Input for the deleteProductTag mutation. */\nexport type DeleteProductTagInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productTag to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteProductType mutation. */\nexport type DeleteProductTypeInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productType to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteReview mutation. */\nexport type DeleteReviewInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the product review should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the target product review */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteShippingClass mutation. */\nexport type DeleteShippingClassInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the shippingClass to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteShippingZone mutation. */\nexport type DeleteShippingZoneInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the shipping zone to delete. */\n  id: Scalars['Int']['input'];\n};\n\n/** Input for the deleteTag mutation. */\nexport type DeleteTagInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the deleteTaxClass mutation. */\nexport type DeleteTaxClassInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Slug of the tax class. */\n  slug: Scalars['String']['input'];\n};\n\n/** Input for the deleteTaxRate mutation. */\nexport type DeleteTaxRateInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tax rate to update. */\n  id: Scalars['Int']['input'];\n};\n\n/** Input for the deleteUser mutation. */\nexport type DeleteUserInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user you want to delete */\n  id: Scalars['ID']['input'];\n  /** Reassign posts and links to new User ID. */\n  reassignId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Input for the deleteVisibleProduct mutation. */\nexport type DeleteVisibleProductInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the visibleProduct to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** Coupon discount type enumeration */\nexport enum DiscountTypeEnum {\n  /** Rögzített kosár kedvezmény */\n  FIXED_CART = 'FIXED_CART',\n  /** Rögzített termékkedvezmény */\n  FIXED_PRODUCT = 'FIXED_PRODUCT',\n  /** Százalékos kedvezmény */\n  PERCENT = 'PERCENT'\n}\n\n/** Input for the emptyCart mutation. */\nexport type EmptyCartInput = {\n  clearPersistentCart?: InputMaybe<Scalars['Boolean']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Fee line data. */\nexport type FeeLineInput = {\n  /** Fee amount. */\n  amount?: InputMaybe<Scalars['String']['input']>;\n  /** Fee Line ID */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** Fee name. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Tax class of fee. */\n  taxClass?: InputMaybe<TaxClassEnum>;\n  /** Tax status of fee. */\n  taxStatus?: InputMaybe<TaxStatusEnum>;\n  /** Line total (after discounts). */\n  total?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the fillCart mutation. */\nexport type FillCartInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Coupons to be applied to the cart */\n  coupons?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Cart items to be added */\n  items?: InputMaybe<Array<InputMaybe<CartItemInput>>>;\n  /** Shipping methods to be used. */\n  shippingMethods?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Arguments for filtering the GlobalProductAttributeToTermNodeConnection connection */\nexport type GlobalProductAttributeToTermNodeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the GroupProductToProductUnionConnection connection */\nexport type GroupProductToProductUnionConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection */\nexport type HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Meta data. */\nexport type LineItemInput = {\n  /** Line Item ID */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** Meta data. */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** Line name */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Product ID. */\n  productId?: InputMaybe<Scalars['Int']['input']>;\n  /** Quantity ordered. */\n  quantity?: InputMaybe<Scalars['Int']['input']>;\n  /** Product SKU. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Line subtotal (before discounts). */\n  subtotal?: InputMaybe<Scalars['String']['input']>;\n  /** Tax class of product. */\n  taxClass?: InputMaybe<TaxClassEnum>;\n  /** Line total (after discounts). */\n  total?: InputMaybe<Scalars['String']['input']>;\n  /** Variation ID, if applicable. */\n  variationId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Arguments for filtering the LineItemToProductConnection connection */\nexport type LineItemToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Input for the loginWithCookies mutation. */\nexport type LoginWithCookiesInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Input your user/e-mail. */\n  login: Scalars['String']['input'];\n  /** Input your password. */\n  password: Scalars['String']['input'];\n  /** Whether to \"remember\" the user. Increases the time that the cookie will be kept. Default false. */\n  rememberMe?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Input for the logout mutation. */\nexport type LogoutInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Product manage stock enumeration */\nexport enum ManageStockEnum {\n  FALSE = 'FALSE',\n  PARENT = 'PARENT',\n  TRUE = 'TRUE'\n}\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum MediaItemIdType {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  SLUG = 'SLUG',\n  /** Identify a media item by its source url */\n  SOURCE_URL = 'SOURCE_URL',\n  /** Identify a resource by the URI. */\n  URI = 'URI'\n}\n\n/** The size of the media item object. */\nexport enum MediaItemSizeEnum {\n  /** MediaItem with the large size */\n  LARGE = 'LARGE',\n  /** MediaItem with the medium size */\n  MEDIUM = 'MEDIUM',\n  /** MediaItem with the medium_large size */\n  MEDIUM_LARGE = 'MEDIUM_LARGE',\n  /** MediaItem with the thumbnail size */\n  THUMBNAIL = 'THUMBNAIL',\n  /** MediaItem with the woocommerce_gallery_thumbnail size */\n  WOOCOMMERCE_GALLERY_THUMBNAIL = 'WOOCOMMERCE_GALLERY_THUMBNAIL',\n  /** MediaItem with the woocommerce_single size */\n  WOOCOMMERCE_SINGLE = 'WOOCOMMERCE_SINGLE',\n  /** MediaItem with the woocommerce_thumbnail size */\n  WOOCOMMERCE_THUMBNAIL = 'WOOCOMMERCE_THUMBNAIL',\n  /** MediaItem with the 1536x1536 size */\n  _1536X1536 = '_1536X1536',\n  /** MediaItem with the 2048x2048 size */\n  _2048X2048 = '_2048X2048'\n}\n\n/** The status of the media item object. */\nexport enum MediaItemStatusEnum {\n  /** Objects with the auto-draft status */\n  AUTO_DRAFT = 'AUTO_DRAFT',\n  /** Objects with the inherit status */\n  INHERIT = 'INHERIT',\n  /** Objects with the private status */\n  PRIVATE = 'PRIVATE',\n  /** Objects with the trash status */\n  TRASH = 'TRASH'\n}\n\n/** Arguments for filtering the MediaItemToCommentConnection connection */\nexport type MediaItemToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum MenuItemNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID'\n}\n\n/** Arguments for filtering the MenuItemToMenuItemConnection connection */\nexport type MenuItemToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Registered menu locations */\nexport enum MenuLocationEnum {\n  /** Empty menu location */\n  EMPTY = 'EMPTY'\n}\n\n/** The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum MenuNodeIdTypeEnum {\n  /** Identify a menu node by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a menu node by the (hashed) Global ID. */\n  ID = 'ID',\n  /** Identify a menu node by the slug of menu location to which it is assigned */\n  LOCATION = 'LOCATION',\n  /** Identify a menu node by its name */\n  NAME = 'NAME',\n  /** Identify a menu node by its slug */\n  SLUG = 'SLUG'\n}\n\n/** Arguments for filtering the MenuToMenuItemConnection connection */\nexport type MenuToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Meta data. */\nexport type MetaDataInput = {\n  /** Meta ID. */\n  id?: InputMaybe<Scalars['String']['input']>;\n  /** Meta key. */\n  key: Scalars['String']['input'];\n  /** Meta value. */\n  value: Scalars['String']['input'];\n};\n\n/** The MimeType of the object */\nexport enum MimeTypeEnum {\n  /** application/java mime type. */\n  APPLICATION_JAVA = 'APPLICATION_JAVA',\n  /** application/msword mime type. */\n  APPLICATION_MSWORD = 'APPLICATION_MSWORD',\n  /** application/octet-stream mime type. */\n  APPLICATION_OCTET_STREAM = 'APPLICATION_OCTET_STREAM',\n  /** application/onenote mime type. */\n  APPLICATION_ONENOTE = 'APPLICATION_ONENOTE',\n  /** application/oxps mime type. */\n  APPLICATION_OXPS = 'APPLICATION_OXPS',\n  /** application/pdf mime type. */\n  APPLICATION_PDF = 'APPLICATION_PDF',\n  /** application/rar mime type. */\n  APPLICATION_RAR = 'APPLICATION_RAR',\n  /** application/rtf mime type. */\n  APPLICATION_RTF = 'APPLICATION_RTF',\n  /** application/ttaf+xml mime type. */\n  APPLICATION_TTAF_XML = 'APPLICATION_TTAF_XML',\n  /** application/vnd.apple.keynote mime type. */\n  APPLICATION_VND_APPLE_KEYNOTE = 'APPLICATION_VND_APPLE_KEYNOTE',\n  /** application/vnd.apple.numbers mime type. */\n  APPLICATION_VND_APPLE_NUMBERS = 'APPLICATION_VND_APPLE_NUMBERS',\n  /** application/vnd.apple.pages mime type. */\n  APPLICATION_VND_APPLE_PAGES = 'APPLICATION_VND_APPLE_PAGES',\n  /** application/vnd.ms-access mime type. */\n  APPLICATION_VND_MS_ACCESS = 'APPLICATION_VND_MS_ACCESS',\n  /** application/vnd.ms-excel mime type. */\n  APPLICATION_VND_MS_EXCEL = 'APPLICATION_VND_MS_EXCEL',\n  /** application/vnd.ms-excel.addin.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12 = 'APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12',\n  /** application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12',\n  /** application/vnd.ms-excel.sheet.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12',\n  /** application/vnd.ms-excel.template.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12 = 'APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint mime type. */\n  APPLICATION_VND_MS_POWERPOINT = 'APPLICATION_VND_MS_POWERPOINT',\n  /** application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12 = 'APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12 = 'APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint.template.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12 = 'APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12',\n  /** application/vnd.ms-project mime type. */\n  APPLICATION_VND_MS_PROJECT = 'APPLICATION_VND_MS_PROJECT',\n  /** application/vnd.ms-word.document.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12 = 'APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12',\n  /** application/vnd.ms-word.template.macroEnabled.12 mime type. */\n  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12 = 'APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12',\n  /** application/vnd.ms-write mime type. */\n  APPLICATION_VND_MS_WRITE = 'APPLICATION_VND_MS_WRITE',\n  /** application/vnd.ms-xpsdocument mime type. */\n  APPLICATION_VND_MS_XPSDOCUMENT = 'APPLICATION_VND_MS_XPSDOCUMENT',\n  /** application/vnd.oasis.opendocument.chart mime type. */\n  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART = 'APPLICATION_VND_OASIS_OPENDOCUMENT_CHART',\n  /** application/vnd.oasis.opendocument.database mime type. */\n  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE = 'APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE',\n  /** application/vnd.oasis.opendocument.formula mime type. */\n  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA = 'APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA',\n  /** application/vnd.oasis.opendocument.graphics mime type. */\n  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS = 'APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS',\n  /** application/vnd.oasis.opendocument.presentation mime type. */\n  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION = 'APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION',\n  /** application/vnd.oasis.opendocument.spreadsheet mime type. */\n  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET = 'APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET',\n  /** application/vnd.oasis.opendocument.text mime type. */\n  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT = 'APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT',\n  /** application/vnd.openxmlformats-officedocument.presentationml.presentation mime type. */\n  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION',\n  /** application/vnd.openxmlformats-officedocument.presentationml.slide mime type. */\n  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE',\n  /** application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type. */\n  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW',\n  /** application/vnd.openxmlformats-officedocument.presentationml.template mime type. */\n  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE',\n  /** application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type. */\n  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET',\n  /** application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type. */\n  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE',\n  /** application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type. */\n  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT',\n  /** application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type. */\n  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE',\n  /** application/wordperfect mime type. */\n  APPLICATION_WORDPERFECT = 'APPLICATION_WORDPERFECT',\n  /** application/x-7z-compressed mime type. */\n  APPLICATION_X_7Z_COMPRESSED = 'APPLICATION_X_7Z_COMPRESSED',\n  /** application/x-gzip mime type. */\n  APPLICATION_X_GZIP = 'APPLICATION_X_GZIP',\n  /** application/x-tar mime type. */\n  APPLICATION_X_TAR = 'APPLICATION_X_TAR',\n  /** application/zip mime type. */\n  APPLICATION_ZIP = 'APPLICATION_ZIP',\n  /** audio/aac mime type. */\n  AUDIO_AAC = 'AUDIO_AAC',\n  /** audio/flac mime type. */\n  AUDIO_FLAC = 'AUDIO_FLAC',\n  /** audio/midi mime type. */\n  AUDIO_MIDI = 'AUDIO_MIDI',\n  /** audio/mpeg mime type. */\n  AUDIO_MPEG = 'AUDIO_MPEG',\n  /** audio/ogg mime type. */\n  AUDIO_OGG = 'AUDIO_OGG',\n  /** audio/wav mime type. */\n  AUDIO_WAV = 'AUDIO_WAV',\n  /** audio/x-matroska mime type. */\n  AUDIO_X_MATROSKA = 'AUDIO_X_MATROSKA',\n  /** audio/x-ms-wax mime type. */\n  AUDIO_X_MS_WAX = 'AUDIO_X_MS_WAX',\n  /** audio/x-ms-wma mime type. */\n  AUDIO_X_MS_WMA = 'AUDIO_X_MS_WMA',\n  /** audio/x-realaudio mime type. */\n  AUDIO_X_REALAUDIO = 'AUDIO_X_REALAUDIO',\n  /** image/avif mime type. */\n  IMAGE_AVIF = 'IMAGE_AVIF',\n  /** image/bmp mime type. */\n  IMAGE_BMP = 'IMAGE_BMP',\n  /** image/gif mime type. */\n  IMAGE_GIF = 'IMAGE_GIF',\n  /** image/heic mime type. */\n  IMAGE_HEIC = 'IMAGE_HEIC',\n  /** image/jpeg mime type. */\n  IMAGE_JPEG = 'IMAGE_JPEG',\n  /** image/png mime type. */\n  IMAGE_PNG = 'IMAGE_PNG',\n  /** image/tiff mime type. */\n  IMAGE_TIFF = 'IMAGE_TIFF',\n  /** image/webp mime type. */\n  IMAGE_WEBP = 'IMAGE_WEBP',\n  /** image/x-icon mime type. */\n  IMAGE_X_ICON = 'IMAGE_X_ICON',\n  /** text/calendar mime type. */\n  TEXT_CALENDAR = 'TEXT_CALENDAR',\n  /** text/css mime type. */\n  TEXT_CSS = 'TEXT_CSS',\n  /** text/csv mime type. */\n  TEXT_CSV = 'TEXT_CSV',\n  /** text/plain mime type. */\n  TEXT_PLAIN = 'TEXT_PLAIN',\n  /** text/richtext mime type. */\n  TEXT_RICHTEXT = 'TEXT_RICHTEXT',\n  /** text/tab-separated-values mime type. */\n  TEXT_TAB_SEPARATED_VALUES = 'TEXT_TAB_SEPARATED_VALUES',\n  /** text/vtt mime type. */\n  TEXT_VTT = 'TEXT_VTT',\n  /** video/3gpp mime type. */\n  VIDEO_3GPP = 'VIDEO_3GPP',\n  /** video/3gpp2 mime type. */\n  VIDEO_3GPP2 = 'VIDEO_3GPP2',\n  /** video/avi mime type. */\n  VIDEO_AVI = 'VIDEO_AVI',\n  /** video/divx mime type. */\n  VIDEO_DIVX = 'VIDEO_DIVX',\n  /** video/mp4 mime type. */\n  VIDEO_MP4 = 'VIDEO_MP4',\n  /** video/mpeg mime type. */\n  VIDEO_MPEG = 'VIDEO_MPEG',\n  /** video/ogg mime type. */\n  VIDEO_OGG = 'VIDEO_OGG',\n  /** video/quicktime mime type. */\n  VIDEO_QUICKTIME = 'VIDEO_QUICKTIME',\n  /** video/webm mime type. */\n  VIDEO_WEBM = 'VIDEO_WEBM',\n  /** video/x-flv mime type. */\n  VIDEO_X_FLV = 'VIDEO_X_FLV',\n  /** video/x-matroska mime type. */\n  VIDEO_X_MATROSKA = 'VIDEO_X_MATROSKA',\n  /** video/x-ms-asf mime type. */\n  VIDEO_X_MS_ASF = 'VIDEO_X_MS_ASF',\n  /** video/x-ms-wm mime type. */\n  VIDEO_X_MS_WM = 'VIDEO_X_MS_WM',\n  /** video/x-ms-wmv mime type. */\n  VIDEO_X_MS_WMV = 'VIDEO_X_MS_WMV',\n  /** video/x-ms-wmx mime type. */\n  VIDEO_X_MS_WMX = 'VIDEO_X_MS_WMX'\n}\n\n/** The cardinality of the connection order */\nexport enum OrderEnum {\n  /** Sort the query result set in an ascending order */\n  ASC = 'ASC',\n  /** Sort the query result set in a descending order */\n  DESC = 'DESC'\n}\n\n/** The Type of Identifier used to fetch a single Order. Default is ID. */\nexport enum OrderIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID',\n  /** Order key. */\n  ORDER_KEY = 'ORDER_KEY'\n}\n\n/** Order status enumeration */\nexport enum OrderStatusEnum {\n  /** Visszamondva */\n  CANCELLED = 'CANCELLED',\n  /** Vázlat */\n  CHECKOUT_DRAFT = 'CHECKOUT_DRAFT',\n  /** Teljesítve */\n  COMPLETED = 'COMPLETED',\n  /** Sikertelen */\n  FAILED = 'FAILED',\n  /** Fizetés folyamatban */\n  ON_HOLD = 'ON_HOLD',\n  /** Fizetés előtt */\n  PENDING = 'PENDING',\n  /** Feldolgozás alatt */\n  PROCESSING = 'PROCESSING',\n  /** Visszatérítve */\n  REFUNDED = 'REFUNDED'\n}\n\n/** Arguments for filtering the OrderToCommentConnection connection */\nexport type OrderToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the OrderToDownloadableItemConnection connection */\nexport type OrderToDownloadableItemConnectionWhereArgs = {\n  /** Limit results to downloadable items that can be downloaded now. */\n  active?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit results to downloadable items that are expired. */\n  expired?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit results to downloadable items that have downloads remaining. */\n  hasDownloadsRemaining?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the OrderToRefundConnection connection */\nexport type OrderToRefundConnectionWhereArgs = {\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to refunds from a specific group of order IDs. */\n  orderIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostTypeOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit results to those matching a string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to refunds assigned a specific status. */\n  statuses?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Fields to order the Orders connection by */\nexport enum OrdersOrderByEnum {\n  /** Order by publish date */\n  DATE = 'DATE',\n  /** Order by date the order was completed */\n  DATE_COMPLETED = 'DATE_COMPLETED',\n  /** Order by date the order was paid */\n  DATE_PAID = 'DATE_PAID',\n  /** Order by order discount amount */\n  DISCOUNT = 'DISCOUNT',\n  /** Preserve the ID order given in the IN array */\n  IN = 'IN',\n  /** Order by the menu order value */\n  MENU_ORDER = 'MENU_ORDER',\n  /** Order by last modified date */\n  MODIFIED = 'MODIFIED',\n  /** Order by name */\n  NAME = 'NAME',\n  /** Preserve slug order given in the NAME_IN array */\n  NAME_IN = 'NAME_IN',\n  /** Order by order key */\n  ORDER_KEY = 'ORDER_KEY',\n  /** Order by parent ID */\n  PARENT = 'PARENT',\n  /** Order by slug */\n  SLUG = 'SLUG',\n  /** Order by order total */\n  TAX = 'TAX',\n  /** Order by order total */\n  TOTAL = 'TOTAL'\n}\n\n/** Options for ordering the connection */\nexport type OrdersOrderbyInput = {\n  field: OrdersOrderByEnum;\n  order?: InputMaybe<OrderEnum>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PaColorIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the PaColorToContentNodeConnection connection */\nexport type PaColorToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPaColorEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the PaColorToProductConnection connection */\nexport type PaColorToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the PaColorToProductVariationConnection connection */\nexport type PaColorToProductVariationConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PaSizeIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the PaSizeToContentNodeConnection connection */\nexport type PaSizeToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPaSizeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the PaSizeToProductConnection connection */\nexport type PaSizeToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the PaSizeToProductVariationConnection connection */\nexport type PaSizeToProductVariationConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PaTesztElekIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the PaTesztElekToContentNodeConnection connection */\nexport type PaTesztElekToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPaTesztElekEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the PaTesztElekToProductConnection connection */\nexport type PaTesztElekToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the PaTesztElekToProductVariationConnection connection */\nexport type PaTesztElekToProductVariationConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PageIdType {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID',\n  /** Identify a resource by the URI. */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the PageToCommentConnection connection */\nexport type PageToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the PageToRevisionConnection connection */\nexport type PageToRevisionConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The status of the WordPress plugin. */\nexport enum PluginStatusEnum {\n  /** The plugin is currently active. */\n  ACTIVE = 'ACTIVE',\n  /** The plugin is a drop-in plugin. */\n  DROP_IN = 'DROP_IN',\n  /** The plugin is currently inactive. */\n  INACTIVE = 'INACTIVE',\n  /** The plugin is a must-use plugin. */\n  MUST_USE = 'MUST_USE',\n  /** The plugin is technically active but was paused while loading. */\n  PAUSED = 'PAUSED',\n  /** The plugin was active recently. */\n  RECENTLY_ACTIVE = 'RECENTLY_ACTIVE',\n  /** The plugin has an upgrade available. */\n  UPGRADE = 'UPGRADE'\n}\n\n/** Set relationships between the post to categories */\nexport type PostCategoriesInput = {\n  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostCategoriesNodeInput>>>;\n};\n\n/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostCategoriesNodeInput = {\n  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PostFormatIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the PostFormatToContentNodeConnection connection */\nexport type PostFormatToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPostFormatEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the PostFormatToPostConnection connection */\nexport type PostFormatToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PostIdType {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  SLUG = 'SLUG',\n  /** Identify a resource by the URI. */\n  URI = 'URI'\n}\n\n/** The format of post field data. */\nexport enum PostObjectFieldFormatEnum {\n  /** Provide the field value directly from database. Null on unauthenticated requests. */\n  RAW = 'RAW',\n  /** Provide the field value as rendered by WordPress. Default. */\n  RENDERED = 'RENDERED'\n}\n\n/** The column to use when filtering by date */\nexport enum PostObjectsConnectionDateColumnEnum {\n  /** The date the comment was created in local time. */\n  DATE = 'DATE',\n  /** The most recent modification date of the comment. */\n  MODIFIED = 'MODIFIED'\n}\n\n/** Field to order the connection by */\nexport enum PostObjectsConnectionOrderbyEnum {\n  /** Order by author */\n  AUTHOR = 'AUTHOR',\n  /** Order by the number of comments it has acquired */\n  COMMENT_COUNT = 'COMMENT_COUNT',\n  /** Order by publish date */\n  DATE = 'DATE',\n  /** Preserve the ID order given in the IN array */\n  IN = 'IN',\n  /** Order by the menu order value */\n  MENU_ORDER = 'MENU_ORDER',\n  /** Order by last modified date */\n  MODIFIED = 'MODIFIED',\n  /** Preserve slug order given in the NAME_IN array */\n  NAME_IN = 'NAME_IN',\n  /** Order by parent ID */\n  PARENT = 'PARENT',\n  /** Order by slug */\n  SLUG = 'SLUG',\n  /** Order by title */\n  TITLE = 'TITLE'\n}\n\n/** Options for ordering the connection */\nexport type PostObjectsConnectionOrderbyInput = {\n  /** The field to order the connection by */\n  field: PostObjectsConnectionOrderbyEnum;\n  /** Possible directions in which to order a list of items */\n  order: OrderEnum;\n};\n\n/** Set relationships between the post to postFormats */\nexport type PostPostFormatsInput = {\n  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostPostFormatsNodeInput>>>;\n};\n\n/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostPostFormatsNodeInput = {\n  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The status of the object. */\nexport enum PostStatusEnum {\n  /** Objects with the auto-draft status */\n  AUTO_DRAFT = 'AUTO_DRAFT',\n  /** Objects with the draft status */\n  DRAFT = 'DRAFT',\n  /** Objects with the future status */\n  FUTURE = 'FUTURE',\n  /** Objects with the inherit status */\n  INHERIT = 'INHERIT',\n  /** Objects with the pending status */\n  PENDING = 'PENDING',\n  /** Objects with the private status */\n  PRIVATE = 'PRIVATE',\n  /** Objects with the publish status */\n  PUBLISH = 'PUBLISH',\n  /** Objects with the request-completed status */\n  REQUEST_COMPLETED = 'REQUEST_COMPLETED',\n  /** Objects with the request-confirmed status */\n  REQUEST_CONFIRMED = 'REQUEST_CONFIRMED',\n  /** Objects with the request-failed status */\n  REQUEST_FAILED = 'REQUEST_FAILED',\n  /** Objects with the request-pending status */\n  REQUEST_PENDING = 'REQUEST_PENDING',\n  /** Objects with the trash status */\n  TRASH = 'TRASH',\n  /** Objects with the wc-cancelled status */\n  WC_CANCELLED = 'WC_CANCELLED',\n  /** Objects with the wc-checkout-draft status */\n  WC_CHECKOUT_DRAFT = 'WC_CHECKOUT_DRAFT',\n  /** Objects with the wc-completed status */\n  WC_COMPLETED = 'WC_COMPLETED',\n  /** Objects with the wc-failed status */\n  WC_FAILED = 'WC_FAILED',\n  /** Objects with the wc-on-hold status */\n  WC_ON_HOLD = 'WC_ON_HOLD',\n  /** Objects with the wc-pending status */\n  WC_PENDING = 'WC_PENDING',\n  /** Objects with the wc-processing status */\n  WC_PROCESSING = 'WC_PROCESSING',\n  /** Objects with the wc-refunded status */\n  WC_REFUNDED = 'WC_REFUNDED'\n}\n\n/** Set relationships between the post to tags */\nexport type PostTagsInput = {\n  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostTagsNodeInput>>>;\n};\n\n/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostTagsNodeInput = {\n  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the PostToCategoryConnection connection */\nexport type PostToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the PostToCommentConnection connection */\nexport type PostToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the PostToPostFormatConnection connection */\nexport type PostToPostFormatConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the PostToRevisionConnection connection */\nexport type PostToRevisionConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the PostToTagConnection connection */\nexport type PostToTagConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the PostToTermNodeConnection connection */\nexport type PostToTermNodeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The Taxonomy to filter terms by */\n  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Fields to order the PostType connection by */\nexport enum PostTypeOrderByEnum {\n  /** Order by publish date */\n  DATE = 'DATE',\n  /** Preserve the ID order given in the IN array */\n  IN = 'IN',\n  /** Order by the menu order value */\n  MENU_ORDER = 'MENU_ORDER',\n  /** Order by last modified date */\n  MODIFIED = 'MODIFIED',\n  /** Order by name */\n  NAME = 'NAME',\n  /** Preserve slug order given in the NAME_IN array */\n  NAME_IN = 'NAME_IN',\n  /** Order by parent ID */\n  PARENT = 'PARENT',\n  /** Order by slug */\n  SLUG = 'SLUG'\n}\n\n/** Options for ordering the connection */\nexport type PostTypeOrderbyInput = {\n  field: PostTypeOrderByEnum;\n  order?: InputMaybe<OrderEnum>;\n};\n\n/** Pricing field format enumeration */\nexport enum PricingFieldFormatEnum {\n  FORMATTED = 'FORMATTED',\n  RAW = 'RAW'\n}\n\n/** Set relationships between the Product to allPaColor */\nexport type ProductAllPaColorInput = {\n  /** If true, this will append the paColor to existing related allPaColor. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<ProductAllPaColorNodeInput>>>;\n};\n\n/** List of allPaColor to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type ProductAllPaColorNodeInput = {\n  /** The description of the paColor. This field is used to set a description of the paColor if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paColor. If present, this will be used to connect to the Product. If no existing paColor exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the paColor. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the paColor. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Set relationships between the Product to allPaSize */\nexport type ProductAllPaSizeInput = {\n  /** If true, this will append the paSize to existing related allPaSize. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<ProductAllPaSizeNodeInput>>>;\n};\n\n/** List of allPaSize to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type ProductAllPaSizeNodeInput = {\n  /** The description of the paSize. This field is used to set a description of the paSize if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paSize. If present, this will be used to connect to the Product. If no existing paSize exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the paSize. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the paSize. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Set relationships between the Product to allPaTesztElek */\nexport type ProductAllPaTesztElekInput = {\n  /** If true, this will append the paTesztElek to existing related allPaTesztElek. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<ProductAllPaTesztElekNodeInput>>>;\n};\n\n/** List of allPaTesztElek to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type ProductAllPaTesztElekNodeInput = {\n  /** The description of the paTesztElek. This field is used to set a description of the paTesztElek if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paTesztElek. If present, this will be used to connect to the Product. If no existing paTesztElek exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the paTesztElek. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the paTesztElek. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Product attribute taxonomies */\nexport enum ProductAttributeEnum {\n  PA_COLOR = 'PA_COLOR',\n  PA_SIZE = 'PA_SIZE',\n  PA_TESZT_ELEK = 'PA_TESZT_ELEK'\n}\n\n/** Product filter */\nexport type ProductAttributeFilterInput = {\n  /** A list of term ids */\n  ids?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Filter operation type */\n  operator?: InputMaybe<AttributeOperatorEnum>;\n  /** Which field to select taxonomy term by. */\n  taxonomy: ProductAttributeEnum;\n  /** A list of term slugs */\n  terms?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Options for ordering the connection */\nexport type ProductAttributeInput = {\n  attributeName: Scalars['String']['input'];\n  attributeValue?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Product filter */\nexport type ProductAttributeQueryInput = {\n  /** Limit result set to products with selected global attributes. */\n  queries?: InputMaybe<Array<InputMaybe<ProductAttributeFilterInput>>>;\n  /** The logical relationship between attributes when filtering across multiple at once. */\n  relation?: InputMaybe<AttributeOperatorEnum>;\n};\n\n/** Product attribute type enumeration */\nexport enum ProductAttributeTypesEnum {\n  /** A global product attribute */\n  GLOBAL = 'GLOBAL',\n  /** A local product attribute */\n  LOCAL = 'LOCAL'\n}\n\n/** Product category display type enumeration */\nexport enum ProductCategoryDisplay {\n  /** Display both products and subcategories of this category. */\n  BOTH = 'BOTH',\n  /** Display default content connected to this category. */\n  DEFAULT = 'DEFAULT',\n  /** Display products associated with this category. */\n  PRODUCTS = 'PRODUCTS',\n  /** Display subcategories of this category. */\n  SUBCATEGORIES = 'SUBCATEGORIES'\n}\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum ProductCategoryIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the ProductCategoryToContentNodeConnection connection */\nexport type ProductCategoryToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfProductCategoryEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the ProductCategoryToProductCategoryConnection connection */\nexport type ProductCategoryToProductCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductCategoryToProductConnection connection */\nexport type ProductCategoryToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** The Type of Identifier used to fetch a single Product. Default is ID. */\nexport enum ProductIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID',\n  /** Unique store identifier for product. */\n  SKU = 'SKU',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  SLUG = 'SLUG'\n}\n\n/** Set relationships between the Product to productCategories */\nexport type ProductProductCategoriesInput = {\n  /** If true, this will append the productCategory to existing related productCategories. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<ProductProductCategoriesNodeInput>>>;\n};\n\n/** List of productCategories to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type ProductProductCategoriesNodeInput = {\n  /** The description of the productCategory. This field is used to set a description of the productCategory if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productCategory. If present, this will be used to connect to the Product. If no existing productCategory exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the productCategory. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the productCategory. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Set relationships between the Product to productTags */\nexport type ProductProductTagsInput = {\n  /** If true, this will append the productTag to existing related productTags. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<ProductProductTagsNodeInput>>>;\n};\n\n/** List of productTags to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type ProductProductTagsNodeInput = {\n  /** The description of the productTag. This field is used to set a description of the productTag if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productTag. If present, this will be used to connect to the Product. If no existing productTag exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the productTag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the productTag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Set relationships between the Product to productTypes */\nexport type ProductProductTypesInput = {\n  /** If true, this will append the productType to existing related productTypes. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<ProductProductTypesNodeInput>>>;\n};\n\n/** List of productTypes to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type ProductProductTypesNodeInput = {\n  /** The description of the productType. This field is used to set a description of the productType if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productType. If present, this will be used to connect to the Product. If no existing productType exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the productType. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the productType. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Set relationships between the Product to shippingClasses */\nexport type ProductShippingClassesInput = {\n  /** If true, this will append the shippingClass to existing related shippingClasses. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<ProductShippingClassesNodeInput>>>;\n};\n\n/** List of shippingClasses to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type ProductShippingClassesNodeInput = {\n  /** The description of the shippingClass. This field is used to set a description of the shippingClass if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the shippingClass. If present, this will be used to connect to the Product. If no existing shippingClass exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the shippingClass. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the shippingClass. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum ProductTagIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the ProductTagToContentNodeConnection connection */\nexport type ProductTagToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfProductTagEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the ProductTagToProductConnection connection */\nexport type ProductTagToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Product taxonomies */\nexport enum ProductTaxonomyEnum {\n  PA_COLOR = 'PA_COLOR',\n  PA_SIZE = 'PA_SIZE',\n  PA_TESZT_ELEK = 'PA_TESZT_ELEK',\n  PRODUCT_CAT = 'PRODUCT_CAT',\n  PRODUCT_SHIPPING_CLASS = 'PRODUCT_SHIPPING_CLASS',\n  PRODUCT_TAG = 'PRODUCT_TAG',\n  PRODUCT_TYPE = 'PRODUCT_TYPE',\n  PRODUCT_VISIBILITY = 'PRODUCT_VISIBILITY'\n}\n\n/** Product filter */\nexport type ProductTaxonomyFilterInput = {\n  /** A list of term ids */\n  ids?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Filter operation type */\n  operator?: InputMaybe<TaxonomyOperatorEnum>;\n  /** Which field to select taxonomy term by. */\n  taxonomy: ProductTaxonomyEnum;\n  /** A list of term slugs */\n  terms?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Product taxonomy filter type */\nexport type ProductTaxonomyInput = {\n  /** Product taxonomy rules to be filter results by */\n  filters?: InputMaybe<Array<InputMaybe<ProductTaxonomyFilterInput>>>;\n  /** Logic relation between each filter. */\n  relation?: InputMaybe<RelationEnum>;\n};\n\n/** Arguments for filtering the ProductToCommentConnection connection */\nexport type ProductToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the ProductToCommentsConnection connection */\nexport type ProductToCommentsConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the ProductToMediaItemConnection connection */\nexport type ProductToMediaItemConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the ProductToPaColorConnection connection */\nexport type ProductToPaColorConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductToPaSizeConnection connection */\nexport type ProductToPaSizeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductToPaTesztElekConnection connection */\nexport type ProductToPaTesztElekConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductToParentConnection connection */\nexport type ProductToParentConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the ProductToPreviewConnection connection */\nexport type ProductToPreviewConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the ProductToProductAttributeConnection connection */\nexport type ProductToProductAttributeConnectionWhereArgs = {\n  /** Filter results by attribute scope. */\n  type?: InputMaybe<ProductAttributeTypesEnum>;\n};\n\n/** Arguments for filtering the ProductToProductCategoryConnection connection */\nexport type ProductToProductCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductToProductConnection connection */\nexport type ProductToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the ProductToProductTagConnection connection */\nexport type ProductToProductTagConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductToProductTypeConnection connection */\nexport type ProductToProductTypeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductToProductUnionConnection connection */\nexport type ProductToProductUnionConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Shuffle results? (Pagination currently not support by this argument) */\n  shuffle?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the ProductToShippingClassConnection connection */\nexport type ProductToShippingClassConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductToTermNodeConnection connection */\nexport type ProductToTermNodeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The Taxonomy to filter terms by */\n  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the ProductToUpsellConnection connection */\nexport type ProductToUpsellConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the ProductToVisibleProductConnection connection */\nexport type ProductToVisibleProductConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum ProductTypeIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the ProductTypeToContentNodeConnection connection */\nexport type ProductTypeToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfProductTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the ProductTypeToProductConnection connection */\nexport type ProductTypeToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Product type enumeration */\nexport enum ProductTypesEnum {\n  /** An external product */\n  EXTERNAL = 'EXTERNAL',\n  /** A product group */\n  GROUPED = 'GROUPED',\n  /** A simple product */\n  SIMPLE = 'SIMPLE',\n  /** A variable product */\n  VARIABLE = 'VARIABLE',\n  /** A product variation */\n  VARIATION = 'VARIATION'\n}\n\n/** The Type of Identifier used to fetch a single ProductVariation. Default is ID. */\nexport enum ProductVariationIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID'\n}\n\n/** Set relationships between the Product to visibleProducts */\nexport type ProductVisibleProductsInput = {\n  /** If true, this will append the visibleProduct to existing related visibleProducts. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<ProductVisibleProductsNodeInput>>>;\n};\n\n/** List of visibleProducts to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type ProductVisibleProductsNodeInput = {\n  /** The description of the visibleProduct. This field is used to set a description of the visibleProduct if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the visibleProduct. If present, this will be used to connect to the Product. If no existing visibleProduct exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the visibleProduct. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the visibleProduct. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the ProductWithVariationsToProductVariationConnection connection */\nexport type ProductWithVariationsToProductVariationConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Fields to order the Products connection by */\nexport enum ProductsOrderByEnum {\n  /** Order by publish date */\n  DATE = 'DATE',\n  /** Preserve the ID order given in the IN array */\n  IN = 'IN',\n  /** Order by the menu order value */\n  MENU_ORDER = 'MENU_ORDER',\n  /** Order by last modified date */\n  MODIFIED = 'MODIFIED',\n  /** Order by name */\n  NAME = 'NAME',\n  /** Preserve slug order given in the NAME_IN array */\n  NAME_IN = 'NAME_IN',\n  /** Order by date product sale starts */\n  ON_SALE_FROM = 'ON_SALE_FROM',\n  /** Order by date product sale ends */\n  ON_SALE_TO = 'ON_SALE_TO',\n  /** Order by parent ID */\n  PARENT = 'PARENT',\n  /** Order by product popularity */\n  POPULARITY = 'POPULARITY',\n  /** Order by product's current price */\n  PRICE = 'PRICE',\n  /** Order by product average rating */\n  RATING = 'RATING',\n  /** Order by product's regular price */\n  REGULAR_PRICE = 'REGULAR_PRICE',\n  /** Order by relevance */\n  RELEVANCE = 'RELEVANCE',\n  /** Order by number of reviews on product */\n  REVIEW_COUNT = 'REVIEW_COUNT',\n  /** Order by product's sale price */\n  SALE_PRICE = 'SALE_PRICE',\n  /** Order by slug */\n  SLUG = 'SLUG',\n  /** Order by total sales of products sold */\n  TOTAL_SALES = 'TOTAL_SALES'\n}\n\n/** Options for ordering the connection */\nexport type ProductsOrderbyInput = {\n  field: ProductsOrderByEnum;\n  order?: InputMaybe<OrderEnum>;\n};\n\n/** The Type of Identifier used to fetch a single Refund. Default is ID. */\nexport enum RefundIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID'\n}\n\n/** Input for the registerCustomer mutation. */\nexport type RegisterCustomerInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** Customer billing information */\n  billing?: InputMaybe<CustomerAddressInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** Meta data. */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** Customer shipping address */\n  shipping?: InputMaybe<CustomerAddressInput>;\n  /** Customer shipping is identical to billing address */\n  shippingSameAsBilling?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A string that contains the user's username. */\n  username?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the registerUser mutation. */\nexport type RegisterUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the user's username. */\n  username: Scalars['String']['input'];\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The logical relation between each item in the array when there are more than one. */\nexport enum RelationEnum {\n  /** The logical AND condition returns true if both operands are true, otherwise, it returns false. */\n  AND = 'AND',\n  /** The logical OR condition returns false if both operands are false, otherwise, it returns true. */\n  OR = 'OR'\n}\n\n/** Input for the removeCoupons mutation. */\nexport type RemoveCouponsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Code of coupon being applied */\n  codes?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Input for the removeItemsFromCart mutation. */\nexport type RemoveItemsFromCartInput = {\n  /** Remove all cart items */\n  all?: InputMaybe<Scalars['Boolean']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Item keys of the items being removed */\n  keys?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n};\n\n/** Input for the removeMethodFromShippingZone mutation. */\nexport type RemoveMethodFromShippingZoneInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Shipping method instance ID */\n  instanceId: Scalars['Int']['input'];\n  /** The ID of the shipping zone to delete. */\n  zoneId: Scalars['Int']['input'];\n};\n\n/** Input for the resetUserPassword mutation. */\nexport type ResetUserPasswordInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Password reset key */\n  key?: InputMaybe<Scalars['String']['input']>;\n  /** The user's login (username). */\n  login?: InputMaybe<Scalars['String']['input']>;\n  /** The new password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the restoreCartItems mutation. */\nexport type RestoreCartItemsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Cart item key of the item being removed */\n  keys?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n};\n\n/** Input for the restoreComment mutation. */\nexport type RestoreCommentInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment to be restored */\n  id: Scalars['ID']['input'];\n};\n\n/** Input for the restoreReview mutation. */\nexport type RestoreReviewInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the target product review */\n  id: Scalars['ID']['input'];\n};\n\n/** Arguments for filtering the RootQueryToCategoryConnection connection */\nexport type RootQueryToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToCommentConnection connection */\nexport type RootQueryToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToContentNodeConnection connection */\nexport type RootQueryToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToCouponConnection connection */\nexport type RootQueryToCouponConnectionWhereArgs = {\n  /** Limit result set to resources with a specific code. */\n  code?: InputMaybe<Scalars['String']['input']>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostTypeOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit results to those matching a string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToCustomerConnection connection */\nexport type RootQueryToCustomerConnectionWhereArgs = {\n  /** Limit result set to resources with a specific email. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Order of results. */\n  order?: InputMaybe<OrderEnum>;\n  /** Order results by a specific field. */\n  orderby?: InputMaybe<CustomerConnectionOrderbyEnum>;\n  /** Limit results to those matching a string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToMediaItemConnection connection */\nexport type RootQueryToMediaItemConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToMenuConnection connection */\nexport type RootQueryToMenuConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The slug of the menu to query items for */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToMenuItemConnection connection */\nexport type RootQueryToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToOrderConnection connection */\nexport type RootQueryToOrderConnectionWhereArgs = {\n  /** Limit result set to orders assigned a specific billing email. */\n  billingEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to orders assigned a specific customer. */\n  customerId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to orders assigned a specific group of customers. */\n  customersIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<OrdersOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to orders assigned a specific product. */\n  productId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit results to those matching a string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to orders assigned a specific status. */\n  statuses?: InputMaybe<Array<InputMaybe<OrderStatusEnum>>>;\n};\n\n/** Arguments for filtering the RootQueryToPaColorConnection connection */\nexport type RootQueryToPaColorConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToPaSizeConnection connection */\nexport type RootQueryToPaSizeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToPaTesztElekConnection connection */\nexport type RootQueryToPaTesztElekConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToPageConnection connection */\nexport type RootQueryToPageConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToPaymentGatewayConnection connection */\nexport type RootQueryToPaymentGatewayConnectionWhereArgs = {\n  /** Include disabled payment gateways? */\n  all?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToPluginConnection connection */\nexport type RootQueryToPluginConnectionWhereArgs = {\n  /** Show plugin based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve plugins where plugin status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PluginStatusEnum>>>;\n  /** Show plugins with a specific status. */\n  status?: InputMaybe<PluginStatusEnum>;\n};\n\n/** Arguments for filtering the RootQueryToPostConnection connection */\nexport type RootQueryToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToPostFormatConnection connection */\nexport type RootQueryToPostFormatConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToProductCategoryConnection connection */\nexport type RootQueryToProductCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToProductTagConnection connection */\nexport type RootQueryToProductTagConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToProductTypeConnection connection */\nexport type RootQueryToProductTypeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToProductUnionConnection connection */\nexport type RootQueryToProductUnionConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Arguments for filtering the RootQueryToRefundConnection connection */\nexport type RootQueryToRefundConnectionWhereArgs = {\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to refunds from a specific group of order IDs. */\n  orderIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostTypeOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit results to those matching a string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to refunds assigned a specific status. */\n  statuses?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Arguments for filtering the RootQueryToRevisionsConnection connection */\nexport type RootQueryToRevisionsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToShippingClassConnection connection */\nexport type RootQueryToShippingClassConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToTagConnection connection */\nexport type RootQueryToTagConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToTaxRateConnection connection */\nexport type RootQueryToTaxRateConnectionWhereArgs = {\n  /** Sort by tax class. */\n  class?: InputMaybe<TaxClassEnum>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<TaxRateConnectionOrderbyInput>>>;\n  /** Filter results by a post code. */\n  postCode?: InputMaybe<Scalars['String']['input']>;\n  /** Filter results by a group of post codes. */\n  postCodeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Arguments for filtering the RootQueryToTermNodeConnection connection */\nexport type RootQueryToTermNodeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The Taxonomy to filter terms by */\n  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Arguments for filtering the RootQueryToUserConnection connection */\nexport type RootQueryToUserConnectionWhereArgs = {\n  /** Array of userIds to exclude. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Pass an array of post types to filter results to users who have published posts in those post types. */\n  hasPublishedPosts?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of userIds to include. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** The user login. */\n  login?: InputMaybe<Scalars['String']['input']>;\n  /** An array of logins to include. Users matching one of these logins will be included in results. */\n  loginIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */\n  loginNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The user nicename. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */\n  nicenameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */\n  nicenameNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<UsersConnectionOrderbyInput>>>;\n  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */\n  role?: InputMaybe<UserRoleEnum>;\n  /** An array of role names. Matched users must have at least one of these roles. */\n  roleIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;\n  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */\n  roleNotIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;\n  /** Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */\n  searchColumns?: InputMaybe<Array<InputMaybe<UsersConnectionSearchColumnEnum>>>;\n};\n\n/** Arguments for filtering the RootQueryToVisibleProductConnection connection */\nexport type RootQueryToVisibleProductConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The strategy to use when loading the script */\nexport enum ScriptLoadingStrategyEnum {\n  /** Use the script `async` attribute */\n  ASYNC = 'ASYNC',\n  /** Use the script `defer` attribute */\n  DEFER = 'DEFER'\n}\n\n/** Input for the sendPasswordResetEmail mutation. */\nexport type SendPasswordResetEmailInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the user's username or email address. */\n  username: Scalars['String']['input'];\n};\n\n/** Input for the setDefaultPaymentMethod mutation. */\nexport type SetDefaultPaymentMethodInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Token ID of the payment token being deleted. */\n  tokenId: Scalars['Int']['input'];\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum ShippingClassIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the ShippingClassToContentNodeConnection connection */\nexport type ShippingClassToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfShippingClassEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the ShippingClassToProductConnection connection */\nexport type ShippingClassToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Shipping lines data. */\nexport type ShippingLineInput = {\n  /** Shipping Line ID */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** Shipping instance ID. */\n  instanceId?: InputMaybe<Scalars['String']['input']>;\n  /** Meta data. */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** Shipping method ID. */\n  methodId: Scalars['String']['input'];\n  /** Shipping method name. */\n  methodTitle: Scalars['String']['input'];\n  /** Line total (after discounts). */\n  total: Scalars['String']['input'];\n};\n\n/** Shipping lines data. */\nexport type ShippingLocationInput = {\n  /** Shipping location code. */\n  code?: InputMaybe<Scalars['String']['input']>;\n  /** Shipping location type. */\n  type?: InputMaybe<ShippingLocationTypeEnum>;\n};\n\n/** A Shipping zone location type. */\nexport enum ShippingLocationTypeEnum {\n  CONTINENT = 'CONTINENT',\n  COUNTRY = 'COUNTRY',\n  POSTCODE = 'POSTCODE',\n  STATE = 'STATE'\n}\n\n/** The Type of Identifier used to fetch a single Shipping Method. Default is ID. */\nexport enum ShippingMethodIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID'\n}\n\n/** The Type of Identifier used to fetch a single Shipping Zone. Default is ID. */\nexport enum ShippingZoneIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID'\n}\n\n/** Arguments for filtering the SimpleProductToProductUnionConnection connection */\nexport type SimpleProductToProductUnionConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** Product stock status enumeration */\nexport enum StockStatusEnum {\n  IN_STOCK = 'IN_STOCK',\n  ON_BACKORDER = 'ON_BACKORDER',\n  OUT_OF_STOCK = 'OUT_OF_STOCK'\n}\n\n/** The Stripe Payment Method. Payment or Setup. */\nexport enum StripePaymentMethodEnum {\n  PAYMENT = 'PAYMENT',\n  SETUP = 'SETUP'\n}\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum TagIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the TagToContentNodeConnection connection */\nexport type TagToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfTagEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the TagToPostConnection connection */\nexport type TagToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Tax class enumeration */\nexport enum TaxClassEnum {\n  /** Inherits Tax class from cart */\n  INHERIT_CART = 'INHERIT_CART',\n  KEDVEZM__NYES_AD__KULCS = 'KEDVEZM__NYES_AD__KULCS',\n  NULLA_KULCS = 'NULLA_KULCS',\n  /** Standard Tax rate */\n  STANDARD = 'STANDARD'\n}\n\n/** Field to order the connection by */\nexport enum TaxRateConnectionOrderbyEnum {\n  ID = 'ID',\n  ORDER = 'ORDER'\n}\n\n/** Options for ordering the connection */\nexport type TaxRateConnectionOrderbyInput = {\n  field: TaxRateConnectionOrderbyEnum;\n  order?: InputMaybe<OrderEnum>;\n};\n\n/** The Type of Identifier used to fetch a single Tax rate. Default is ID. */\nexport enum TaxRateIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DATABASE_ID = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  ID = 'ID'\n}\n\n/** Product tax status enumeration */\nexport enum TaxStatusEnum {\n  NONE = 'NONE',\n  SHIPPING = 'SHIPPING',\n  TAXABLE = 'TAXABLE'\n}\n\n/** Allowed taxonomies */\nexport enum TaxonomyEnum {\n  /** Taxonomy enum category */\n  CATEGORY = 'CATEGORY',\n  /** Taxonomy enum pa_color */\n  PACOLOR = 'PACOLOR',\n  /** Taxonomy enum pa_size */\n  PASIZE = 'PASIZE',\n  /** Taxonomy enum pa_teszt-elek */\n  PATESZTELEK = 'PATESZTELEK',\n  /** Taxonomy enum post_format */\n  POSTFORMAT = 'POSTFORMAT',\n  /** Taxonomy enum product_cat */\n  PRODUCTCATEGORY = 'PRODUCTCATEGORY',\n  /** Taxonomy enum product_tag */\n  PRODUCTTAG = 'PRODUCTTAG',\n  /** Taxonomy enum product_type */\n  PRODUCTTYPE = 'PRODUCTTYPE',\n  /** Taxonomy enum product_shipping_class */\n  SHIPPINGCLASS = 'SHIPPINGCLASS',\n  /** Taxonomy enum post_tag */\n  TAG = 'TAG',\n  /** Taxonomy enum product_visibility */\n  VISIBLEPRODUCT = 'VISIBLEPRODUCT'\n}\n\n/** The Type of Identifier used to fetch a single Taxonomy node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum TaxonomyIdTypeEnum {\n  /** The globally unique ID */\n  ID = 'ID',\n  /** The name of the taxonomy */\n  NAME = 'NAME'\n}\n\n/** Taxonomy query operators */\nexport enum TaxonomyOperatorEnum {\n  AND = 'AND',\n  EXISTS = 'EXISTS',\n  IN = 'IN',\n  NOT_EXISTS = 'NOT_EXISTS',\n  NOT_IN = 'NOT_IN'\n}\n\n/** The Type of Identifier used to fetch a single resource. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum TermNodeIdTypeEnum {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Options for ordering the connection by */\nexport enum TermObjectsConnectionOrderbyEnum {\n  /** Order the connection by item count. */\n  COUNT = 'COUNT',\n  /** Order the connection by description. */\n  DESCRIPTION = 'DESCRIPTION',\n  /** Order the connection by name. */\n  NAME = 'NAME',\n  /** Order the connection by slug. */\n  SLUG = 'SLUG',\n  /** Order the connection by term group. */\n  TERM_GROUP = 'TERM_GROUP',\n  /** Order the connection by term id. */\n  TERM_ID = 'TERM_ID',\n  /** Order the connection by term order. */\n  TERM_ORDER = 'TERM_ORDER'\n}\n\n/** Input for the updateCategory mutation. */\nexport type UpdateCategoryInput = {\n  /** The slug that the category will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the category object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the category object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category that should be set as the parent */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateComment mutation. */\nexport type UpdateCommentInput = {\n  /** The approval status of the comment. */\n  approved?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the comment's author. */\n  author?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the comment's author. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The url of the comment's author. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The database ID of the post object the comment belongs to. */\n  commentOn?: InputMaybe<Scalars['Int']['input']>;\n  /** Content of the comment. */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment being updated. */\n  id: Scalars['ID']['input'];\n  /** Parent comment ID of current comment. */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** The approval status of the comment */\n  status?: InputMaybe<CommentStatusEnum>;\n  /** Type of comment. */\n  type?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateCoupon mutation. */\nexport type UpdateCouponInput = {\n  /** The amount of discount. Should always be numeric, even if setting a percentage. */\n  amount?: InputMaybe<Scalars['Float']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Coupon code. */\n  code?: InputMaybe<Scalars['String']['input']>;\n  /** The date the coupon expires, in the site's timezone. */\n  dateExpires?: InputMaybe<Scalars['String']['input']>;\n  /** The date the coupon expires, as GMT. */\n  dateExpiresGmt?: InputMaybe<Scalars['String']['input']>;\n  /** Coupon description. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Determines the type of discount that will be applied. */\n  discountType?: InputMaybe<DiscountTypeEnum>;\n  /** List of email addresses that can use this coupon. */\n  emailRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** If true, this coupon will not be applied to items that have sale prices. */\n  excludeSaleItems?: InputMaybe<Scalars['Boolean']['input']>;\n  /** List of category IDs the coupon does not apply to. */\n  excludedProductCategories?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** List of product IDs the coupon cannot be used on. */\n  excludedProductIds?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** If true and if the free shipping method requires a coupon, this coupon will enable free shipping. */\n  freeShipping?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Unique identifier for the object. */\n  id: Scalars['ID']['input'];\n  /** If true, the coupon can only be used individually. Other applied coupons will be removed from the cart. */\n  individualUse?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Max number of items in the cart the coupon can be applied to. */\n  limitUsageToXItems?: InputMaybe<Scalars['Int']['input']>;\n  /** Maximum order amount allowed when using the coupon. */\n  maximumAmount?: InputMaybe<Scalars['String']['input']>;\n  /** Meta data. */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** Minimum order amount that needs to be in the cart before coupon applies. */\n  minimumAmount?: InputMaybe<Scalars['String']['input']>;\n  /** List of category IDs the coupon applies to. */\n  productCategories?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** List of product IDs the coupon can be used on. */\n  productIds?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** How many times the coupon can be used in total. */\n  usageLimit?: InputMaybe<Scalars['Int']['input']>;\n  /** How many times the coupon can be used per customer. */\n  usageLimitPerUser?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Input for the updateCustomer mutation. */\nexport type UpdateCustomerInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** Customer billing information */\n  billing?: InputMaybe<CustomerAddressInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** Meta data. */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** An array of roles to be assigned to the user. */\n  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Customer shipping address */\n  shipping?: InputMaybe<CustomerAddressInput>;\n  /** Customer shipping is identical to billing address */\n  shippingSameAsBilling?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateItemQuantities mutation. */\nexport type UpdateItemQuantitiesInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Cart item being updated */\n  items?: InputMaybe<Array<InputMaybe<CartItemQuantityInput>>>;\n};\n\n/** Input for the updateMediaItem mutation. */\nexport type UpdateMediaItemInput = {\n  /** Alternative text to display when mediaItem is not displayed */\n  altText?: InputMaybe<Scalars['String']['input']>;\n  /** The userId to assign as the author of the mediaItem */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** The caption for the mediaItem */\n  caption?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the mediaItem */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the mediaItem */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The date (in GMT zone) of the mediaItem */\n  dateGmt?: InputMaybe<Scalars['String']['input']>;\n  /** Description of the mediaItem */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The file name of the mediaItem */\n  filePath?: InputMaybe<Scalars['String']['input']>;\n  /** The file type of the mediaItem */\n  fileType?: InputMaybe<MimeTypeEnum>;\n  /** The ID of the mediaItem object */\n  id: Scalars['ID']['input'];\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The ping status for the mediaItem */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the mediaItem */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the mediaItem */\n  status?: InputMaybe<MediaItemStatusEnum>;\n  /** The title of the mediaItem */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateMethodOnShippingZone mutation. */\nexport type UpdateMethodOnShippingZoneInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the shipping method is enabled or not. */\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Shipping method instance ID */\n  instanceId: Scalars['Int']['input'];\n  /** The order of the shipping method. */\n  order?: InputMaybe<Scalars['Int']['input']>;\n  /** The settings for the shipping method. */\n  settings?: InputMaybe<Array<InputMaybe<WcSettingInput>>>;\n  /** The ID of the shipping zone to delete. */\n  zoneId: Scalars['Int']['input'];\n};\n\n/** Input for the updateOrder mutation. */\nexport type UpdateOrderInput = {\n  /** Order billing address */\n  billing?: InputMaybe<CustomerAddressInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Coupons codes to be applied to order */\n  coupons?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Currency the order was created with, in ISO format. */\n  currency?: InputMaybe<CurrencyEnum>;\n  /** Order customer ID */\n  customerId?: InputMaybe<Scalars['Int']['input']>;\n  /** Note left by customer during checkout. */\n  customerNote?: InputMaybe<Scalars['String']['input']>;\n  /** Order shipping lines */\n  feeLines?: InputMaybe<Array<InputMaybe<FeeLineInput>>>;\n  /** Order global ID */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** Define if the order is paid. It will set the status to processing and reduce stock items. */\n  isPaid?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Order line items */\n  lineItems?: InputMaybe<Array<InputMaybe<LineItemInput>>>;\n  /** Order meta data */\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n  /** Order WP ID */\n  orderId?: InputMaybe<Scalars['Int']['input']>;\n  /** Parent order ID. */\n  parentId?: InputMaybe<Scalars['Int']['input']>;\n  /** Payment method ID. */\n  paymentMethod?: InputMaybe<Scalars['String']['input']>;\n  /** Payment method title. */\n  paymentMethodTitle?: InputMaybe<Scalars['String']['input']>;\n  /** Order shipping address */\n  shipping?: InputMaybe<CustomerAddressInput>;\n  /** Order shipping lines */\n  shippingLines?: InputMaybe<Array<InputMaybe<ShippingLineInput>>>;\n  /** Order status */\n  status?: InputMaybe<OrderStatusEnum>;\n  /** Order transaction ID */\n  transactionId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updatePaColor mutation. */\nexport type UpdatePaColorInput = {\n  /** The slug that the pa_color will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the pa_color object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paColor object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the pa_color object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updatePaSize mutation. */\nexport type UpdatePaSizeInput = {\n  /** The slug that the pa_size will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the pa_size object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paSize object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the pa_size object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updatePaTesztElek mutation. */\nexport type UpdatePaTesztElekInput = {\n  /** The slug that the pa_teszt-elek will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the pa_teszt-elek object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the paTesztElek object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the pa_teszt-elek object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updatePage mutation. */\nexport type UpdatePageInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the page object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updatePostFormat mutation. */\nexport type UpdatePostFormatInput = {\n  /** The slug that the post_format will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_format object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the post_format object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updatePost mutation. */\nexport type UpdatePostInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** Set connections between the post and categories */\n  categories?: InputMaybe<PostCategoriesInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The excerpt of the object */\n  excerpt?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the post object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The ping status for the object */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** URLs that have been pinged. */\n  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Set connections between the post and postFormats */\n  postFormats?: InputMaybe<PostPostFormatsInput>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Set connections between the post and tags */\n  tags?: InputMaybe<PostTagsInput>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n  /** URLs queued to be pinged. */\n  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Input for the updateProductCategory mutation. */\nexport type UpdateProductCategoryInput = {\n  /** The slug that the product_cat will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_cat object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productCategory object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the product_cat object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the product_cat that should be set as the parent */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateProduct mutation. */\nexport type UpdateProductInput = {\n  /** Set connections between the Product and allPaColor */\n  allPaColor?: InputMaybe<ProductAllPaColorInput>;\n  /** Set connections between the Product and allPaSize */\n  allPaSize?: InputMaybe<ProductAllPaSizeInput>;\n  /** Set connections between the Product and allPaTesztElek */\n  allPaTesztElek?: InputMaybe<ProductAllPaTesztElekInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The excerpt of the object */\n  excerpt?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Product object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Set connections between the Product and productCategories */\n  productCategories?: InputMaybe<ProductProductCategoriesInput>;\n  /** Set connections between the Product and productTags */\n  productTags?: InputMaybe<ProductProductTagsInput>;\n  /** Set connections between the Product and productTypes */\n  productTypes?: InputMaybe<ProductProductTypesInput>;\n  /** Set connections between the Product and shippingClasses */\n  shippingClasses?: InputMaybe<ProductShippingClassesInput>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n  /** Set connections between the Product and visibleProducts */\n  visibleProducts?: InputMaybe<ProductVisibleProductsInput>;\n};\n\n/** Input for the updateProductTag mutation. */\nexport type UpdateProductTagInput = {\n  /** The slug that the product_tag will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_tag object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productTag object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the product_tag object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateProductType mutation. */\nexport type UpdateProductTypeInput = {\n  /** The slug that the product_type will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_type object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the productType object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the product_type object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateReview mutation. */\nexport type UpdateReviewInput = {\n  /** The approval status of the comment. */\n  approved?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the comment's author. */\n  author?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the comment's author. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The url of the comment's author. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The database ID of the post object the comment belongs to. */\n  commentOn?: InputMaybe<Scalars['Int']['input']>;\n  /** Content of the comment. */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the review being updated. */\n  id: Scalars['ID']['input'];\n  /** Parent comment ID of current comment. */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Product rating */\n  rating: Scalars['Int']['input'];\n  /** The approval status of the comment */\n  status?: InputMaybe<CommentStatusEnum>;\n};\n\n/** Input for the updateSession mutation. */\nexport type UpdateSessionInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Data to be persisted in the session. */\n  sessionData?: InputMaybe<Array<InputMaybe<MetaDataInput>>>;\n};\n\n/** Input for the updateSettings mutation. */\nexport type UpdateSettingsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Engedélyezzük az embereknek, hogy hozzászóljanak az új bejegyzésekhez. */\n  discussionSettingsDefaultCommentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** A linkek engedélyezése másik blognak új bejegyzés esetén (pingbacks and trackback) */\n  discussionSettingsDefaultPingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** Dátumformátum az összes dátumhoz. */\n  generalSettingsDateFormat?: InputMaybe<Scalars['String']['input']>;\n  /** Honlap egysoros leírása. */\n  generalSettingsDescription?: InputMaybe<Scalars['String']['input']>;\n  /** Ez a cím adminisztrációs célt szolgál, hasonlóan, mint pl. a felhasználói értesítések. */\n  generalSettingsEmail?: InputMaybe<Scalars['String']['input']>;\n  /** WordPress nyelvesítés kódja. */\n  generalSettingsLanguage?: InputMaybe<Scalars['String']['input']>;\n  /** A hét kezdőnapja. */\n  generalSettingsStartOfWeek?: InputMaybe<Scalars['Int']['input']>;\n  /** Időformátum az összes időhöz. */\n  generalSettingsTimeFormat?: InputMaybe<Scalars['String']['input']>;\n  /** Egy település ami a saját időzónánkkal azonos helyen van. */\n  generalSettingsTimezone?: InputMaybe<Scalars['String']['input']>;\n  /** Honlap címsor. */\n  generalSettingsTitle?: InputMaybe<Scalars['String']['input']>;\n  /** Honlap URL címe. */\n  generalSettingsUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Annak az oldalnak az azonosítója (ID), amelyen a legfrissebb bejegyzéseket kell megjeleníteni */\n  readingSettingsPageForPosts?: InputMaybe<Scalars['Int']['input']>;\n  /** Az oldal azonosítója (ID), amelyet a címlapon meg kell jeleníteni */\n  readingSettingsPageOnFront?: InputMaybe<Scalars['Int']['input']>;\n  /** Legfeljebb ennyi blog oldal megjelenítése. */\n  readingSettingsPostsPerPage?: InputMaybe<Scalars['Int']['input']>;\n  /** Mi jelenjen meg az kezdőlapon? */\n  readingSettingsShowOnFront?: InputMaybe<Scalars['String']['input']>;\n  /** Alapértelmezett bejegyzés kategória. */\n  writingSettingsDefaultCategory?: InputMaybe<Scalars['Int']['input']>;\n  /** Alapértelmezett bejegyzés formátum. */\n  writingSettingsDefaultPostFormat?: InputMaybe<Scalars['String']['input']>;\n  /** Konvertáljuk a hangulatjeleket, mint pl. a :-), és :-P grafikus megjelenítésűvé. */\n  writingSettingsUseSmilies?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Input for the updateShippingClass mutation. */\nexport type UpdateShippingClassInput = {\n  /** The slug that the product_shipping_class will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_shipping_class object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the shippingClass object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the product_shipping_class object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateShippingMethod mutation. */\nexport type UpdateShippingMethodInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  shippingMethods?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Input for the updateShippingZone mutation. */\nexport type UpdateShippingZoneInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the shipping zone to update. */\n  id: Scalars['Int']['input'];\n  /** Name of the shipping zone. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Order of the shipping zone. */\n  order?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Input for the updateShippingZoneLocations mutation. */\nexport type UpdateShippingZoneLocationsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The locations to add to the shipping zone. */\n  locations?: InputMaybe<Array<InputMaybe<ShippingLocationInput>>>;\n  /** The ID of the shipping zone to delete. */\n  zoneId: Scalars['Int']['input'];\n};\n\n/** Input for the updateTag mutation. */\nexport type UpdateTagInput = {\n  /** The slug that the post_tag will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_tag object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the post_tag object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateTaxRate mutation. */\nexport type UpdateTaxRateInput = {\n  /** Cities for the tax rate. */\n  cities?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Tax rate class. */\n  class?: InputMaybe<TaxClassEnum>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the tax rate is compound. */\n  compound?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Country code for the tax rate. */\n  country?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tax rate to update. */\n  id: Scalars['Int']['input'];\n  /** Tax rate name. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Tax rate order. */\n  order?: InputMaybe<Scalars['Int']['input']>;\n  /** Postcodes for the tax rate. */\n  postcodes?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Tax rate priority. */\n  priority?: InputMaybe<Scalars['Int']['input']>;\n  /** Tax rate. */\n  rate?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the tax rate is applied to shipping. */\n  shipping?: InputMaybe<Scalars['Boolean']['input']>;\n  /** State code for the tax rate. */\n  state?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateUser mutation. */\nexport type UpdateUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user */\n  id: Scalars['ID']['input'];\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** An array of roles to be assigned to the user. */\n  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Input for the updateVisibleProduct mutation. */\nexport type UpdateVisibleProductInput = {\n  /** The slug that the product_visibility will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the product_visibility object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the visibleProduct object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the product_visibility object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The Type of Identifier used to fetch a single User node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum UserNodeIdTypeEnum {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The Email of the User */\n  EMAIL = 'EMAIL',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The slug of the User */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI',\n  /** The username the User uses to login with */\n  USERNAME = 'USERNAME'\n}\n\n/** Names of available user roles */\nexport enum UserRoleEnum {\n  /** User role with specific capabilities */\n  ADMINISTRATOR = 'ADMINISTRATOR',\n  /** User role with specific capabilities */\n  AUTHOR = 'AUTHOR',\n  /** User role with specific capabilities */\n  CONTRIBUTOR = 'CONTRIBUTOR',\n  /** User role with specific capabilities */\n  CUSTOMER = 'CUSTOMER',\n  /** User role with specific capabilities */\n  EDITOR = 'EDITOR',\n  /** User role with specific capabilities */\n  SHOP_MANAGER = 'SHOP_MANAGER',\n  /** User role with specific capabilities */\n  SUBSCRIBER = 'SUBSCRIBER'\n}\n\n/** Arguments for filtering the UserToCommentConnection connection */\nexport type UserToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Arguments for filtering the UserToMediaItemConnection connection */\nexport type UserToMediaItemConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the UserToPageConnection connection */\nexport type UserToPageConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the UserToPostConnection connection */\nexport type UserToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the UserToRevisionsConnection connection */\nexport type UserToRevisionsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Field to order the connection by */\nexport enum UsersConnectionOrderbyEnum {\n  /** Order by display name */\n  DISPLAY_NAME = 'DISPLAY_NAME',\n  /** Order by email address */\n  EMAIL = 'EMAIL',\n  /** Order by login */\n  LOGIN = 'LOGIN',\n  /** Preserve the login order given in the LOGIN_IN array */\n  LOGIN_IN = 'LOGIN_IN',\n  /** Order by nice name */\n  NICE_NAME = 'NICE_NAME',\n  /** Preserve the nice name order given in the NICE_NAME_IN array */\n  NICE_NAME_IN = 'NICE_NAME_IN',\n  /** Order by registration date */\n  REGISTERED = 'REGISTERED',\n  /** Order by URL */\n  URL = 'URL'\n}\n\n/** Options for ordering the connection */\nexport type UsersConnectionOrderbyInput = {\n  /** The field name used to sort the results. */\n  field: UsersConnectionOrderbyEnum;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n};\n\n/** Column used for searching for users. */\nexport enum UsersConnectionSearchColumnEnum {\n  /** The user's email address. */\n  EMAIL = 'EMAIL',\n  /** The globally unique ID. */\n  ID = 'ID',\n  /** The username the User uses to login with. */\n  LOGIN = 'LOGIN',\n  /** A URL-friendly name for the user. The default is the user's username. */\n  NICENAME = 'NICENAME',\n  /** The URL of the user's website. */\n  URL = 'URL'\n}\n\n/** Arguments for filtering the VariableProductToProductUnionConnection connection */\nexport type VariableProductToProductUnionConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum VisibleProductIdType {\n  /** The Database ID for the node */\n  DATABASE_ID = 'DATABASE_ID',\n  /** The hashed Global ID */\n  ID = 'ID',\n  /** The name of the node */\n  NAME = 'NAME',\n  /** Url friendly name of the node */\n  SLUG = 'SLUG',\n  /** The URI for the node */\n  URI = 'URI'\n}\n\n/** Arguments for filtering the VisibleProductToContentNodeConnection connection */\nexport type VisibleProductToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfVisibleProductEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What parameter to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Arguments for filtering the VisibleProductToProductConnection connection */\nexport type VisibleProductToProductConnectionWhereArgs = {\n  /** Limit result set to products with a specific global product attribute */\n  attribute?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with a specific global product attribute term ID (required an assigned attribute). */\n  attributeTerm?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with selected global attribute queries. */\n  attributes?: InputMaybe<ProductAttributeQueryInput>;\n  /** Limit result set to products assigned a specific category name. */\n  category?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific category name. */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of category IDs. */\n  categoryIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of category IDs. */\n  categoryIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a group of specific categories by name. */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a group of specific categories by name. */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Filter the connection based on dates. */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** Ensure result set excludes specific IDs. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to featured products. */\n  featured?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to specific ids. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Include variations in the result set. */\n  includeVariations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products based on a maximum price. */\n  maxPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products based on a minimum price. */\n  minPrice?: InputMaybe<Scalars['Float']['input']>;\n  /** Limit result set to products on sale. */\n  onSale?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<ProductsOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Specify objects whose parent is in an array. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Specify objects whose parent is not in an array. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products with a specific average rating. Must be between 1 and 5 */\n  rating?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific shipping class ID. */\n  shippingClassId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products with specific SKU(s). Use commas to separate. */\n  sku?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products with specific slugs. */\n  slugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products assigned a specific status. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products in stock or out of stock. */\n  stockStatus?: InputMaybe<Array<InputMaybe<StockStatusEnum>>>;\n  /** Limit result types to types supported by WooGraphQL. */\n  supportedTypesOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Limit result set to products assigned a specific tag name. */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Limit result set to products assigned a specific tag ID. */\n  tagId?: InputMaybe<Scalars['Int']['input']>;\n  /** Limit result set to products assigned to a specific group of tag IDs. */\n  tagIdIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tag IDs. */\n  tagIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Limit result set to products assigned to a specific group of tags by name. */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set to products not assigned to a specific group of tags by name. */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Limit result set with complex set of taxonomy filters. */\n  taxonomyFilter?: InputMaybe<ProductTaxonomyInput>;\n  /** Limit result set to products assigned a specific type. */\n  type?: InputMaybe<ProductTypesEnum>;\n  /** Limit result set to products assigned to a group of specific types. */\n  typeIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products not assigned to a group of specific types. */\n  typeNotIn?: InputMaybe<Array<InputMaybe<ProductTypesEnum>>>;\n  /** Limit result set to products with a specific visibility level. */\n  visibility?: InputMaybe<CatalogVisibilityEnum>;\n};\n\n/** WooCommerce setting input. */\nexport type WcSettingInput = {\n  /** A unique identifier for the setting. */\n  id?: InputMaybe<Scalars['String']['input']>;\n  /** Setting value. */\n  value?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Type of WC setting. */\nexport enum WcSettingTypeEnum {\n  CHECKBOX = 'CHECKBOX',\n  COLOR = 'COLOR',\n  EMAIL = 'EMAIL',\n  IMAGE_WIDTH = 'IMAGE_WIDTH',\n  MULTI_SELECT = 'MULTI_SELECT',\n  NUMBER = 'NUMBER',\n  PASSWORD = 'PASSWORD',\n  RADIO = 'RADIO',\n  SELECT = 'SELECT',\n  TEXT = 'TEXT',\n  TEXTAREA = 'TEXTAREA'\n}\n\n/** Input for the writeReview mutation. */\nexport type WriteReviewInput = {\n  /** The approval status of the comment. */\n  approved?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the comment's author. */\n  author?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the comment's author. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The url of the comment's author. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The database ID of the post object the comment belongs to. */\n  commentOn?: InputMaybe<Scalars['Int']['input']>;\n  /** Content of the comment. */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** Parent comment ID of current comment. */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Product rating */\n  rating: Scalars['Int']['input'];\n  /** The approval status of the comment */\n  status?: InputMaybe<CommentStatusEnum>;\n};\n\nexport type AddToCartMutationVariables = Exact<{\n  input: AddToCartInput;\n}>;\n\n\nexport type AddToCartMutation = { addToCart?: { cart?: { total?: string | null, subtotal?: string | null, totalTax?: string | null, discountTotal?: string | null, shippingTotal?: string | null, chosenShippingMethods?: Array<string | null> | null, isEmpty?: boolean | null, rawTotal?: string | null, rawDiscountTotal?: string | null, availableShippingMethods?: Array<{ rates?: Array<{ cost?: string | null, id: string, label?: string | null } | null> | null } | null> | null, appliedCoupons?: Array<{ description?: string | null, discountTax: string, discountAmount: string, code: string } | null> | null, contents?: { itemCount?: number | null, productCount?: number | null, nodes: Array<{ quantity?: number | null, key: string, product?: { node: { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } } | null, variation?: { node: { name?: string | null, slug?: string | null, price?: string | null, stockStatus?: StockStatusEnum | null, regularPrice?: string | null, salePrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, cartSourceUrl?: string | null } | null } } | null }> } | null } | null } | null };\n\nexport type ApplyCouponMutationVariables = Exact<{\n  code: Scalars['String']['input'];\n}>;\n\n\nexport type ApplyCouponMutation = { applyCoupon?: { applied?: { code: string, description?: string | null, discountTax: string, discountAmount: string } | null, cart?: { total?: string | null, subtotal?: string | null, totalTax?: string | null, discountTotal?: string | null, shippingTotal?: string | null, chosenShippingMethods?: Array<string | null> | null, isEmpty?: boolean | null, rawTotal?: string | null, rawDiscountTotal?: string | null, availableShippingMethods?: Array<{ rates?: Array<{ cost?: string | null, id: string, label?: string | null } | null> | null } | null> | null, appliedCoupons?: Array<{ description?: string | null, discountTax: string, discountAmount: string, code: string } | null> | null, contents?: { itemCount?: number | null, productCount?: number | null, nodes: Array<{ quantity?: number | null, key: string, product?: { node: { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } } | null, variation?: { node: { name?: string | null, slug?: string | null, price?: string | null, stockStatus?: StockStatusEnum | null, regularPrice?: string | null, salePrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, cartSourceUrl?: string | null } | null } } | null }> } | null } | null } | null };\n\nexport type ChangeShippingCountyMutationVariables = Exact<{\n  shippingState: Scalars['String']['input'];\n  shippingCountry: CountriesEnum;\n  billingState: Scalars['String']['input'];\n  billingCountry: CountriesEnum;\n}>;\n\n\nexport type ChangeShippingCountyMutation = { updateCustomer?: { customer?: { calculatedShipping?: boolean | null, hasCalculatedShipping?: boolean | null } | null } | null };\n\nexport type ChangeShippingMethodMutationVariables = Exact<{\n  shippingMethods?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;\n}>;\n\n\nexport type ChangeShippingMethodMutation = { updateShippingMethod?: { cart?: { total?: string | null, subtotal?: string | null, totalTax?: string | null, discountTotal?: string | null, shippingTotal?: string | null, chosenShippingMethods?: Array<string | null> | null, isEmpty?: boolean | null, rawTotal?: string | null, rawDiscountTotal?: string | null, availableShippingMethods?: Array<{ rates?: Array<{ cost?: string | null, id: string, label?: string | null } | null> | null } | null> | null, appliedCoupons?: Array<{ description?: string | null, discountTax: string, discountAmount: string, code: string } | null> | null, contents?: { itemCount?: number | null, productCount?: number | null, nodes: Array<{ quantity?: number | null, key: string, product?: { node: { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } } | null, variation?: { node: { name?: string | null, slug?: string | null, price?: string | null, stockStatus?: StockStatusEnum | null, regularPrice?: string | null, salePrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, cartSourceUrl?: string | null } | null } } | null }> } | null } | null } | null };\n\nexport type CheckoutMutationVariables = Exact<{\n  billing?: InputMaybe<CustomerAddressInput>;\n  metaData?: InputMaybe<Array<InputMaybe<MetaDataInput>> | InputMaybe<MetaDataInput>>;\n  paymentMethod?: InputMaybe<Scalars['String']['input']>;\n  shipping?: InputMaybe<CustomerAddressInput>;\n  customerNote?: InputMaybe<Scalars['String']['input']>;\n  shipToDifferentAddress?: InputMaybe<Scalars['Boolean']['input']>;\n  account?: InputMaybe<CreateAccountInput>;\n  transactionId?: InputMaybe<Scalars['String']['input']>;\n  isPaid?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type CheckoutMutation = { checkout?: { result?: string | null, redirect?: string | null, order?: { needsPayment?: boolean | null, needsProcessing?: boolean | null, status?: OrderStatusEnum | null, databaseId?: number | null, orderKey?: string | null, subtotal?: string | null, total?: string | null, totalTax?: string | null, shippingTotal?: string | null, paymentMethodTitle?: string | null, paymentMethod?: string | null, date?: string | null, customer?: { email?: string | null } | null, lineItems?: { nodes: Array<{ quantity?: number | null, total?: string | null, product?: { node: { name?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } } | null, variation?: { node: { name?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } } | null }> } | null } | null } | null };\n\nexport type EmptyCartMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type EmptyCartMutation = { emptyCart?: { cart?: { total?: string | null, subtotal?: string | null, totalTax?: string | null, discountTotal?: string | null, shippingTotal?: string | null, chosenShippingMethods?: Array<string | null> | null, isEmpty?: boolean | null, rawTotal?: string | null, rawDiscountTotal?: string | null, availableShippingMethods?: Array<{ rates?: Array<{ cost?: string | null, id: string, label?: string | null } | null> | null } | null> | null, appliedCoupons?: Array<{ description?: string | null, discountTax: string, discountAmount: string, code: string } | null> | null, contents?: { itemCount?: number | null, productCount?: number | null, nodes: Array<{ quantity?: number | null, key: string, product?: { node: { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } } | null, variation?: { node: { name?: string | null, slug?: string | null, price?: string | null, stockStatus?: StockStatusEnum | null, regularPrice?: string | null, salePrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, cartSourceUrl?: string | null } | null } } | null }> } | null } | null } | null };\n\nexport type CartFragmentFragment = { total?: string | null, subtotal?: string | null, totalTax?: string | null, discountTotal?: string | null, shippingTotal?: string | null, chosenShippingMethods?: Array<string | null> | null, isEmpty?: boolean | null, rawTotal?: string | null, rawDiscountTotal?: string | null, availableShippingMethods?: Array<{ rates?: Array<{ cost?: string | null, id: string, label?: string | null } | null> | null } | null> | null, appliedCoupons?: Array<{ description?: string | null, discountTax: string, discountAmount: string, code: string } | null> | null, contents?: { itemCount?: number | null, productCount?: number | null, nodes: Array<{ quantity?: number | null, key: string, product?: { node: { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } } | null, variation?: { node: { name?: string | null, slug?: string | null, price?: string | null, stockStatus?: StockStatusEnum | null, regularPrice?: string | null, salePrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, cartSourceUrl?: string | null } | null } } | null }> } | null };\n\nexport type CustomerFragmentFragment = { lastName?: string | null, email?: string | null, firstName?: string | null, username?: string | null, databaseId?: number | null, sessionToken?: string | null, isPayingCustomer?: boolean | null, billing?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null, shipping?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null };\n\nexport type AddressFragment = { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null };\n\nexport type DownloadableItemFragment = { id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null };\n\nexport type OrderFragmentFragment = { orderNumber?: string | null, date?: string | null, status?: OrderStatusEnum | null, needsPayment?: boolean | null, needsProcessing?: boolean | null, databaseId?: number | null, orderKey?: string | null, total?: string | null, subtotal?: string | null, discountTotal?: string | null, totalTax?: string | null, shippingTotal?: string | null, paymentMethodTitle?: string | null, paymentMethod?: string | null, rawDiscountTotal?: string | null, customer?: { email?: string | null, lastName?: string | null, firstName?: string | null, username?: string | null, databaseId?: number | null, sessionToken?: string | null, isPayingCustomer?: boolean | null, downloadableItems?: { nodes: Array<{ id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null }> } | null, billing?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null, shipping?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null } | null, downloadableItems?: { nodes: Array<{ id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null }> } | null, lineItems?: { nodes: Array<{ quantity?: number | null, total?: string | null, id: string, product?: { node: { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } } | null, variation?: { node: { name?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } } | null }> } | null };\n\ntype ProductCategories_ExternalProduct_Fragment = { productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null };\n\ntype ProductCategories_GroupProduct_Fragment = { productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null };\n\ntype ProductCategories_SimpleProduct_Fragment = { productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null };\n\ntype ProductCategories_VariableProduct_Fragment = { productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null };\n\nexport type ProductCategoriesFragment = ProductCategories_ExternalProduct_Fragment | ProductCategories_GroupProduct_Fragment | ProductCategories_SimpleProduct_Fragment | ProductCategories_VariableProduct_Fragment;\n\nexport type SimpleProductFragment = { price?: string | null, slug?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null };\n\ntype Terms_ExternalProduct_Fragment = { terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null };\n\ntype Terms_GroupProduct_Fragment = { terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null };\n\ntype Terms_SimpleProduct_Fragment = { terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null };\n\ntype Terms_VariableProduct_Fragment = { terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null };\n\nexport type TermsFragment = Terms_ExternalProduct_Fragment | Terms_GroupProduct_Fragment | Terms_SimpleProduct_Fragment | Terms_VariableProduct_Fragment;\n\nexport type VariableProductFragment = { price?: string | null, slug?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null };\n\nexport type GetAllTermsQueryVariables = Exact<{\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  taxonomies: Array<InputMaybe<TaxonomyEnum>> | InputMaybe<TaxonomyEnum>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GetAllTermsQuery = { terms?: { nodes: Array<{ name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null } | { name?: string | null, slug?: string | null, count?: number | null }> } | null };\n\nexport type GetCartQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCartQuery = { cart?: { total?: string | null, subtotal?: string | null, totalTax?: string | null, discountTotal?: string | null, shippingTotal?: string | null, chosenShippingMethods?: Array<string | null> | null, isEmpty?: boolean | null, rawTotal?: string | null, rawDiscountTotal?: string | null, availableShippingMethods?: Array<{ rates?: Array<{ cost?: string | null, id: string, label?: string | null } | null> | null } | null> | null, appliedCoupons?: Array<{ description?: string | null, discountTax: string, discountAmount: string, code: string } | null> | null, contents?: { itemCount?: number | null, productCount?: number | null, nodes: Array<{ quantity?: number | null, key: string, product?: { node: { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } } | null, variation?: { node: { name?: string | null, slug?: string | null, price?: string | null, stockStatus?: StockStatusEnum | null, regularPrice?: string | null, salePrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, cartSourceUrl?: string | null } | null } } | null }> } | null } | null, customer?: { lastName?: string | null, email?: string | null, firstName?: string | null, username?: string | null, databaseId?: number | null, sessionToken?: string | null, isPayingCustomer?: boolean | null, billing?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null, shipping?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null } | null, viewer?: { lastName?: string | null, email?: string | null, databaseId: number, id: string, firstName?: string | null, username?: string | null, nicename?: string | null, wooSessionToken?: string | null, avatar?: { url?: string | null } | null } | null, paymentGateways?: { nodes: Array<{ title?: string | null, id: string, description?: string | null }> } | null };\n\nexport type GetDownloadsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetDownloadsQuery = { customer?: { downloadableItems?: { nodes: Array<{ id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null }> } | null } | null };\n\nexport type GetOrderQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type GetOrderQuery = { order?: { orderNumber?: string | null, date?: string | null, status?: OrderStatusEnum | null, needsPayment?: boolean | null, needsProcessing?: boolean | null, databaseId?: number | null, orderKey?: string | null, total?: string | null, subtotal?: string | null, discountTotal?: string | null, totalTax?: string | null, shippingTotal?: string | null, paymentMethodTitle?: string | null, paymentMethod?: string | null, rawDiscountTotal?: string | null, customer?: { email?: string | null, lastName?: string | null, firstName?: string | null, username?: string | null, databaseId?: number | null, sessionToken?: string | null, isPayingCustomer?: boolean | null, downloadableItems?: { nodes: Array<{ id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null }> } | null, billing?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null, shipping?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null } | null, downloadableItems?: { nodes: Array<{ id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null }> } | null, lineItems?: { nodes: Array<{ quantity?: number | null, total?: string | null, id: string, product?: { node: { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } } | null, variation?: { node: { name?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } } | null }> } | null } | null };\n\nexport type GetOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetOrdersQuery = { customer?: { orders?: { nodes: Array<{ orderNumber?: string | null, date?: string | null, status?: OrderStatusEnum | null, needsPayment?: boolean | null, needsProcessing?: boolean | null, databaseId?: number | null, orderKey?: string | null, total?: string | null, subtotal?: string | null, discountTotal?: string | null, totalTax?: string | null, shippingTotal?: string | null, paymentMethodTitle?: string | null, paymentMethod?: string | null, rawDiscountTotal?: string | null, customer?: { email?: string | null, lastName?: string | null, firstName?: string | null, username?: string | null, databaseId?: number | null, sessionToken?: string | null, isPayingCustomer?: boolean | null, downloadableItems?: { nodes: Array<{ id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null }> } | null, billing?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null, shipping?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null } | null, downloadableItems?: { nodes: Array<{ id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null }> } | null, lineItems?: { nodes: Array<{ quantity?: number | null, total?: string | null, id: string, product?: { node: { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } | { name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } } | null, variation?: { node: { name?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null } } | null }> } | null }> } | null } | null };\n\nexport type GetProductQueryVariables = Exact<{\n  slug: Scalars['ID']['input'];\n}>;\n\n\nexport type GetProductQuery = { product?: { name?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, slug?: string | null, sku?: string | null, description?: string | null, shortDescription?: string | null, rawDescription?: string | null, metaData?: Array<{ id?: string | null, key: string, value?: string | null } | null> | null, attributes?: { nodes: Array<{ slug?: string | null, variation?: boolean | null, name?: string | null, id: string, options?: Array<string | null> | null, label?: string | null, scope: ProductAttributeTypesEnum, terms?: { nodes: Array<{ name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number }> } | null } | { variation?: boolean | null, name?: string | null, id: string, options?: Array<string | null> | null, label?: string | null, scope: ProductAttributeTypesEnum }> } | null, productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null, related?: { nodes: Array<{ name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null }> } | null, reviews?: { averageRating?: number | null, edges: Array<{ rating?: number | null, node: { content?: string | null, id: string, date?: string | null, author?: { node: { name?: string | null, avatar?: { url?: string | null } | null } | { name?: string | null, avatar?: { url?: string | null } | null } } | null } }> } | null, terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null } | { name?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, slug?: string | null, sku?: string | null, description?: string | null, shortDescription?: string | null, rawDescription?: string | null, metaData?: Array<{ id?: string | null, key: string, value?: string | null } | null> | null, attributes?: { nodes: Array<{ slug?: string | null, variation?: boolean | null, name?: string | null, id: string, options?: Array<string | null> | null, label?: string | null, scope: ProductAttributeTypesEnum, terms?: { nodes: Array<{ name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number }> } | null } | { variation?: boolean | null, name?: string | null, id: string, options?: Array<string | null> | null, label?: string | null, scope: ProductAttributeTypesEnum }> } | null, productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null, related?: { nodes: Array<{ name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null }> } | null, reviews?: { averageRating?: number | null, edges: Array<{ rating?: number | null, node: { content?: string | null, id: string, date?: string | null, author?: { node: { name?: string | null, avatar?: { url?: string | null } | null } | { name?: string | null, avatar?: { url?: string | null } | null } } | null } }> } | null, terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null } | { name?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, slug?: string | null, sku?: string | null, description?: string | null, shortDescription?: string | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawDescription?: string | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, metaData?: Array<{ id?: string | null, key: string, value?: string | null } | null> | null, attributes?: { nodes: Array<{ slug?: string | null, variation?: boolean | null, name?: string | null, id: string, options?: Array<string | null> | null, label?: string | null, scope: ProductAttributeTypesEnum, terms?: { nodes: Array<{ name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number }> } | null } | { variation?: boolean | null, name?: string | null, id: string, options?: Array<string | null> | null, label?: string | null, scope: ProductAttributeTypesEnum }> } | null, productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null, related?: { nodes: Array<{ name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null }> } | null, reviews?: { averageRating?: number | null, edges: Array<{ rating?: number | null, node: { content?: string | null, id: string, date?: string | null, author?: { node: { name?: string | null, avatar?: { url?: string | null } | null } | { name?: string | null, avatar?: { url?: string | null } | null } } | null } }> } | null, terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, slug?: string | null, sku?: string | null, description?: string | null, shortDescription?: string | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawDescription?: string | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, metaData?: Array<{ id?: string | null, key: string, value?: string | null } | null> | null, attributes?: { nodes: Array<{ slug?: string | null, variation?: boolean | null, name?: string | null, id: string, options?: Array<string | null> | null, label?: string | null, scope: ProductAttributeTypesEnum, terms?: { nodes: Array<{ name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number } | { name?: string | null, slug?: string | null, taxonomyName?: string | null, databaseId: number }> } | null } | { variation?: boolean | null, name?: string | null, id: string, options?: Array<string | null> | null, label?: string | null, scope: ProductAttributeTypesEnum }> } | null, productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null, related?: { nodes: Array<{ name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null }> } | null, reviews?: { averageRating?: number | null, edges: Array<{ rating?: number | null, node: { content?: string | null, id: string, date?: string | null, author?: { node: { name?: string | null, avatar?: { url?: string | null } | null } | { name?: string | null, avatar?: { url?: string | null } | null } } | null } }> } | null, terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } | null };\n\nexport type GetProductCategoriesQueryVariables = Exact<{\n  first?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GetProductCategoriesQuery = { productCategories?: { nodes: Array<{ count?: number | null, databaseId: number, id: string, name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null }> } | null };\n\nexport type ProductCategoryFragment = { count?: number | null, databaseId: number, id: string, name?: string | null, slug?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null } | null };\n\nexport type GetProductsQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  orderby?: InputMaybe<ProductsOrderByEnum>;\n}>;\n\n\nexport type GetProductsQuery = { products?: { pageInfo: { hasNextPage: boolean, endCursor?: string | null }, nodes: Array<{ name?: string | null, slug?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, averageRating?: number | null, reviewCount?: number | null, terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null, productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null } | { name?: string | null, slug?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, averageRating?: number | null, reviewCount?: number | null, terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null, productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null } | { name?: string | null, slug?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, averageRating?: number | null, reviewCount?: number | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null, productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, averageRating?: number | null, reviewCount?: number | null } | { name?: string | null, slug?: string | null, type?: ProductTypesEnum | null, databaseId: number, id: string, averageRating?: number | null, reviewCount?: number | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, terms?: { nodes: Array<{ taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null } | { taxonomyName?: string | null, slug?: string | null }> } | null, productCategories?: { nodes: Array<{ databaseId: number, slug?: string | null, name?: string | null, count?: number | null }> } | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null }> } | null };\n\nexport type GetStatesQueryVariables = Exact<{\n  country?: InputMaybe<CountriesEnum>;\n}>;\n\n\nexport type GetStatesQuery = { allowedCountries?: Array<CountriesEnum | null> | null, countryStates?: Array<{ code: string, name: string } | null> | null };\n\nexport type GetStockStatusQueryVariables = Exact<{\n  slug: Scalars['ID']['input'];\n}>;\n\n\nexport type GetStockStatusQuery = { product?: { stockStatus?: StockStatusEnum | null } | { stockStatus?: StockStatusEnum | null, variations?: { nodes: Array<{ stockStatus?: StockStatusEnum | null }> } | null } | {} | null };\n\nexport type GetStripePaymentIntentQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetStripePaymentIntentQuery = { stripePaymentIntent?: { amount?: number | null, clientSecret?: string | null, error?: string | null, id?: string | null, currency?: string | null } | null };\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n}>;\n\n\nexport type LoginMutation = { loginWithCookies?: { status?: string | null } | null };\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = { logout?: { status?: string | null } | null };\n\nexport type RegisterCustomerMutationVariables = Exact<{\n  input: RegisterCustomerInput;\n}>;\n\n\nexport type RegisterCustomerMutation = { registerCustomer?: { customer?: { lastName?: string | null, email?: string | null, firstName?: string | null, username?: string | null, databaseId?: number | null, sessionToken?: string | null, isPayingCustomer?: boolean | null, billing?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null, shipping?: { address1?: string | null, address2?: string | null, city?: string | null, country?: CountriesEnum | null, email?: string | null, firstName?: string | null, lastName?: string | null, phone?: string | null, postcode?: string | null, company?: string | null, state?: string | null } | null } | null } | null };\n\nexport type RemoveCouponsMutationVariables = Exact<{\n  codes: Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type RemoveCouponsMutation = { removeCoupons?: { cart?: { total?: string | null, subtotal?: string | null, totalTax?: string | null, discountTotal?: string | null, shippingTotal?: string | null, chosenShippingMethods?: Array<string | null> | null, isEmpty?: boolean | null, rawTotal?: string | null, rawDiscountTotal?: string | null, availableShippingMethods?: Array<{ rates?: Array<{ cost?: string | null, id: string, label?: string | null } | null> | null } | null> | null, appliedCoupons?: Array<{ description?: string | null, discountTax: string, discountAmount: string, code: string } | null> | null, contents?: { itemCount?: number | null, productCount?: number | null, nodes: Array<{ quantity?: number | null, key: string, product?: { node: { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } } | null, variation?: { node: { name?: string | null, slug?: string | null, price?: string | null, stockStatus?: StockStatusEnum | null, regularPrice?: string | null, salePrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, cartSourceUrl?: string | null } | null } } | null }> } | null } | null } | null };\n\nexport type ResetPasswordEmailMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n}>;\n\n\nexport type ResetPasswordEmailMutation = { sendPasswordResetEmail?: { success?: boolean | null } | null };\n\nexport type ResetPasswordKeyMutationVariables = Exact<{\n  key: Scalars['String']['input'];\n  login: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n}>;\n\n\nexport type ResetPasswordKeyMutation = { resetUserPassword?: { user?: { id: string } | null } | null };\n\nexport type UpDateCartQuantityMutationVariables = Exact<{\n  key: Scalars['ID']['input'];\n  quantity: Scalars['Int']['input'];\n}>;\n\n\nexport type UpDateCartQuantityMutation = { updateItemQuantities?: { cart?: { total?: string | null, subtotal?: string | null, totalTax?: string | null, discountTotal?: string | null, shippingTotal?: string | null, chosenShippingMethods?: Array<string | null> | null, isEmpty?: boolean | null, rawTotal?: string | null, rawDiscountTotal?: string | null, availableShippingMethods?: Array<{ rates?: Array<{ cost?: string | null, id: string, label?: string | null } | null> | null } | null> | null, appliedCoupons?: Array<{ description?: string | null, discountTax: string, discountAmount: string, code: string } | null> | null, contents?: { itemCount?: number | null, productCount?: number | null, nodes: Array<{ quantity?: number | null, key: string, product?: { node: { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, stockQuantity?: number | null, lowStockAmount?: number | null, averageRating?: number | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, reviewCount?: number | null, onSale?: boolean | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, altText?: string | null, title?: string | null }> } | null } | { name?: string | null, slug?: string | null, sku?: string | null, databaseId: number, type?: ProductTypesEnum | null, price?: string | null, date?: string | null, weight?: string | null, length?: string | null, width?: string | null, height?: string | null, averageRating?: number | null, reviewCount?: number | null, onSale?: boolean | null, regularPrice?: string | null, salePrice?: string | null, stockStatus?: StockStatusEnum | null, totalSales?: number | null, stockQuantity?: number | null, lowStockAmount?: number | null, rawPrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, databaseId: number, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, defaultAttributes?: { nodes: Array<{ name?: string | null, attributeId?: number | null, value?: string | null, label?: string | null }> } | null, variations?: { nodes: Array<{ name?: string | null, databaseId: number, price?: string | null, regularPrice?: string | null, salePrice?: string | null, slug?: string | null, stockQuantity?: number | null, stockStatus?: StockStatusEnum | null, hasAttributes?: boolean | null, image?: { sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null, id: string, cartSourceUrl?: string | null, producCardSourceUrl?: string | null } | null, attributes?: { nodes: Array<{ value?: string | null, name?: string | null }> } | null }> } | null, galleryImages?: { nodes: Array<{ sourceUrl?: string | null, databaseId: number, altText?: string | null, title?: string | null }> } | null } } | null, variation?: { node: { name?: string | null, slug?: string | null, price?: string | null, stockStatus?: StockStatusEnum | null, regularPrice?: string | null, salePrice?: string | null, rawRegularPrice?: string | null, rawSalePrice?: string | null, image?: { sourceUrl?: string | null, altText?: string | null, title?: string | null, cartSourceUrl?: string | null } | null } } | null }> } | null } | null } | null };\n\nexport type UpdateCustomerMutationVariables = Exact<{\n  input: UpdateCustomerInput;\n}>;\n\n\nexport type UpdateCustomerMutation = { updateCustomer?: { customer?: { downloadableItems?: { nodes: Array<{ id: string, name?: string | null, url?: string | null, accessExpires?: string | null, downloadsRemaining?: number | null, product?: { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | { name?: string | null, slug?: string | null } | null }> } | null } | null } | null };\n\nexport type UpdatePasswordMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  password: Scalars['String']['input'];\n}>;\n\n\nexport type UpdatePasswordMutation = { updateUser?: { user?: { id: string } | null } | null };\n\nexport type WriteReviewMutationVariables = Exact<{\n  author: Scalars['String']['input'];\n  commentOn: Scalars['Int']['input'];\n  content: Scalars['String']['input'];\n  rating: Scalars['Int']['input'];\n  authorEmail: Scalars['String']['input'];\n}>;\n\n\nexport type WriteReviewMutation = { writeReview?: { rating?: number | null } | null };\n\nexport const SimpleProductFragmentDoc = gql`\n    fragment SimpleProduct on SimpleProduct {\n  price\n  rawPrice: price(format: RAW)\n  slug\n  date\n  regularPrice\n  rawRegularPrice: regularPrice(format: RAW)\n  salePrice\n  rawSalePrice: salePrice(format: RAW)\n  stockStatus\n  stockQuantity\n  lowStockAmount\n  averageRating\n  weight\n  length\n  width\n  height\n  reviewCount\n  onSale\n  image {\n    sourceUrl\n    cartSourceUrl: sourceUrl(size: THUMBNAIL)\n    producCardSourceUrl: sourceUrl(size: WOOCOMMERCE_THUMBNAIL)\n    databaseId\n    altText\n    title\n  }\n  galleryImages(first: 20) {\n    nodes {\n      sourceUrl\n      altText\n      title\n    }\n  }\n}\n    `;\nexport const VariableProductFragmentDoc = gql`\n    fragment VariableProduct on VariableProduct {\n  price\n  rawPrice: price(format: RAW)\n  slug\n  date\n  weight\n  length\n  width\n  height\n  image {\n    sourceUrl\n    cartSourceUrl: sourceUrl(size: THUMBNAIL)\n    producCardSourceUrl: sourceUrl(size: WOOCOMMERCE_THUMBNAIL)\n    altText\n    title\n    databaseId\n  }\n  averageRating\n  reviewCount\n  onSale\n  regularPrice\n  rawRegularPrice: regularPrice(format: RAW)\n  salePrice\n  rawSalePrice: salePrice(format: RAW)\n  stockStatus\n  totalSales\n  stockQuantity\n  lowStockAmount\n  defaultAttributes {\n    nodes {\n      name\n      attributeId\n      value\n      label\n    }\n  }\n  variations(first: 100) {\n    nodes {\n      name\n      databaseId\n      price\n      regularPrice\n      salePrice\n      slug\n      stockQuantity\n      stockStatus\n      hasAttributes\n      image {\n        sourceUrl\n        cartSourceUrl: sourceUrl(size: THUMBNAIL)\n        producCardSourceUrl: sourceUrl(size: WOOCOMMERCE_THUMBNAIL)\n        databaseId\n        altText\n        title\n        id\n      }\n      attributes {\n        nodes {\n          value\n          name\n        }\n      }\n    }\n  }\n  galleryImages(first: 20) {\n    nodes {\n      sourceUrl\n      databaseId\n      altText\n      title\n    }\n  }\n}\n    `;\nexport const CartFragmentFragmentDoc = gql`\n    fragment CartFragment on Cart {\n  total\n  rawTotal: total(format: RAW)\n  subtotal\n  totalTax\n  discountTotal\n  rawDiscountTotal: discountTotal(format: RAW)\n  shippingTotal\n  chosenShippingMethods\n  availableShippingMethods {\n    rates {\n      cost\n      id\n      label\n    }\n  }\n  appliedCoupons {\n    description\n    discountTax\n    discountAmount\n    code\n  }\n  isEmpty\n  contents(first: 100) {\n    itemCount\n    productCount\n    nodes {\n      quantity\n      key\n      product {\n        node {\n          name\n          slug\n          sku\n          databaseId\n          type\n          ...SimpleProduct\n          ...VariableProduct\n        }\n      }\n      variation {\n        node {\n          name\n          slug\n          price\n          stockStatus\n          regularPrice\n          rawRegularPrice: regularPrice(format: RAW)\n          salePrice\n          rawSalePrice: salePrice(format: RAW)\n          image {\n            sourceUrl(size: THUMBNAIL)\n            cartSourceUrl: sourceUrl(size: THUMBNAIL)\n            altText\n            title\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport const DownloadableItemFragmentDoc = gql`\n    fragment DownloadableItem on DownloadableItem {\n  id\n  name\n  product {\n    name\n    slug\n  }\n  url\n  accessExpires\n  downloadsRemaining\n}\n    `;\nexport const AddressFragmentDoc = gql`\n    fragment Address on CustomerAddress {\n  address1\n  address2\n  city\n  country\n  email\n  firstName\n  lastName\n  phone\n  postcode\n  company\n  state\n}\n    `;\nexport const CustomerFragmentFragmentDoc = gql`\n    fragment CustomerFragment on Customer {\n  lastName\n  email\n  firstName\n  username\n  databaseId\n  sessionToken\n  isPayingCustomer\n  billing {\n    ...Address\n  }\n  shipping {\n    ...Address\n  }\n}\n    `;\nexport const OrderFragmentFragmentDoc = gql`\n    fragment OrderFragment on Order {\n  orderNumber\n  date\n  status\n  needsPayment\n  needsProcessing\n  databaseId\n  orderKey\n  total\n  subtotal\n  discountTotal\n  rawDiscountTotal: discountTotal(format: RAW)\n  totalTax\n  shippingTotal\n  paymentMethodTitle\n  paymentMethod\n  customer {\n    email\n    downloadableItems(first: 100) {\n      nodes {\n        ...DownloadableItem\n      }\n    }\n  }\n  downloadableItems(first: 100) {\n    nodes {\n      ...DownloadableItem\n    }\n  }\n  lineItems {\n    nodes {\n      quantity\n      total\n      id\n      product {\n        node {\n          name\n          slug\n          image {\n            sourceUrl(size: THUMBNAIL)\n            altText\n            title\n          }\n        }\n      }\n      variation {\n        node {\n          name\n          image {\n            sourceUrl(size: THUMBNAIL)\n            altText\n            title\n          }\n        }\n      }\n    }\n  }\n  customer {\n    ...CustomerFragment\n  }\n}\n    `;\nexport const ProductCategoriesFragmentDoc = gql`\n    fragment ProductCategories on Product {\n  productCategories {\n    nodes {\n      databaseId\n      slug\n      name\n      count\n    }\n  }\n}\n    `;\nexport const TermsFragmentDoc = gql`\n    fragment Terms on Product {\n  terms(first: 100) {\n    nodes {\n      taxonomyName\n      slug\n    }\n  }\n}\n    `;\nexport const ProductCategoryFragmentDoc = gql`\n    fragment ProductCategory on ProductCategory {\n  count\n  databaseId\n  id\n  name\n  slug\n  image {\n    sourceUrl(size: MEDIUM_LARGE)\n    altText\n    title\n  }\n}\n    `;\nexport const AddToCartDocument = gql`\n    mutation addToCart($input: AddToCartInput!) {\n  addToCart(input: $input) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n    ${CartFragmentFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}`;\nexport const ApplyCouponDocument = gql`\n    mutation applyCoupon($code: String!) {\n  applyCoupon(input: {code: $code}) {\n    applied {\n      code\n      description\n      discountTax\n      discountAmount\n    }\n    cart {\n      ...CartFragment\n    }\n  }\n}\n    ${CartFragmentFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}`;\nexport const ChangeShippingCountyDocument = gql`\n    mutation ChangeShippingCounty($shippingState: String!, $shippingCountry: CountriesEnum!, $billingState: String!, $billingCountry: CountriesEnum!) {\n  updateCustomer(\n    input: {shipping: {state: $shippingState, country: $shippingCountry}, billing: {state: $billingState, country: $billingCountry}}\n  ) {\n    customer {\n      calculatedShipping\n      hasCalculatedShipping\n    }\n  }\n}\n    `;\nexport const ChangeShippingMethodDocument = gql`\n    mutation ChangeShippingMethod($shippingMethods: [String] = \"\") {\n  updateShippingMethod(input: {shippingMethods: $shippingMethods}) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n    ${CartFragmentFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}`;\nexport const CheckoutDocument = gql`\n    mutation Checkout($billing: CustomerAddressInput = {}, $metaData: [MetaDataInput] = {key: \"\", value: \"\"}, $paymentMethod: String = \"stripe\", $shipping: CustomerAddressInput = {}, $customerNote: String = \"\", $shipToDifferentAddress: Boolean = false, $account: CreateAccountInput = {username: \"\", password: \"\"}, $transactionId: String = \"\", $isPaid: Boolean = false) {\n  checkout(\n    input: {paymentMethod: $paymentMethod, billing: $billing, metaData: $metaData, shipping: $shipping, customerNote: $customerNote, shipToDifferentAddress: $shipToDifferentAddress, account: $account, transactionId: $transactionId, isPaid: $isPaid}\n  ) {\n    result\n    redirect\n    order {\n      needsPayment\n      needsProcessing\n      status\n      databaseId\n      orderKey\n      subtotal\n      total\n      subtotal\n      totalTax\n      shippingTotal\n      paymentMethodTitle\n      paymentMethod\n      date\n      subtotal\n      customer {\n        email\n      }\n      lineItems {\n        nodes {\n          quantity\n          total\n          product {\n            node {\n              name\n              image {\n                sourceUrl\n                altText\n                title\n              }\n            }\n          }\n          variation {\n            node {\n              name\n              image {\n                sourceUrl\n                altText\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport const EmptyCartDocument = gql`\n    mutation EmptyCart {\n  emptyCart(input: {clearPersistentCart: true}) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n    ${CartFragmentFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}`;\nexport const GetAllTermsDocument = gql`\n    query getAllTerms($hideEmpty: Boolean = false, $taxonomies: [TaxonomyEnum]!, $first: Int = 100) {\n  terms(where: {taxonomies: $taxonomies, hideEmpty: $hideEmpty}, first: $first) {\n    nodes {\n      name\n      slug\n      count\n    }\n  }\n}\n    `;\nexport const GetCartDocument = gql`\n    query getCart {\n  cart {\n    ...CartFragment\n  }\n  customer {\n    ...CustomerFragment\n  }\n  viewer {\n    lastName\n    email\n    databaseId\n    id\n    firstName\n    username\n    nicename\n    wooSessionToken\n    avatar {\n      url\n    }\n  }\n  paymentGateways {\n    nodes {\n      title\n      id\n      description\n    }\n  }\n}\n    ${CartFragmentFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}\n${CustomerFragmentFragmentDoc}\n${AddressFragmentDoc}`;\nexport const GetDownloadsDocument = gql`\n    query getDownloads {\n  customer {\n    downloadableItems(first: 100) {\n      nodes {\n        ...DownloadableItem\n      }\n    }\n  }\n}\n    ${DownloadableItemFragmentDoc}`;\nexport const GetOrderDocument = gql`\n    query getOrder($id: ID!) {\n  order(id: $id, idType: DATABASE_ID) {\n    ...OrderFragment\n  }\n}\n    ${OrderFragmentFragmentDoc}\n${DownloadableItemFragmentDoc}\n${CustomerFragmentFragmentDoc}\n${AddressFragmentDoc}`;\nexport const GetOrdersDocument = gql`\n    query getOrders {\n  customer {\n    orders(first: 100) {\n      nodes {\n        ...OrderFragment\n      }\n    }\n  }\n}\n    ${OrderFragmentFragmentDoc}\n${DownloadableItemFragmentDoc}\n${CustomerFragmentFragmentDoc}\n${AddressFragmentDoc}`;\nexport const GetProductDocument = gql`\n    query getProduct($slug: ID!) {\n  product(id: $slug, idType: SLUG) {\n    name\n    type\n    databaseId\n    id\n    metaData {\n      id\n      key\n      value\n    }\n    slug\n    sku\n    description\n    rawDescription: description(format: RAW)\n    shortDescription\n    attributes {\n      nodes {\n        variation\n        name\n        id\n        options\n        label\n        scope\n        ... on GlobalProductAttribute {\n          slug\n          terms(where: {orderby: TERM_ORDER, order: ASC}) {\n            nodes {\n              name\n              slug\n              taxonomyName\n              databaseId\n            }\n          }\n        }\n      }\n    }\n    productCategories {\n      nodes {\n        databaseId\n        slug\n        name\n        count\n      }\n    }\n    ...Terms\n    ...SimpleProduct\n    ...VariableProduct\n    related(first: 5) {\n      nodes {\n        name\n        slug\n        ...SimpleProduct\n        ...VariableProduct\n      }\n    }\n    reviews {\n      averageRating\n      edges {\n        rating\n        node {\n          content\n          id\n          date\n          author {\n            node {\n              name\n              avatar {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    ${TermsFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}`;\nexport const GetProductCategoriesDocument = gql`\n    query getProductCategories($first: Int = 20) {\n  productCategories(\n    first: $first\n    where: {orderby: COUNT, order: DESC, hideEmpty: true}\n  ) {\n    nodes {\n      ...ProductCategory\n    }\n  }\n}\n    ${ProductCategoryFragmentDoc}`;\nexport const GetProductsDocument = gql`\n    query getProducts($after: String, $slug: [String], $first: Int = 9999, $orderby: ProductsOrderByEnum = DATE) {\n  products(\n    first: $first\n    after: $after\n    where: {categoryIn: $slug, typeNotIn: EXTERNAL, visibility: VISIBLE, minPrice: 0, orderby: {field: $orderby, order: DESC}, status: \"publish\"}\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      name\n      slug\n      type\n      databaseId\n      id\n      averageRating\n      reviewCount\n      ...Terms\n      ...ProductCategories\n      ...SimpleProduct\n      ...VariableProduct\n    }\n  }\n}\n    ${TermsFragmentDoc}\n${ProductCategoriesFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}`;\nexport const GetStatesDocument = gql`\n    query getStates($country: CountriesEnum = IE) {\n  countryStates(country: $country) {\n    code\n    name\n  }\n  allowedCountries\n}\n    `;\nexport const GetStockStatusDocument = gql`\n    query getStockStatus($slug: ID!) {\n  product(id: $slug, idType: SLUG) {\n    ... on SimpleProduct {\n      stockStatus\n    }\n    ... on VariableProduct {\n      stockStatus\n      variations {\n        nodes {\n          stockStatus\n        }\n      }\n    }\n  }\n}\n    `;\nexport const GetStripePaymentIntentDocument = gql`\n    query getStripePaymentIntent {\n  stripePaymentIntent {\n    amount\n    clientSecret\n    error\n    id\n    currency\n  }\n}\n    `;\nexport const LoginDocument = gql`\n    mutation login($username: String!, $password: String!) {\n  loginWithCookies(\n    input: {login: $username, password: $password, rememberMe: true}\n  ) {\n    status\n  }\n}\n    `;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout(input: {clientMutationId: \"\"}) {\n    status\n  }\n}\n    `;\nexport const RegisterCustomerDocument = gql`\n    mutation registerCustomer($input: RegisterCustomerInput!) {\n  registerCustomer(input: $input) {\n    customer {\n      ...CustomerFragment\n    }\n  }\n}\n    ${CustomerFragmentFragmentDoc}\n${AddressFragmentDoc}`;\nexport const RemoveCouponsDocument = gql`\n    mutation removeCoupons($codes: [String]!) {\n  removeCoupons(input: {codes: $codes}) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n    ${CartFragmentFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}`;\nexport const ResetPasswordEmailDocument = gql`\n    mutation ResetPasswordEmail($username: String!) {\n  sendPasswordResetEmail(input: {username: $username}) {\n    success\n  }\n}\n    `;\nexport const ResetPasswordKeyDocument = gql`\n    mutation ResetPasswordKey($key: String!, $login: String!, $password: String!) {\n  resetUserPassword(input: {key: $key, login: $login, password: $password}) {\n    user {\n      id\n    }\n  }\n}\n    `;\nexport const UpDateCartQuantityDocument = gql`\n    mutation UpDateCartQuantity($key: ID!, $quantity: Int!) {\n  updateItemQuantities(input: {items: {key: $key, quantity: $quantity}}) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n    ${CartFragmentFragmentDoc}\n${SimpleProductFragmentDoc}\n${VariableProductFragmentDoc}`;\nexport const UpdateCustomerDocument = gql`\n    mutation UpdateCustomer($input: UpdateCustomerInput!) {\n  updateCustomer(input: $input) {\n    customer {\n      downloadableItems(first: 100) {\n        nodes {\n          ...DownloadableItem\n        }\n      }\n    }\n  }\n}\n    ${DownloadableItemFragmentDoc}`;\nexport const UpdatePasswordDocument = gql`\n    mutation updatePassword($id: ID!, $password: String!) {\n  updateUser(input: {id: $id, password: $password}) {\n    user {\n      id\n    }\n  }\n}\n    `;\nexport const WriteReviewDocument = gql`\n    mutation WriteReview($author: String!, $commentOn: Int!, $content: String!, $rating: Int!, $authorEmail: String!) {\n  writeReview(\n    input: {rating: $rating, author: $author, content: $content, commentOn: $commentOn, authorEmail: $authorEmail}\n  ) {\n    rating\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    addToCart(variables: AddToCartMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddToCartMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddToCartMutation>(AddToCartDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'addToCart', 'mutation', variables);\n    },\n    applyCoupon(variables: ApplyCouponMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ApplyCouponMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ApplyCouponMutation>(ApplyCouponDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'applyCoupon', 'mutation', variables);\n    },\n    ChangeShippingCounty(variables: ChangeShippingCountyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ChangeShippingCountyMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ChangeShippingCountyMutation>(ChangeShippingCountyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ChangeShippingCounty', 'mutation', variables);\n    },\n    ChangeShippingMethod(variables?: ChangeShippingMethodMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ChangeShippingMethodMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ChangeShippingMethodMutation>(ChangeShippingMethodDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ChangeShippingMethod', 'mutation', variables);\n    },\n    Checkout(variables?: CheckoutMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CheckoutMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<CheckoutMutation>(CheckoutDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Checkout', 'mutation', variables);\n    },\n    EmptyCart(variables?: EmptyCartMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<EmptyCartMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<EmptyCartMutation>(EmptyCartDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'EmptyCart', 'mutation', variables);\n    },\n    getAllTerms(variables: GetAllTermsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetAllTermsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetAllTermsQuery>(GetAllTermsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAllTerms', 'query', variables);\n    },\n    getCart(variables?: GetCartQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetCartQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetCartQuery>(GetCartDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCart', 'query', variables);\n    },\n    getDownloads(variables?: GetDownloadsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetDownloadsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetDownloadsQuery>(GetDownloadsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getDownloads', 'query', variables);\n    },\n    getOrder(variables: GetOrderQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetOrderQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetOrderQuery>(GetOrderDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getOrder', 'query', variables);\n    },\n    getOrders(variables?: GetOrdersQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetOrdersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetOrdersQuery>(GetOrdersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getOrders', 'query', variables);\n    },\n    getProduct(variables: GetProductQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetProductQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetProductQuery>(GetProductDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getProduct', 'query', variables);\n    },\n    getProductCategories(variables?: GetProductCategoriesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetProductCategoriesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetProductCategoriesQuery>(GetProductCategoriesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getProductCategories', 'query', variables);\n    },\n    getProducts(variables?: GetProductsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetProductsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetProductsQuery>(GetProductsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getProducts', 'query', variables);\n    },\n    getStates(variables?: GetStatesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetStatesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetStatesQuery>(GetStatesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getStates', 'query', variables);\n    },\n    getStockStatus(variables: GetStockStatusQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetStockStatusQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetStockStatusQuery>(GetStockStatusDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getStockStatus', 'query', variables);\n    },\n    getStripePaymentIntent(variables?: GetStripePaymentIntentQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetStripePaymentIntentQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetStripePaymentIntentQuery>(GetStripePaymentIntentDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getStripePaymentIntent', 'query', variables);\n    },\n    login(variables: LoginMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<LoginMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<LoginMutation>(LoginDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'login', 'mutation', variables);\n    },\n    Logout(variables?: LogoutMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<LogoutMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<LogoutMutation>(LogoutDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Logout', 'mutation', variables);\n    },\n    registerCustomer(variables: RegisterCustomerMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RegisterCustomerMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RegisterCustomerMutation>(RegisterCustomerDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'registerCustomer', 'mutation', variables);\n    },\n    removeCoupons(variables: RemoveCouponsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RemoveCouponsMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RemoveCouponsMutation>(RemoveCouponsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'removeCoupons', 'mutation', variables);\n    },\n    ResetPasswordEmail(variables: ResetPasswordEmailMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ResetPasswordEmailMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ResetPasswordEmailMutation>(ResetPasswordEmailDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ResetPasswordEmail', 'mutation', variables);\n    },\n    ResetPasswordKey(variables: ResetPasswordKeyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ResetPasswordKeyMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ResetPasswordKeyMutation>(ResetPasswordKeyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ResetPasswordKey', 'mutation', variables);\n    },\n    UpDateCartQuantity(variables: UpDateCartQuantityMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpDateCartQuantityMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpDateCartQuantityMutation>(UpDateCartQuantityDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpDateCartQuantity', 'mutation', variables);\n    },\n    UpdateCustomer(variables: UpdateCustomerMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateCustomerMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateCustomerMutation>(UpdateCustomerDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateCustomer', 'mutation', variables);\n    },\n    updatePassword(variables: UpdatePasswordMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdatePasswordMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdatePasswordMutation>(UpdatePasswordDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'updatePassword', 'mutation', variables);\n    },\n    WriteReview(variables: WriteReviewMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<WriteReviewMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<WriteReviewMutation>(WriteReviewDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'WriteReview', 'mutation', variables);\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { useGql } from '#imports'\nimport { getSdk as defaultGqlSdk } from '#gql/default'\nexport const GqlSdks = {\n  default: defaultGqlSdk,\n}\nexport const GqClientOps = {\"default\":[\"addToCart\",\"applyCoupon\",\"ChangeShippingCounty\",\"ChangeShippingMethod\",\"Checkout\",\"EmptyCart\",\"CartFragment\",\"CustomerFragment\",\"Address\",\"DownloadableItem\",\"OrderFragment\",\"ProductCategories\",\"SimpleProduct\",\"Terms\",\"VariableProduct\",\"getAllTerms\",\"getCart\",\"getDownloads\",\"getOrder\",\"getOrders\",\"getProduct\",\"getProductCategories\",\"ProductCategory\",\"getProducts\",\"getStates\",\"getStockStatus\",\"getStripePaymentIntent\",\"login\",\"Logout\",\"registerCustomer\",\"removeCoupons\",\"ResetPasswordEmail\",\"ResetPasswordKey\",\"UpDateCartQuantity\",\"UpdateCustomer\",\"updatePassword\",\"WriteReview\"]}\nexport const GqlChangeShippingCounty = (...params) => useGql()('ChangeShippingCounty', ...params)\nexport const GqlChangeShippingMethod = (...params) => useGql()('ChangeShippingMethod', ...params)\nexport const GqlCheckout = (...params) => useGql()('Checkout', ...params)\nexport const GqlEmptyCart = (...params) => useGql()('EmptyCart', ...params)\nexport const GqlLogout = (...params) => useGql()('Logout', ...params)\nexport const GqlResetPasswordEmail = (...params) => useGql()('ResetPasswordEmail', ...params)\nexport const GqlResetPasswordKey = (...params) => useGql()('ResetPasswordKey', ...params)\nexport const GqlUpDateCartQuantity = (...params) => useGql()('UpDateCartQuantity', ...params)\nexport const GqlUpdateCustomer = (...params) => useGql()('UpdateCustomer', ...params)\nexport const GqlWriteReview = (...params) => useGql()('WriteReview', ...params)\nexport const GqlAddToCart = (...params) => useGql()('addToCart', ...params)\nexport const GqlApplyCoupon = (...params) => useGql()('applyCoupon', ...params)\nexport const GqlGetAllTerms = (...params) => useGql()('getAllTerms', ...params)\nexport const GqlGetCart = (...params) => useGql()('getCart', ...params)\nexport const GqlGetDownloads = (...params) => useGql()('getDownloads', ...params)\nexport const GqlGetOrder = (...params) => useGql()('getOrder', ...params)\nexport const GqlGetOrders = (...params) => useGql()('getOrders', ...params)\nexport const GqlGetProduct = (...params) => useGql()('getProduct', ...params)\nexport const GqlGetProductCategories = (...params) => useGql()('getProductCategories', ...params)\nexport const GqlGetProducts = (...params) => useGql()('getProducts', ...params)\nexport const GqlGetStates = (...params) => useGql()('getStates', ...params)\nexport const GqlGetStockStatus = (...params) => useGql()('getStockStatus', ...params)\nexport const GqlGetStripePaymentIntent = (...params) => useGql()('getStripePaymentIntent', ...params)\nexport const GqlLogin = (...params) => useGql()('login', ...params)\nexport const GqlRegisterCustomer = (...params) => useGql()('registerCustomer', ...params)\nexport const GqlRemoveCoupons = (...params) => useGql()('removeCoupons', ...params)\nexport const GqlUpdatePassword = (...params) => useGql()('updatePassword', ...params)","import { defu } from \"defu\";\nimport { hash } from \"ohash\";\nimport { unref, isRef, reactive } from \"vue\";\nimport { GqlSdks, GqClientOps } from \"#gql\";\nimport { useState, useCookie, useNuxtApp, useAsyncData, refreshNuxtData, useRuntimeConfig } from \"#imports\";\nconst getGqlClient = (client, state) => {\n  if (!state) {\n    state = useGqlState();\n  }\n  return client || (state.value?.default ? \"default\" : Object.keys(state.value)[0]);\n};\nconst useGqlState = () => {\n  const nuxtApp = useNuxtApp();\n  if (!nuxtApp._gqlState) {\n    throw new Error(\"GQL State is not available.\");\n  }\n  return nuxtApp?._gqlState;\n};\nconst setGqlState = ({ client, patch }) => {\n  const state = useGqlState();\n  client = getGqlClient(client, state);\n  const resetToken = patch?.token && !patch.token.value;\n  const resetHeaders = patch?.headers && !Object.keys(patch.headers).length;\n  state.value[client].options = defu(patch, {\n    ...state.value[client]?.options,\n    ...resetToken && { token: void 0 },\n    ...resetHeaders && { headers: void 0 }\n  });\n};\nexport function useGqlHeaders(...args) {\n  const client = args[1] || args?.[0]?.client;\n  let headers = args[0] && typeof args[0] !== \"undefined\" && \"headers\" in args[0] ? args[0].headers : args[0];\n  const respectDefaults = args?.[0]?.respectDefaults;\n  headers = headers || {};\n  setGqlState({ client, patch: { headers } });\n  if (respectDefaults && !Object.keys(headers).length) {\n    const defaultHeaders = useRuntimeConfig()?.public?.[\"graphql-client\"]?.clients?.[client || \"default\"]?.headers;\n    const serverHeaders = import.meta.server && (typeof defaultHeaders?.serverOnly === \"object\" && defaultHeaders?.serverOnly) || void 0;\n    if (defaultHeaders?.serverOnly) {\n      delete defaultHeaders.serverOnly;\n    }\n    headers = { ...defaultHeaders, ...serverHeaders };\n    setGqlState({ client, patch: { headers } });\n  }\n}\nexport function useGqlToken(...args) {\n  args = args || [];\n  const config = args[0]?.config || args?.[1]?.config;\n  const refreshData = args[0]?.refreshData ?? args?.[1]?.refreshData ?? true;\n  let client = args[0]?.client || args?.[1]?.client;\n  let token = typeof args[0] === \"string\" || args?.[0] === null ? args[0] : args?.[0]?.token;\n  if (token) {\n    token = token.trim();\n  }\n  client = getGqlClient(client);\n  const tokenStorage = useRuntimeConfig()?.public?.[\"graphql-client\"]?.clients?.[client]?.tokenStorage;\n  if (token !== void 0 && typeof tokenStorage === \"object\") {\n    if (tokenStorage.mode === \"cookie\") {\n      const cookie = useCookie(tokenStorage.name, tokenStorage.cookieOptions);\n      cookie.value = token;\n    }\n    if (import.meta.client && tokenStorage.mode === \"localStorage\") {\n      if (token !== null) {\n        localStorage.setItem(tokenStorage.name, token);\n      } else {\n        localStorage.removeItem(tokenStorage.name);\n      }\n    }\n    if (refreshData) {\n      const nuxtApp = useNuxtApp();\n      const _gqlDataKeys = Object.keys(nuxtApp.payload.data).filter((k) => k.startsWith(\"gql:data:\"));\n      if (_gqlDataKeys.length) {\n        refreshNuxtData(_gqlDataKeys);\n      }\n    }\n  }\n  setGqlState({ client, patch: { token: { ...config, value: token } } });\n}\nexport const useGqlCors = (opts) => {\n  const { mode, credentials, client } = opts || {};\n  setGqlState({ client, patch: { mode, credentials } });\n};\nexport const useGqlHost = (host, client) => {\n  const state = useGqlState();\n  client = getGqlClient(client, state);\n  if (!host.match(/^https?:\\/\\//)) {\n    const initialHost = useRuntimeConfig()?.public?.[\"graphql-client\"]?.clients?.[client]?.host;\n    if (initialHost?.endsWith(\"/\") && host.startsWith(\"/\")) {\n      host = host.slice(1);\n    }\n    host = `${initialHost}${host}`;\n  }\n  state.value?.[client].instance.setEndpoint(host);\n};\nexport function useGql() {\n  const state = useGqlState();\n  const errState = useGqlErrorState();\n  return (...args) => {\n    const operation = (typeof args?.[0] !== \"string\" && \"operation\" in args?.[0] ? args[0].operation : args[0]) ?? void 0;\n    const variables = (typeof args?.[0] !== \"string\" && \"variables\" in args?.[0] ? args[0].variables : args[1]) ?? void 0;\n    const client = Object.keys(GqClientOps).find((k) => GqClientOps[k].includes(operation)) ?? \"default\";\n    const { instance } = state.value?.[client];\n    if (!instance) {\n      throw new Error(\"Invalid GraphQL Operation\");\n    }\n    return GqlSdks[client](instance, async (action, operationName, operationType) => {\n      try {\n        return await action();\n      } catch (err) {\n        errState.value = {\n          client,\n          operationType,\n          operationName,\n          statusCode: err?.response?.status,\n          gqlErrors: err?.response?.errors || err?.response?.message && [{ message: err?.response?.message }] || []\n        };\n        if (state.value.onError) {\n          state.value.onError(errState.value);\n        }\n        throw errState.value;\n      }\n    })[operation](variables);\n  };\n}\nexport const useGqlError = (onError) => {\n  useGqlState().value.onError = import.meta.client ? onError : process.env.NODE_ENV !== \"production\" && ((e) => console.error(\"[nuxt-graphql-client] [GraphQL error]\", e)) || void 0;\n  const errState = useGqlErrorState();\n  if (!errState.value) {\n    return;\n  }\n  onError(errState.value);\n};\nconst useGqlErrorState = () => useState(\"_gqlErrors\", () => null);\nexport function useAsyncGql(...args) {\n  const toReactive = (v) => v && isRef(v) ? v : reactive(v);\n  const options = (typeof args?.[0] !== \"string\" && \"options\" in args?.[0] ? args[0].options : args[2]) ?? {};\n  const operation = (typeof args?.[0] !== \"string\" && \"operation\" in args?.[0] ? args[0].operation : args[0]) ?? void 0;\n  const variables = (typeof args?.[0] !== \"string\" && \"variables\" in args?.[0] ? toReactive(args[0].variables) : args[1] && toReactive(args[1])) ?? void 0;\n  if (variables) {\n    options.watch = options.watch || [];\n    options.watch.push(variables);\n  }\n  const key = `gql:data:${hash({ operation, variables })}`;\n  return useAsyncData(key, () => useGql()(operation, unref(variables)), options);\n}\n","import { GqlLogin, GqlLogout, GqlRegisterCustomer, GqlResetPasswordEmail, GqlGetOrders } from '#gql';\nimport type { RegisterCustomerInput, CreateAccountInput } from '#gql';\n\nexport const useAuth = () => {\n  const { refreshCart } = useCart();\n  const { logGQLError } = useHelpers();\n\n  const customer = useState<Customer>('customer', () => ({ billing: {}, shipping: {} }));\n  const viewer = useState<Viewer | null>('viewer', () => null);\n  const isPending = useState<boolean>('isPending', () => false);\n  const orders = useState<Order[] | null>('orders', () => null);\n  const downloads = useState<DownloadableItem[] | null>('downloads', () => null);\n\n  // Log in the user\n  const loginUser = async (credentials: CreateAccountInput): Promise<{ success: boolean; error: any }> => {\n    isPending.value = true;\n\n    try {\n      const { loginWithCookies } = await GqlLogin(credentials);\n\n      if (loginWithCookies?.status === 'SUCCESS') {\n        const { viewer } = await refreshCart();\n        if (viewer === null) {\n          return {\n            success: false,\n            error:\n              'Your credentials are correct, but there was an error logging in. This is most likely due to an SSL error. Please try again later. If the problem persists, please contact support.',\n          };\n        }\n      }\n\n      isPending.value = false;\n      return {\n        success: true,\n        error: null,\n      };\n    } catch (error: any) {\n      logGQLError(error);\n      isPending.value = false;\n\n      return {\n        success: false,\n        error: error?.gqlErrors?.[0]?.message,\n      };\n    }\n  };\n\n  // Log out the user\n  const logoutUser = async (): Promise<{ success: boolean; error: any }> => {\n    const { clearAllCookies } = useHelpers();\n    isPending.value = true;\n    try {\n      const { logout } = await GqlLogout();\n      if (logout) {\n        isPending.value = false;\n        await refreshCart();\n        clearAllCookies();\n        viewer.value = null;\n        customer.value = { billing: {}, shipping: {} };\n      }\n      return { success: true, error: null };\n    } catch (error) {\n      logGQLError(error);\n      isPending.value = false;\n      return { success: false, error };\n    }\n  };\n\n  // Register the user\n  const registerUser = async (userInfo: RegisterCustomerInput): Promise<{ success: boolean; error: any }> => {\n    isPending.value = true;\n    try {\n      await GqlRegisterCustomer({ input: userInfo });\n      return { success: true, error: null };\n    } catch (error: any) {\n      logGQLError;\n      const gqlError = error?.gqlErrors?.[0];\n      isPending.value = false;\n      return { success: false, error: gqlError?.message };\n    }\n  };\n\n  // Update the user state\n  const updateCustomer = (payload: Customer): void => {\n    const sessionToken = payload?.sessionToken;\n    if (sessionToken) {\n      useGqlHeaders({ 'woocommerce-session': `Session ${sessionToken}` });\n      const newToken = useCookie('woocommerce-session');\n      newToken.value = sessionToken;\n    }\n    customer.value = payload;\n    isPending.value = false;\n  };\n\n  const updateViewer = (payload: Viewer): void => {\n    viewer.value = payload;\n    isPending.value = false;\n  };\n\n  const sendResetPasswordEmail = async (email: string): Promise<{ success: boolean; error: any }> => {\n    try {\n      isPending.value = true;\n      const { sendPasswordResetEmail } = await GqlResetPasswordEmail({ username: email });\n      if (sendPasswordResetEmail?.success) {\n        isPending.value = false;\n        return { success: true, error: null };\n      }\n      return { success: false, error: 'There was an error sending the reset password email. Please try again later.' };\n    } catch (error: any) {\n      logGQLError;\n      isPending.value = false;\n      const gqlError = error?.gqlErrors?.[0];\n      return { success: false, error: gqlError?.message };\n    }\n  };\n\n  const resetPasswordWithKey = async ({ key, login, password }: { key: string; login: string; password: string }): Promise<{ success: boolean; error: any }> => {\n    try {\n      isPending.value = true;\n      const { resetUserPassword } = await GqlResetPasswordKey({ key, login, password });\n      const wasPasswordReset = Boolean(resetUserPassword?.user?.id);\n      if (wasPasswordReset) {\n        isPending.value = false;\n        return { success: true, error: null };\n      }\n      return { success: false, error: 'There was an error resetting the password. Please try again later.' };\n    } catch (error: any) {\n      isPending.value = false;\n      const gqlError = error?.gqlErrors?.[0];\n      return { success: false, error: gqlError?.message };\n    }\n  };\n\n  const getOrders = async (): Promise<{ success: boolean; error: any }> => {\n    try {\n      const { customer } = await GqlGetOrders();\n      if (customer) {\n        orders.value = customer.orders?.nodes ?? [];\n        return { success: true, error: null };\n      }\n      return { success: false, error: 'There was an error getting your orders. Please try again later.' };\n    } catch (error: any) {\n      logGQLError(error);\n      const gqlError = error?.gqlErrors?.[0];\n      return { success: false, error: gqlError?.message };\n    }\n  };\n\n  const getDownloads = async (): Promise<{ success: boolean; error: any }> => {\n    try {\n      const { customer } = await GqlGetDownloads();\n      if (customer) {\n        downloads.value = customer.downloadableItems?.nodes ?? [];\n        return { success: true, error: null };\n      }\n      return { success: false, error: 'There was an error getting your downloads. Please try again later.' };\n    } catch (error: any) {\n      logGQLError(error);\n      const gqlError = error?.gqlErrors?.[0];\n      return { success: false, error: gqlError?.message };\n    }\n  };\n\n  const avatar = computed(() => viewer.value?.avatar?.url ?? null);\n\n  return {\n    viewer,\n    customer,\n    isPending,\n    orders,\n    downloads,\n    avatar,\n    loginUser,\n    updateCustomer,\n    updateViewer,\n    logoutUser,\n    registerUser,\n    sendResetPasswordEmail,\n    resetPasswordWithKey,\n    getOrders,\n    getDownloads,\n  };\n};\n","import type { AddToCartInput } from '#gql';\n\n/**\n * @name useCart\n * @description A composable that handles the cart in local storage\n */\nexport function useCart() {\n  const cart = useState<Cart>('cart');\n  const isShowingCart = useState<boolean>('isShowingCart', () => false);\n  const isUpdatingCart = useState<boolean>('isUpdatingCart', () => false);\n  const isUpdatingCoupon = useState<boolean>('isUpdatingCoupon', () => false);\n  const paymentGateways = useState<PaymentGateways>('paymentGateways', () => null);\n  const { logGQLError } = useHelpers();\n\n  // Refesh the cart from the server\n  async function refreshCart() {\n    try {\n      const { cart, customer, viewer, paymentGateways } = await GqlGetCart();\n\n      const { updateCustomer, updateViewer } = useAuth();\n      if (cart) updateCart(cart);\n      if (customer) updateCustomer(customer);\n      if (viewer) updateViewer(viewer);\n      if (paymentGateways) updatePaymentGateways(paymentGateways);\n\n      return { cart, customer, viewer, paymentGateways };\n    } catch (error: any) {\n      logGQLError(error);\n      return { cart: null, customer: null, viewer: null, paymentGateways: null };\n    }\n  }\n\n  function updateCart(payload: Cart | null): void {\n    cart.value = payload;\n  }\n\n  function updatePaymentGateways(payload: PaymentGateways): void {\n    paymentGateways.value = payload;\n  }\n\n  // toggle the cart visibility\n  function toggleCart(state: boolean | undefined = undefined): void {\n    isShowingCart.value = state ?? !isShowingCart.value;\n  }\n\n  // add an item to the cart\n  async function addToCart(input: AddToCartInput): Promise<void> {\n    isUpdatingCart.value = true;\n\n    try {\n      const { addToCart } = await GqlAddToCart({ input });\n      cart.value = addToCart?.cart ?? null;\n      // Auto open the cart when an item is added to the cart if the setting is enabled\n      const { storeSettings } = useAppConfig();\n      if (storeSettings.autoOpenCart && !isShowingCart.value) toggleCart(true);\n    } catch (error: any) {\n      logGQLError(error);\n    }\n  }\n\n  // remove an item from the cart\n  async function removeItem(key: string) {\n    isUpdatingCart.value = true;\n    const { updateItemQuantities } = await GqlUpDateCartQuantity({ key, quantity: 0 });\n    cart.value = updateItemQuantities?.cart ?? null;\n  }\n\n  // update the quantity of an item in the cart\n  async function updateItemQuantity(key: string, quantity: number): Promise<number | undefined> {\n    isUpdatingCart.value = true;\n    try {\n      const { updateItemQuantities } = await GqlUpDateCartQuantity({ key, quantity });\n      cart.value = updateItemQuantities?.cart ?? null;\n      return quantity;\n    } catch (error: any) {\n      logGQLError(error);\n      return undefined;\n    }\n  }\n\n  // empty the cart\n  async function emptyCart(): Promise<void> {\n    try {\n      const { emptyCart } = await GqlEmptyCart();\n      updateCart(emptyCart?.cart ?? null);\n    } catch (error: any) {\n      logGQLError(error);\n    }\n  }\n\n  // Update shipping method\n  async function updateShippingMethod(shippingMethods: string) {\n    isUpdatingCart.value = true;\n    const { updateShippingMethod } = await GqlChangeShippingMethod({ shippingMethods });\n    cart.value = updateShippingMethod?.cart ?? null;\n  }\n\n  // Apply coupon\n  async function applyCoupon(code: string): Promise<{ message: string | null }> {\n    try {\n      isUpdatingCoupon.value = true;\n      const { applyCoupon } = await GqlApplyCoupon({ code });\n      cart.value = applyCoupon?.cart ?? null;\n      isUpdatingCoupon.value = false;\n    } catch (error: any) {\n      isUpdatingCoupon.value = false;\n      logGQLError(error);\n    }\n    return { message: null };\n  }\n\n  // Remove coupon\n  async function removeCoupon(code: string): Promise<void> {\n    try {\n      isUpdatingCart.value = true;\n      const { removeCoupons } = await GqlRemoveCoupons({ codes: [code] });\n      cart.value = removeCoupons?.cart ?? null;\n      isUpdatingCart.value = false;\n    } catch (error) {\n      logGQLError(error);\n      isUpdatingCart.value = false;\n    }\n  }\n\n  watch(cart, (val) => {\n    isUpdatingCart.value = false;\n  });\n\n  return {\n    cart,\n    isShowingCart,\n    isUpdatingCart,\n    isUpdatingCoupon,\n    paymentGateways,\n    updateCart,\n    refreshCart,\n    toggleCart,\n    addToCart,\n    removeItem,\n    updateItemQuantity,\n    emptyCart,\n    updateShippingMethod,\n    applyCoupon,\n    removeCoupon,\n  };\n}\n","export default defineNuxtPlugin(async (nuxtApp) => {\n  if (!import.meta.env.SSR) {\n    const { clearAllCookies, clearAllLocalStorage } = useHelpers();\n    const sessionToken = useCookie('woocommerce-session');\n    if (sessionToken.value) useGqlHeaders({ 'woocommerce-session': `Session ${sessionToken.value}` });\n\n    // Wait for the user to interact with the page before refreshing the cart, this is helpful to prevent excessive requests to the server\n    let initialised = false;\n    const eventsToFireOn = ['mousedown', 'keydown', 'touchstart', 'scroll', 'wheel', 'click', 'resize', 'mousemove', 'mouseover'];\n\n    async function initStore() {\n      if (initialised) {\n        // We only want to execute this code block once, so we return if initialised is truthy and remove the event listeners\n        eventsToFireOn.forEach((event) => {\n          window.removeEventListener(event, initStore);\n        });\n        return;\n      }\n\n      initialised = true;\n\n      const { refreshCart } = useCart();\n      const success = await refreshCart();\n\n      useGqlError((err: any) => {\n        const serverErrors = ['The iss do not match with this server', 'Invalid session token'];\n        if (serverErrors.includes(err?.gqlErrors?.[0]?.message)) {\n          clearAllCookies();\n          clearAllLocalStorage();\n          window.location.reload();\n        }\n      });\n\n      if (!success) {\n        clearAllCookies();\n        clearAllLocalStorage();\n\n        // Add a new cookie to prevent infinite reloads\n        const reloadCount = useCookie('reloadCount');\n        if (!reloadCount.value) {\n          reloadCount.value = '1';\n        } else {\n          return;\n        }\n\n        // Log out the user\n        const { logoutUser } = useAuth();\n        await logoutUser();\n\n        if (!reloadCount.value) window.location.reload();\n      }\n    }\n\n    eventsToFireOn.forEach((event) => {\n      window.addEventListener(event, initStore, { once: true });\n    });\n\n    // If we are in development mode, we want to initialise the store immediately\n    if (process.env.NODE_ENV === 'development') initStore();\n  }\n});\n","import { joinURL } from \"ufo\";\nimport { defineNuxtPlugin } from \"#app/nuxt\";\nimport { prerenderRoutes } from \"#app/composables/ssr\";\nimport _routes from \"#build/routes\";\nimport routerOptions from \"#build/router.options\";\nlet routes;\nexport default defineNuxtPlugin(async () => {\n  if (!import.meta.server || !import.meta.prerender || routerOptions.hashMode) {\n    return;\n  }\n  if (routes && !routes.length) {\n    return;\n  }\n  routes ||= Array.from(processRoutes(await routerOptions.routes?.(_routes) ?? _routes));\n  const batch = routes.splice(0, 10);\n  prerenderRoutes(batch);\n});\nconst OPTIONAL_PARAM_RE = /^\\/?:.*(?:\\?|\\(\\.\\*\\)\\*)$/;\nfunction processRoutes(routes2, currentPath = \"/\", routesToPrerender = /* @__PURE__ */ new Set()) {\n  for (const route of routes2) {\n    if (OPTIONAL_PARAM_RE.test(route.path) && !route.children?.length) {\n      routesToPrerender.add(currentPath);\n    }\n    if (route.path.includes(\":\")) {\n      continue;\n    }\n    const fullPath = joinURL(currentPath, route.path);\n    routesToPrerender.add(fullPath);\n    if (route.children) {\n      processRoutes(route.children, fullPath, routesToPrerender);\n    }\n  }\n  return routesToPrerender;\n}\n","import unhead_KgADcZ0jPj from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/nuxt/dist/head/runtime/plugins/unhead.js\";\nimport router_jmwsqit4Rs from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/nuxt/dist/pages/runtime/plugins/router.js\";\nimport revive_payload_server_eJ33V7gbc6 from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/nuxt/dist/app/plugins/revive-payload.server.js\";\nimport components_plugin_KR1HBZs4kY from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/.nuxt/components.plugin.mjs\";\nimport i18n_yfWm7jX06p from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/@nuxtjs/i18n/dist/runtime/plugins/i18n.mjs\";\nimport plugin_WLsn00x1qh from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/@nuxt/icon/dist/runtime/plugin.js\";\nimport plugin_jBToDIZpFa from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/nuxt-graphql-client/dist/runtime/plugin.mjs\";\nimport init_wIGCIxHxFb from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/woonuxt_base/app/plugins/init.ts\";\nimport prerender_server_LXx1wM9sKF from \"/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/nuxt/dist/pages/runtime/plugins/prerender.server.js\";\nexport default [\n  unhead_KgADcZ0jPj,\n  router_jmwsqit4Rs,\n  revive_payload_server_eJ33V7gbc6,\n  components_plugin_KR1HBZs4kY,\n  i18n_yfWm7jX06p,\n  plugin_WLsn00x1qh,\n  plugin_jBToDIZpFa,\n  init_wIGCIxHxFb,\n  prerender_server_LXx1wM9sKF\n]","export async function imageMeta(_ctx, url) {\n  const meta = await _imageMeta(url).catch((err) => {\n    console.error(\"Failed to get image meta for \" + url, err + \"\");\n    return {\n      width: 0,\n      height: 0,\n      ratio: 0\n    };\n  });\n  return meta;\n}\nasync function _imageMeta(url) {\n  if (import.meta.server) {\n    const imageMeta2 = await import(\"image-meta\").then((r) => r.imageMeta);\n    const data = await fetch(url).then((res) => res.buffer());\n    const metadata = imageMeta2(data);\n    if (!metadata) {\n      throw new Error(`No metadata could be extracted from the image \\`${url}\\`.`);\n    }\n    const { width, height } = metadata;\n    const meta = {\n      width,\n      height,\n      ratio: width && height ? width / height : void 0\n    };\n    return meta;\n  }\n  if (typeof Image === \"undefined\") {\n    throw new TypeError(\"Image not supported\");\n  }\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      const meta = {\n        width: img.width,\n        height: img.height,\n        ratio: img.width / img.height\n      };\n      resolve(meta);\n    };\n    img.onerror = (err) => reject(err);\n    img.src = url;\n  });\n}\n","export default function imageFetch(url) {\n  return fetch(cleanDoubleSlashes(url));\n}\nexport function getInt(x) {\n  if (typeof x === \"number\") {\n    return x;\n  }\n  if (typeof x === \"string\") {\n    return Number.parseInt(x, 10);\n  }\n  return void 0;\n}\nexport function getFileExtension(url = \"\") {\n  const extension = url.split(/[?#]/).shift().split(\"/\").pop().split(\".\").pop();\n  return extension;\n}\nexport function cleanDoubleSlashes(path = \"\") {\n  return path.replace(/(https?:\\/\\/)|(\\/)+/g, \"$1$2\");\n}\nexport function createMapper(map) {\n  return (key) => {\n    return key ? map[key] || key : map.missingValue;\n  };\n}\nexport function createOperationsGenerator({ formatter, keyMap, joinWith = \"/\", valueMap } = {}) {\n  if (!formatter) {\n    formatter = (key, value) => `${key}=${value}`;\n  }\n  if (keyMap && typeof keyMap !== \"function\") {\n    keyMap = createMapper(keyMap);\n  }\n  const map = valueMap || {};\n  Object.keys(map).forEach((valueKey) => {\n    if (typeof map[valueKey] !== \"function\") {\n      map[valueKey] = createMapper(map[valueKey]);\n    }\n  });\n  return (modifiers = {}) => {\n    const operations = Object.entries(modifiers).filter(([_, value]) => typeof value !== \"undefined\").map(([key, value]) => {\n      const mapper = map[key];\n      if (typeof mapper === \"function\") {\n        value = mapper(modifiers[key]);\n      }\n      key = typeof keyMap === \"function\" ? keyMap(key) : key;\n      return formatter(key, value);\n    });\n    return operations.join(joinWith);\n  };\n}\nexport function renderAttributesToString(attributes = {}) {\n  return Object.entries(attributes).map(([key, value]) => value ? `${key}=\"${value}\"` : \"\").filter(Boolean).join(\" \");\n}\nexport function renderTag(tag, attrs, contents) {\n  const html = `<${tag} ${renderAttributesToString(attrs)}>`;\n  if (!contents) {\n    return html;\n  }\n  return html + contents + `</${tag}>`;\n}\nexport function generateAlt(src = \"\") {\n  return src.split(/[?#]/).shift().split(\"/\").pop().split(\".\").shift();\n}\nexport function parseSize(input = \"\") {\n  if (typeof input === \"number\") {\n    return input;\n  }\n  if (typeof input === \"string\") {\n    if (input.replace(\"px\", \"\").match(/^\\d+$/g)) {\n      return Number.parseInt(input, 10);\n    }\n  }\n}\nexport function parseDensities(input = \"\") {\n  if (input === void 0 || !input.length) {\n    return [];\n  }\n  const densities = /* @__PURE__ */ new Set();\n  for (const density of input.split(\" \")) {\n    const d = Number.parseInt(density.replace(\"x\", \"\"));\n    if (d) {\n      densities.add(d);\n    }\n  }\n  return Array.from(densities);\n}\nexport function checkDensities(densities) {\n  if (densities.length === 0) {\n    throw new Error(\"`densities` must not be empty, configure to `1` to render regular size only (DPR 1.0)\");\n  }\n  if (import.meta.dev && Array.from(densities).some((d) => d > 2)) {\n    const _densities = densities;\n    if (!_densities._warned) {\n      console.warn(\"[nuxt] [image] Density values above `2` are not recommended. See https://observablehq.com/@eeeps/visual-acuity-and-device-pixel-ratio.\");\n    }\n    _densities._warned = true;\n  }\n}\nexport function parseSizes(input) {\n  const sizes = {};\n  if (typeof input === \"string\") {\n    for (const entry of input.split(/[\\s,]+/).filter((e) => e)) {\n      const s = entry.split(\":\");\n      if (s.length !== 2) {\n        sizes[\"1px\"] = s[0].trim();\n      } else {\n        sizes[s[0].trim()] = s[1].trim();\n      }\n    }\n  } else {\n    Object.assign(sizes, input);\n  }\n  return sizes;\n}\n","import { appendHeader } from \"h3\";\nimport { useRequestEvent } from \"#imports\";\nexport function prerenderStaticImages(src = \"\", srcset = \"\") {\n  if (!import.meta.server || !process.env.prerender) {\n    return;\n  }\n  const paths = [\n    src,\n    ...srcset.split(\", \").map((s) => s.trim().split(\" \")[0].trim())\n  ].filter((s) => s && s.includes(\"/_ipx/\"));\n  if (!paths.length) {\n    return;\n  }\n  appendHeader(\n    useRequestEvent(),\n    \"x-nitro-prerender\",\n    paths.map((p) => encodeURIComponent(p)).join(\", \")\n  );\n}\n","import { defu } from \"defu\";\nimport { hasProtocol, parseURL, joinURL, withLeadingSlash } from \"ufo\";\nimport { imageMeta } from \"./utils/meta.mjs\";\nimport { checkDensities, parseDensities, parseSize, parseSizes } from \"./utils/index.mjs\";\nimport { prerenderStaticImages } from \"./utils/prerender.mjs\";\nexport function createImage(globalOptions) {\n  const ctx = {\n    options: globalOptions\n  };\n  const getImage = (input, options = {}) => {\n    const image = resolveImage(ctx, input, options);\n    if (import.meta.server && process.env.prerender) {\n      prerenderStaticImages(image.url);\n    }\n    return image;\n  };\n  const $img = (input, modifiers = {}, options = {}) => {\n    return getImage(input, {\n      ...options,\n      modifiers: defu(modifiers, options.modifiers || {})\n    }).url;\n  };\n  for (const presetName in globalOptions.presets) {\n    $img[presetName] = (source, modifiers, options) => $img(source, modifiers, { ...globalOptions.presets[presetName], ...options });\n  }\n  $img.options = globalOptions;\n  $img.getImage = getImage;\n  $img.getMeta = (input, options) => getMeta(ctx, input, options);\n  $img.getSizes = (input, options) => getSizes(ctx, input, options);\n  ctx.$img = $img;\n  return $img;\n}\nasync function getMeta(ctx, input, options) {\n  const image = resolveImage(ctx, input, { ...options });\n  if (typeof image.getMeta === \"function\") {\n    return await image.getMeta();\n  } else {\n    return await imageMeta(ctx, image.url);\n  }\n}\nfunction resolveImage(ctx, input, options) {\n  if (input && typeof input !== \"string\") {\n    throw new TypeError(`input must be a string (received ${typeof input}: ${JSON.stringify(input)})`);\n  }\n  if (!input || input.startsWith(\"data:\")) {\n    return {\n      url: input\n    };\n  }\n  const { provider, defaults } = getProvider(ctx, options.provider || ctx.options.provider);\n  const preset = getPreset(ctx, options.preset);\n  input = hasProtocol(input) ? input : withLeadingSlash(input);\n  if (!provider.supportsAlias) {\n    for (const base in ctx.options.alias) {\n      if (input.startsWith(base)) {\n        input = joinURL(ctx.options.alias[base], input.substr(base.length));\n      }\n    }\n  }\n  if (provider.validateDomains && hasProtocol(input)) {\n    const inputHost = parseURL(input).host;\n    if (!ctx.options.domains.find((d) => d === inputHost)) {\n      return {\n        url: input\n      };\n    }\n  }\n  const _options = defu(options, preset, defaults);\n  _options.modifiers = { ..._options.modifiers };\n  const expectedFormat = _options.modifiers.format;\n  if (_options.modifiers?.width) {\n    _options.modifiers.width = parseSize(_options.modifiers.width);\n  }\n  if (_options.modifiers?.height) {\n    _options.modifiers.height = parseSize(_options.modifiers.height);\n  }\n  const image = provider.getImage(input, _options, ctx);\n  image.format = image.format || expectedFormat || \"\";\n  return image;\n}\nfunction getProvider(ctx, name) {\n  const provider = ctx.options.providers[name];\n  if (!provider) {\n    throw new Error(\"Unknown provider: \" + name);\n  }\n  return provider;\n}\nfunction getPreset(ctx, name) {\n  if (!name) {\n    return {};\n  }\n  if (!ctx.options.presets[name]) {\n    throw new Error(\"Unknown preset: \" + name);\n  }\n  return ctx.options.presets[name];\n}\nfunction getSizes(ctx, input, opts) {\n  const width = parseSize(opts.modifiers?.width);\n  const height = parseSize(opts.modifiers?.height);\n  const sizes = parseSizes(opts.sizes);\n  const densities = opts.densities?.trim() ? parseDensities(opts.densities.trim()) : ctx.options.densities;\n  checkDensities(densities);\n  const hwRatio = width && height ? height / width : 0;\n  const sizeVariants = [];\n  const srcsetVariants = [];\n  if (Object.keys(sizes).length >= 1) {\n    for (const key in sizes) {\n      const variant = getSizesVariant(key, String(sizes[key]), height, hwRatio, ctx);\n      if (variant === void 0) {\n        continue;\n      }\n      sizeVariants.push({\n        size: variant.size,\n        screenMaxWidth: variant.screenMaxWidth,\n        media: `(max-width: ${variant.screenMaxWidth}px)`\n      });\n      for (const density of densities) {\n        srcsetVariants.push({\n          width: variant._cWidth * density,\n          src: getVariantSrc(ctx, input, opts, variant, density)\n        });\n      }\n    }\n    finaliseSizeVariants(sizeVariants);\n  } else {\n    for (const density of densities) {\n      const key = Object.keys(sizes)[0];\n      let variant = getSizesVariant(key, String(sizes[key]), height, hwRatio, ctx);\n      if (variant === void 0) {\n        variant = {\n          size: \"\",\n          screenMaxWidth: 0,\n          _cWidth: opts.modifiers?.width,\n          _cHeight: opts.modifiers?.height\n        };\n      }\n      srcsetVariants.push({\n        width: density,\n        src: getVariantSrc(ctx, input, opts, variant, density)\n      });\n    }\n  }\n  finaliseSrcsetVariants(srcsetVariants);\n  const defaultVariant = srcsetVariants[srcsetVariants.length - 1];\n  const sizesVal = sizeVariants.length ? sizeVariants.map((v) => `${v.media ? v.media + \" \" : \"\"}${v.size}`).join(\", \") : void 0;\n  const suffix = sizesVal ? \"w\" : \"x\";\n  const srcsetVal = srcsetVariants.map((v) => `${v.src} ${v.width}${suffix}`).join(\", \");\n  return {\n    sizes: sizesVal,\n    srcset: srcsetVal,\n    src: defaultVariant?.src\n  };\n}\nfunction getSizesVariant(key, size, height, hwRatio, ctx) {\n  const screenMaxWidth = ctx.options.screens && ctx.options.screens[key] || Number.parseInt(key);\n  const isFluid = size.endsWith(\"vw\");\n  if (!isFluid && /^\\d+$/.test(size)) {\n    size = size + \"px\";\n  }\n  if (!isFluid && !size.endsWith(\"px\")) {\n    return void 0;\n  }\n  let _cWidth = Number.parseInt(size);\n  if (!screenMaxWidth || !_cWidth) {\n    return void 0;\n  }\n  if (isFluid) {\n    _cWidth = Math.round(_cWidth / 100 * screenMaxWidth);\n  }\n  const _cHeight = hwRatio ? Math.round(_cWidth * hwRatio) : height;\n  return {\n    size,\n    screenMaxWidth,\n    _cWidth,\n    _cHeight\n  };\n}\nfunction getVariantSrc(ctx, input, opts, variant, density) {\n  return ctx.$img(\n    input,\n    {\n      ...opts.modifiers,\n      width: variant._cWidth ? variant._cWidth * density : void 0,\n      height: variant._cHeight ? variant._cHeight * density : void 0\n    },\n    opts\n  );\n}\nfunction finaliseSizeVariants(sizeVariants) {\n  sizeVariants.sort((v1, v2) => v1.screenMaxWidth - v2.screenMaxWidth);\n  let previousMedia = null;\n  for (let i = sizeVariants.length - 1; i >= 0; i--) {\n    const sizeVariant = sizeVariants[i];\n    if (sizeVariant.media === previousMedia) {\n      sizeVariants.splice(i, 1);\n    }\n    previousMedia = sizeVariant.media;\n  }\n  for (let i = 0; i < sizeVariants.length; i++) {\n    sizeVariants[i].media = sizeVariants[i + 1]?.media || \"\";\n  }\n}\nfunction finaliseSrcsetVariants(srcsetVariants) {\n  srcsetVariants.sort((v1, v2) => v1.width - v2.width);\n  let previousWidth = null;\n  for (let i = srcsetVariants.length - 1; i >= 0; i--) {\n    const sizeVariant = srcsetVariants[i];\n    if (sizeVariant.width === previousWidth) {\n      srcsetVariants.splice(i, 1);\n    }\n    previousWidth = sizeVariant.width;\n  }\n}\n","import { joinURL, encodePath, encodeParam } from \"ufo\";\nimport { createOperationsGenerator } from \"#image\";\nconst operationsGenerator = createOperationsGenerator({\n  keyMap: {\n    format: \"f\",\n    fit: \"fit\",\n    width: \"w\",\n    height: \"h\",\n    resize: \"s\",\n    quality: \"q\",\n    background: \"b\"\n  },\n  joinWith: \"&\",\n  formatter: (key, val) => encodeParam(key) + \"_\" + encodeParam(val)\n});\nexport const getImage = (src, { modifiers = {}, baseURL } = {}, ctx) => {\n  if (modifiers.width && modifiers.height) {\n    modifiers.resize = `${modifiers.width}x${modifiers.height}`;\n    delete modifiers.width;\n    delete modifiers.height;\n  }\n  const params = operationsGenerator(modifiers) || \"_\";\n  if (!baseURL) {\n    baseURL = joinURL(ctx.options.nuxt.baseURL, \"/_ipx\");\n  }\n  return {\n    url: joinURL(baseURL, params, encodePath(src))\n  };\n};\nexport const validateDomains = true;\nexport const supportsAlias = true;\n","\nimport * as ipxStaticRuntime$ofvE2B8inn from '/Applications/XAMPP/xamppfiles/htdocs/woonuxt-oazis/node_modules/@nuxt/image/dist/runtime/providers/ipxStatic'\n\nexport const imageOptions = {\n  \"screens\": {\n    \"xs\": 320,\n    \"sm\": 640,\n    \"md\": 768,\n    \"lg\": 1024,\n    \"xl\": 1280,\n    \"xxl\": 1536,\n    \"2xl\": 1536\n  },\n  \"presets\": {},\n  \"provider\": \"ipxStatic\",\n  \"domains\": [\n    \"example.com\",\n    \"example.org\"\n  ],\n  \"alias\": {},\n  \"densities\": [\n    1,\n    2\n  ],\n  \"format\": [\n    \"webp\"\n  ]\n}\n\nimageOptions.providers = {\n  ['ipxStatic']: { provider: ipxStaticRuntime$ofvE2B8inn, defaults: {} }\n}\n        ","import { createImage } from \"./image.mjs\";\nimport { imageOptions } from \"#build/image-options\";\nimport { useNuxtApp, useRuntimeConfig } from \"#imports\";\nexport const useImage = () => {\n  const config = useRuntimeConfig();\n  const nuxtApp = useNuxtApp();\n  return nuxtApp.$img || nuxtApp._img || (nuxtApp._img = createImage({\n    ...imageOptions,\n    nuxt: {\n      baseURL: config.app.baseURL\n    }\n  }));\n};\n","import { computed } from \"vue\";\nimport { parseSize } from \"../utils/index.mjs\";\nimport { useImage } from \"#imports\";\nexport const baseImageProps = {\n  // input source\n  src: { type: String, default: void 0 },\n  // modifiers\n  format: { type: String, default: void 0 },\n  quality: { type: [Number, String], default: void 0 },\n  background: { type: String, default: void 0 },\n  fit: { type: String, default: void 0 },\n  modifiers: { type: Object, default: void 0 },\n  // options\n  preset: { type: String, default: void 0 },\n  provider: { type: String, default: void 0 },\n  sizes: { type: [Object, String], default: void 0 },\n  densities: { type: String, default: void 0 },\n  preload: {\n    type: [Boolean, Object],\n    default: void 0\n  },\n  // <img> attributes\n  width: { type: [String, Number], default: void 0 },\n  height: { type: [String, Number], default: void 0 },\n  alt: { type: String, default: void 0 },\n  referrerpolicy: { type: String, default: void 0 },\n  usemap: { type: String, default: void 0 },\n  longdesc: { type: String, default: void 0 },\n  ismap: { type: Boolean, default: void 0 },\n  loading: {\n    type: String,\n    default: void 0,\n    validator: (val) => [\"lazy\", \"eager\"].includes(val)\n  },\n  crossorigin: {\n    type: [Boolean, String],\n    default: void 0,\n    validator: (val) => [\"anonymous\", \"use-credentials\", \"\", true, false].includes(val)\n  },\n  decoding: {\n    type: String,\n    default: void 0,\n    validator: (val) => [\"async\", \"auto\", \"sync\"].includes(val)\n  },\n  // csp\n  nonce: { type: [String], default: void 0 }\n};\nexport const useBaseImage = (props) => {\n  const options = computed(() => {\n    return {\n      provider: props.provider,\n      preset: props.preset\n    };\n  });\n  const attrs = computed(() => {\n    return {\n      width: parseSize(props.width),\n      height: parseSize(props.height),\n      alt: props.alt,\n      referrerpolicy: props.referrerpolicy,\n      usemap: props.usemap,\n      longdesc: props.longdesc,\n      ismap: props.ismap,\n      crossorigin: props.crossorigin === true ? \"anonymous\" : props.crossorigin || void 0,\n      loading: props.loading,\n      decoding: props.decoding,\n      nonce: props.nonce\n    };\n  });\n  const $img = useImage();\n  const modifiers = computed(() => {\n    return {\n      ...props.modifiers,\n      width: parseSize(props.width),\n      height: parseSize(props.height),\n      format: props.format,\n      quality: props.quality || $img.options.quality,\n      background: props.background,\n      fit: props.fit\n    };\n  });\n  return {\n    options,\n    attrs,\n    modifiers\n  };\n};\n","import { h, defineComponent, ref, computed, onMounted } from \"vue\";\nimport { useImage } from \"../composables.mjs\";\nimport { parseSize } from \"../utils/index.mjs\";\nimport { prerenderStaticImages } from \"../utils/prerender.mjs\";\nimport { markFeatureUsage } from \"../utils/performance.mjs\";\nimport { baseImageProps, useBaseImage } from \"./_base.mjs\";\nimport { useHead, useNuxtApp } from \"#imports\";\nexport const imgProps = {\n  ...baseImageProps,\n  placeholder: { type: [Boolean, String, Number, Array], default: void 0 },\n  placeholderClass: { type: String, default: void 0 }\n};\nexport default defineComponent({\n  name: \"NuxtImg\",\n  props: imgProps,\n  emits: [\"load\", \"error\"],\n  setup: (props, ctx) => {\n    const $img = useImage();\n    const _base = useBaseImage(props);\n    const placeholderLoaded = ref(false);\n    const imgEl = ref();\n    const sizes = computed(() => $img.getSizes(props.src, {\n      ..._base.options.value,\n      sizes: props.sizes,\n      densities: props.densities,\n      modifiers: {\n        ..._base.modifiers.value,\n        width: parseSize(props.width),\n        height: parseSize(props.height)\n      }\n    }));\n    const attrs = computed(() => {\n      const attrs2 = { ..._base.attrs.value, \"data-nuxt-img\": \"\" };\n      if (!props.placeholder || placeholderLoaded.value) {\n        attrs2.sizes = sizes.value.sizes;\n        attrs2.srcset = sizes.value.srcset;\n      }\n      return attrs2;\n    });\n    const placeholder = computed(() => {\n      let placeholder2 = props.placeholder;\n      if (placeholder2 === \"\") {\n        placeholder2 = true;\n      }\n      if (!placeholder2 || placeholderLoaded.value) {\n        return false;\n      }\n      if (typeof placeholder2 === \"string\") {\n        return placeholder2;\n      }\n      const size = Array.isArray(placeholder2) ? placeholder2 : typeof placeholder2 === \"number\" ? [placeholder2, placeholder2] : [10, 10];\n      return $img(props.src, {\n        ..._base.modifiers.value,\n        width: size[0],\n        height: size[1],\n        quality: size[2] || 50,\n        blur: size[3] || 3\n      }, _base.options.value);\n    });\n    const mainSrc = computed(\n      () => props.sizes ? sizes.value.src : $img(props.src, _base.modifiers.value, _base.options.value)\n    );\n    const src = computed(() => placeholder.value ? placeholder.value : mainSrc.value);\n    if (props.preload) {\n      const isResponsive = Object.values(sizes.value).every((v) => v);\n      useHead({\n        link: [{\n          rel: \"preload\",\n          as: \"image\",\n          nonce: props.nonce,\n          ...!isResponsive ? { href: src.value } : {\n            href: sizes.value.src,\n            imagesizes: sizes.value.sizes,\n            imagesrcset: sizes.value.srcset\n          },\n          ...typeof props.preload !== \"boolean\" && props.preload.fetchPriority ? { fetchpriority: props.preload.fetchPriority } : {}\n        }]\n      });\n    }\n    if (import.meta.server && process.env.prerender) {\n      prerenderStaticImages(src.value, sizes.value.srcset);\n    }\n    const nuxtApp = useNuxtApp();\n    const initialLoad = nuxtApp.isHydrating;\n    onMounted(() => {\n      if (placeholder.value) {\n        const img = new Image();\n        img.src = mainSrc.value;\n        if (props.sizes) {\n          img.sizes = sizes.value.sizes || \"\";\n          img.srcset = sizes.value.srcset;\n        }\n        img.onload = (event) => {\n          placeholderLoaded.value = true;\n          ctx.emit(\"load\", event);\n        };\n        markFeatureUsage(\"nuxt-image\");\n        return;\n      }\n      if (!imgEl.value) {\n        return;\n      }\n      if (imgEl.value.complete && initialLoad) {\n        if (imgEl.value.getAttribute(\"data-error\")) {\n          ctx.emit(\"error\", new Event(\"error\"));\n        } else {\n          ctx.emit(\"load\", new Event(\"load\"));\n        }\n      }\n      imgEl.value.onload = (event) => {\n        ctx.emit(\"load\", event);\n      };\n      imgEl.value.onerror = (event) => {\n        ctx.emit(\"error\", event);\n      };\n    });\n    return () => h(\"img\", {\n      ref: imgEl,\n      ...import.meta.server ? { onerror: \"this.setAttribute('data-error', 1)\" } : {},\n      ...attrs.value,\n      ...ctx.attrs,\n      class: props.placeholder && !placeholderLoaded.value ? [props.placeholderClass] : void 0,\n      src: src.value\n    });\n  }\n});\n","import { computed } from \"vue\";\nimport { loadIcons, getIcon as _getIcon } from \"@iconify/vue\";\nimport { useAppConfig } from \"#imports\";\nexport async function loadIcon(name) {\n  await new Promise((resolve) => loadIcons([name], () => resolve(true))).catch(() => null);\n  return _getIcon(name);\n}\nexport function useResolvedName(getName) {\n  const options = useAppConfig().icon;\n  const collections = (options.collections || []).sort((a, b) => b.length - a.length);\n  return computed(() => {\n    const name = getName();\n    const bare = name.startsWith(options.cssSelectorPrefix) ? name.slice(options.cssSelectorPrefix.length) : name;\n    const resolved = options.aliases?.[bare] || bare;\n    if (!resolved.includes(\":\")) {\n      const collection = collections.find((c) => resolved.startsWith(c + \"-\"));\n      return collection ? collection + \":\" + resolved.slice(collection.length + 1) : resolved;\n    }\n    return resolved;\n  });\n}\n","import { addIcon, getIcon as _getIcon } from \"@iconify/vue\";\nimport { computed, watch, h, defineComponent } from \"vue\";\nimport { getIconCSS } from \"@iconify/utils/lib/css/icon\";\nimport { loadIcon } from \"./shared.js\";\nimport { useAppConfig, useNuxtApp, useHead, useRuntimeConfig } from \"#imports\";\nlet cssSelectors;\nconst SYMBOL_SERVER_CSS = \"NUXT_ICONS_SERVER_CSS\";\nfunction escapeCssSelector(selector) {\n  return selector.replace(/([^\\w-])/g, \"\\\\$1\");\n}\nfunction getAllSelectors() {\n  if (cssSelectors)\n    return cssSelectors;\n  cssSelectors = /* @__PURE__ */ new Set();\n  const filter = (selector) => {\n    selector = selector.replace(/^:where\\((.*)\\)$/, \"$1\").trim();\n    if (selector.startsWith(\".\")) {\n      return selector;\n    }\n  };\n  const scanCssRules = (rules) => {\n    if (!rules?.length)\n      return;\n    for (const rule of rules) {\n      if (rule?.cssRules) {\n        scanCssRules(rule.cssRules);\n      }\n      const selectorRaw = rule?.selectorText;\n      if (typeof selectorRaw === \"string\") {\n        const selector = filter(selectorRaw);\n        if (selector)\n          cssSelectors.add(selector);\n      }\n    }\n  };\n  for (const styleSheet of document.styleSheets) {\n    try {\n      const rules = styleSheet.cssRules || styleSheet.rules;\n      scanCssRules(rules);\n    } catch (error) {\n    }\n  }\n  return cssSelectors;\n}\nexport const NuxtIconCss = /* @__PURE__ */ defineComponent({\n  name: \"NuxtIconCss\",\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  async setup(props) {\n    const nuxt = useNuxtApp();\n    const options = useAppConfig().icon;\n    const cssClass = computed(() => options.cssSelectorPrefix + props.name);\n    function getIcon(name) {\n      const registry = _getIcon(name);\n      if (registry)\n        return registry;\n      const payload = nuxt.payload.data[name];\n      if (payload) {\n        addIcon(name, payload);\n        return payload;\n      }\n    }\n    const selector = computed(() => \".\" + escapeCssSelector(cssClass.value));\n    function getCSS(icon, withLayer = true) {\n      let iconSelector = selector.value;\n      if (options.cssWherePseudo) {\n        iconSelector = `:where(${iconSelector})`;\n      }\n      const css = getIconCSS(icon, {\n        iconSelector,\n        format: \"compressed\"\n      });\n      if (options.cssLayer && withLayer) {\n        return `@layer ${options.cssLayer} { ${css} }`;\n      }\n      return css;\n    }\n    if (import.meta.client) {\n      const selectors = getAllSelectors();\n      async function mountCSS(icon) {\n        if (selectors.has(selector.value)) {\n          return;\n        }\n        const style = document.createElement(\"style\");\n        style.textContent = getCSS(icon);\n        if (import.meta.dev) {\n          style.dataset.nuxtIconDev = props.name;\n        }\n        document.head.prepend(style);\n        selectors.add(selector.value);\n      }\n      watch(\n        () => props.name,\n        () => {\n          if (selectors.has(selector.value)) {\n            return;\n          }\n          const data = getIcon(props.name);\n          if (data) {\n            mountCSS(data);\n          } else {\n            loadIcon(props.name).then((data2) => {\n              if (data2)\n                mountCSS(data2);\n            });\n          }\n        },\n        { immediate: true }\n      );\n    }\n    if (import.meta.server) {\n      const configs = useRuntimeConfig().icon || {};\n      if (!configs?.serverKnownCssClasses?.includes(cssClass.value)) {\n        const icon = await loadIcon(props.name);\n        if (icon) {\n          let ssrCSS = nuxt.vueApp._context.provides[SYMBOL_SERVER_CSS];\n          if (!ssrCSS) {\n            ssrCSS = nuxt.vueApp._context.provides[SYMBOL_SERVER_CSS] = /* @__PURE__ */ new Map();\n            nuxt.runWithContext(() => {\n              useHead({\n                style: [\n                  () => {\n                    const sep = import.meta.dev ? \"\\n\" : \"\";\n                    let css = Array.from(ssrCSS.values()).sort().join(sep);\n                    if (options.cssLayer) {\n                      css = `@layer ${options.cssLayer} {${sep}${css}${sep}}`;\n                    }\n                    return { innerHTML: css };\n                  }\n                ]\n              }, {\n                tagPriority: \"low\"\n              });\n            });\n          }\n          if (!ssrCSS.has(props.name)) {\n            const css = getCSS(icon, false);\n            ssrCSS.set(props.name, css);\n          }\n        }\n      }\n    }\n    return () => h(\"span\", { class: [\"iconify\", cssClass.value, options.class] });\n  }\n});\n","import { Icon as Iconify, addIcon } from \"@iconify/vue\";\nimport { h } from \"vue\";\nimport { loadIcon, useResolvedName } from \"./shared.js\";\nimport { useAsyncData, useNuxtApp, defineComponent, useAppConfig } from \"#imports\";\nexport const NuxtIconSvg = /* @__PURE__ */ defineComponent({\n  name: \"NuxtIconSvg\",\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  async setup(props, { slots }) {\n    const nuxt = useNuxtApp();\n    const options = useAppConfig().icon;\n    const name = useResolvedName(() => props.name);\n    const storeKey = \"i-\" + name.value;\n    if (import.meta.server) {\n      useAsyncData(\n        storeKey,\n        () => loadIcon(name.value),\n        { deep: false }\n      );\n    }\n    if (import.meta.client) {\n      const payload = nuxt.payload.data[storeKey];\n      if (payload) {\n        addIcon(name.value, payload);\n      }\n    }\n    return () => h(Iconify, {\n      icon: name.value,\n      ssr: true,\n      class: options.class\n    }, slots);\n  }\n});\n","import { computed, defineComponent, h } from \"vue\";\nimport { NuxtIconCss } from \"./css.js\";\nimport { NuxtIconSvg } from \"./svg.js\";\nimport { useResolvedName } from \"./shared.js\";\nimport { useAppConfig, useNuxtApp } from \"#imports\";\nexport default defineComponent({\n  name: \"NuxtIcon\",\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: false,\n      default: null\n    },\n    size: {\n      type: [Number, String],\n      required: false,\n      default: null\n    }\n  },\n  async setup(props, { slots }) {\n    const nuxtApp = useNuxtApp();\n    const options = useAppConfig().icon;\n    const name = useResolvedName(() => props.name);\n    const component = computed(\n      () => nuxtApp.vueApp?.component(name.value) || ((props.mode || options.mode) === \"svg\" ? NuxtIconSvg : NuxtIconCss)\n    );\n    const style = computed(() => {\n      const size = props.size || options.size;\n      return size ? { fontSize: Number.isNaN(+size) ? size : size + \"px\" } : null;\n    });\n    return () => h(\n      component.value,\n      {\n        ...options.attrs,\n        name: name.value,\n        class: options.class,\n        style: style.value\n      },\n      slots\n    );\n  }\n});\n","// Example: ?orderby=price&order=asc\n\nexport function useSorting() {\n  const route = useRoute();\n  const router = useRouter();\n  const { updateProductList } = useProducts();\n\n  const orderQuery = useState<string>('order', () => '');\n\n  orderQuery.value = route.query.orderby as string;\n\n  function getOrderQuery(): { orderBy: string; order: string } {\n    return { orderBy: route.query.orderby as string, order: route.query.order as string };\n  }\n\n  function setOrderQuery(orderby: string, order?: string): void {\n    router.push({ query: { ...route.query, orderby: orderby ?? undefined, order: order ?? undefined } });\n    setTimeout(() => {\n      updateProductList();\n    }, 100);\n  }\n\n  const isSortingActive = computed<boolean>(() => !!orderQuery.value);\n\n  // Define a function to order the products\n  function sortProducts(products: Product[]): Product[] {\n    if (!isSortingActive) return products;\n\n    const orderQuery = getOrderQuery();\n\n    if (!orderQuery.orderBy && !orderQuery.order) return products;\n\n    const orderby: string = orderQuery.orderBy || 'date';\n    const order: string = orderQuery.order || 'DESC';\n\n    return products.sort((a: Product, b: Product) => {\n      // Format values for sorting\n      const aDate: any = a.date ? new Date(a.date).getTime() : 0;\n      const bDate: any = b.date ? new Date(b.date).getTime() : 0;\n      const aPrice = a.rawPrice ? parseFloat([...a.rawPrice.split(',')].reduce((a, b) => String(Math.max(Number(a), Number(b))))) : 0;\n      const bPrice = b.rawPrice ? parseFloat([...b.rawPrice.split(',')].reduce((a, b) => String(Math.max(Number(a), Number(b))))) : 0;\n      const aSalePrice: number = a.rawSalePrice ? parseFloat([...a.rawSalePrice.split(',')].reduce((a, b) => String(Math.max(Number(a), Number(b))))) : 0;\n      const aRegularPrice: number = a.rawRegularPrice ? parseFloat([...a.rawRegularPrice.split(',')].reduce((a, b) => String(Math.max(Number(a), Number(b))))) : 0;\n      const bSalePrice: number = b.rawSalePrice ? parseFloat([...b.rawSalePrice.split(',')].reduce((a, b) => String(Math.max(Number(a), Number(b))))) : 0;\n      const bRegularPrice: number = b.rawRegularPrice ? parseFloat([...b.rawRegularPrice.split(',')].reduce((a, b) => String(Math.max(Number(a), Number(b))))) : 0;\n      const aDiscount: number = a.onSale ? Math.round(((aSalePrice - aRegularPrice) / aRegularPrice) * 100) : 0;\n      const bDiscount: number = b.onSale ? Math.round(((bSalePrice - bRegularPrice) / bRegularPrice) * 100) : 0;\n      const aName: string = a.name || '';\n      const bName: string = b.name || '';\n      const aRating: number = a.averageRating || 0;\n      const bRating: number = b.averageRating || 0;\n\n      switch (orderby) {\n        case 'price':\n          return order !== 'DESC' ? aPrice - bPrice : bPrice - aPrice;\n        case 'rating':\n          return order !== 'DESC' ? bRating - aRating : aRating - bRating;\n        case 'discount':\n          return order !== 'DESC' ? bDiscount - aDiscount : aDiscount - bDiscount;\n        case 'alphabetically':\n          return order !== 'DESC' ? aName.localeCompare(bName) : bName.localeCompare(aName);\n        default:\n          return order !== 'DESC' ? aDate - bDate : bDate - aDate;\n      }\n    });\n  }\n\n  return { getOrderQuery, setOrderQuery, isSortingActive, orderQuery, sortProducts };\n}\n","/**\n * @name useFiltering\n * @description A composable that handles the filtering of products. For reference this\n * is what the filter query looks like: ?filter=pa_color[green,blue],pa_size[md]\n */\nexport function useFiltering() {\n  const route = useRoute();\n  const router = useRouter();\n  const runtimeConfig = useRuntimeConfig(); // Declare a variable for the runtime config and the filter and order functions\n  const { updateProductList } = useProducts();\n\n  const filterQuery = useState<string>('filter', () => '');\n\n  filterQuery.value = route.query.filter as string;\n\n  /**\n   * Get the filter value from the url\n   * @param {string} filterName\n   * @returns {string[]} - An array of filter values\n   * @example getFilter('pa_color') // [\"green\", \"blue\"]\n   */\n  function getFilter(filterName: string): string[] {\n    return filterQuery.value?.split(`${filterName}[`)[1]?.split(']')[0]?.split(',') || [];\n  }\n\n  /**\n   * Set the filter value in the url\n   * @param {string}\n   * @param {string[]}\n   * @example Just like the example above, but in reverse. setFilter('pa_color', ['green', 'blue'])\n   */\n  function setFilter(filterName: string, filterValue: string[]) {\n    let newFilterQuery = filterQuery.value || '';\n\n    // If there are filters and filterName is not one of them, add the filter query\n    if (!filterQuery.value?.includes(filterName)) {\n      newFilterQuery = filterQuery.value ? `${filterQuery.value},${filterName}[${filterValue}]` : `${filterName}[${filterValue}]`;\n    } else {\n      // If filterValue is empty, remove the filter query\n      newFilterQuery = !filterValue.length\n        ? filterQuery.value.replace(`${filterName}[${getFilter(filterName)}]`, '')\n        : filterQuery.value.replace(`${filterName}[${getFilter(filterName)}]`, `${filterName}[${filterValue}]`);\n    }\n\n    // remove the first or last comma\n    newFilterQuery = newFilterQuery.replace(/^,/, '').replace(/,$/, '');\n\n    // if there is 2 or more commas in a row, replace them with one\n    newFilterQuery = newFilterQuery.replace(/,{2,}/g, ',');\n\n    // Update the filter query\n    filterQuery.value = newFilterQuery;\n\n    router.push({ query: { ...route.query, filter: newFilterQuery } });\n\n    // remove pagination from the url\n    const path = route.path.includes('/page/') ? route.path.split('/page/')[0] : route.path;\n\n    // if the filter query is empty, remove it from the url\n    if (!newFilterQuery) {\n      router.push({\n        path,\n        query: { ...route.query, filter: undefined },\n      });\n    } else {\n      router.push({\n        path,\n        query: { ...route.query, filter: newFilterQuery },\n      });\n    }\n\n    setTimeout(() => {\n      updateProductList();\n    }, 50);\n  }\n\n  /**\n   * Reset the filter value in the url\n   */\n  function resetFilter(): void {\n    const { scrollToTop } = useHelpers();\n    filterQuery.value = '';\n    router.push({ query: { ...route.query, filter: undefined } });\n\n    setTimeout(() => {\n      updateProductList();\n      scrollToTop();\n    }, 50);\n  }\n\n  /**\n   * Check if there are any filters active\n   * @returns {boolean}\n   */\n  const isFiltersActive = computed<boolean>(() => !!filterQuery.value);\n\n  /**\n   * Filter the products based on the active filters\n   * @param {Product[]} products - An array of all the products\n   * @returns {Product[]} - An array of filtered products\n   */\n  function filterProducts(products: Product[]): Product[] {\n    return products.filter((product) => {\n      // Category filter\n      const category = getFilter('category') || []; // [\"category-slug\"]\n      const categoryCondition = category.length ? product.productCategories?.nodes?.find((node) => category.includes(node.slug as string)) : true;\n\n      // price filter\n      const priceRange = getFilter('price') || []; // [\"0\", \"100\"]\n      // Variable products returns an array of prices, so we need to find the highest price.\n      const productPrice = product.rawPrice ? parseFloat([...product.rawPrice.split(',')].reduce((a, b) => String(Math.max(Number(a), Number(b))))) : 0;\n      const priceCondition = priceRange.length\n        ? productPrice >= parseFloat(priceRange[0] as string) && productPrice <= parseFloat(priceRange[1] as string)\n        : true;\n\n      // Star rating filter\n      const starRating = getFilter('rating') || [];\n      const ratingCondition = starRating.length ? (product?.averageRating || 0) >= parseFloat(starRating[0] as string) : true;\n\n      // Product attribute filters\n      const globalProductAttributes = runtimeConfig?.public?.GLOBAL_PRODUCT_ATTRIBUTES?.map((attribute: any) => attribute.slug) || [];\n      const attributeCondition = globalProductAttributes\n        .map((attribute: string) => {\n          const attributeValues = getFilter(attribute) || [];\n          if (!attributeValues.length) return true;\n          return product.terms?.nodes?.find((node: any) => node.taxonomyName === attribute && attributeValues.includes(node.slug));\n        })\n        .every((condition: any) => condition);\n\n      // onSale filter\n      const onSale = getFilter('sale');\n      const saleItemsOnlyCondition = onSale.length ? product.onSale : true;\n\n      return ratingCondition && priceCondition && attributeCondition && categoryCondition && saleItemsOnlyCondition;\n    });\n  }\n\n  return { getFilter, setFilter, resetFilter, isFiltersActive, filterProducts };\n}\n","let allProducts = [] as Product[];\n\nexport function useProducts() {\n  // Declare the state variables and the setter functions\n  const products = useState<Product[]>('products');\n\n  /**\n   * Sets the products state variable and the allProducts variable.\n   * @param {Product[]} newProducts - The new products to set.\n   */\n  function setProducts(newProducts: Product[]): void {\n    if (!Array.isArray(newProducts)) throw new Error('Products must be an array.');\n    products.value = newProducts ?? [];\n    allProducts = JSON.parse(JSON.stringify(newProducts));\n  }\n\n  const updateProductList = async (): Promise<void> => {\n    const { scrollToTop } = useHelpers();\n    const { isSortingActive, sortProducts } = useSorting();\n    const { isFiltersActive, filterProducts } = useFiltering();\n    const { isSearchActive, searchProducts } = useSearching();\n\n    // scroll to top of page\n    scrollToTop();\n\n    // return all products if no filters are active\n    if (!isFiltersActive.value && !isSearchActive.value && !isSortingActive.value) {\n      products.value = allProducts;\n      return;\n    }\n\n    // otherwise, apply filter, search and sorting in that order\n    try {\n      let newProducts = [...allProducts];\n      if (isFiltersActive.value) newProducts = filterProducts(newProducts);\n      if (isSearchActive.value) newProducts = searchProducts(newProducts);\n      if (isSortingActive.value) newProducts = sortProducts(newProducts);\n\n      products.value = newProducts;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return { products, allProducts, setProducts, updateProductList };\n}\n","// Example: ?search=shirt\n\nexport function useSearching() {\n  const isShowingSearch = useState<boolean>('isShowingSearch', () => false);\n  const route = useRoute();\n  const router = useRouter();\n  const { updateProductList } = useProducts();\n\n  const searchQuery = useState<string>('searchQuery', () => '');\n\n  searchQuery.value = route.query.search as string;\n\n  function getSearchQuery(): string {\n    return route.query.search as string;\n  }\n\n  function setSearchQuery(search: string): void {\n    searchQuery.value = search;\n    router.push({ query: { ...route.query, search: search || undefined } });\n    setTimeout(() => {\n      updateProductList();\n    }, 50);\n  }\n\n  function clearSearchQuery(): void {\n    setSearchQuery('');\n  }\n\n  const isSearchActive = computed<boolean>(() => !!searchQuery.value);\n\n  const toggleSearch = () => {\n    isShowingSearch.value = !isShowingSearch.value;\n  };\n\n  function searchProducts(products: Product[]): Product[] {\n    const name = route.name ?? 'products';\n    const search = getSearchQuery();\n\n    /**\n     * If we are on a category page, we need to add the category slug to the\n     * route, otherwise every search will redirect to the products page.\n     */\n    if (route.name === 'product-category-slug') {\n      const categorySlug = route.params.categorySlug as string;\n      router.push({ name, params: { categorySlug }, query: { ...route.query, search } });\n    } else {\n      router.push({ name: 'products', query: { ...route.query, search } });\n    }\n\n    return search\n      ? products.filter((product: Product) => {\n          const name = product.name?.toLowerCase();\n          const description = product.description ? product.description.toLowerCase() : null;\n          const shortDescription = product.shortDescription ? product.shortDescription.toLowerCase() : null;\n          const query = search.toLowerCase();\n          return name?.includes(query) ?? description?.includes(query) ?? shortDescription?.includes(query);\n        })\n      : products;\n  }\n\n  return { getSearchQuery, setSearchQuery, clearSearchQuery, searchProducts, isSearchActive, isShowingSearch, toggleSearch };\n}\n","<script setup>\nconst { getSearchQuery, setSearchQuery, clearSearchQuery } = useSearching();\nconst searchQuery = ref(getSearchQuery());\n\nconst reset = () => {\n  clearSearchQuery();\n  searchQuery.value = '';\n};\n\nwatch(getSearchQuery, (value) => {\n  if (!value) reset();\n});\n</script>\n\n<template>\n  <form class=\"relative items-center flex-1 -space-x-px rounded-md shadow-sm\" @submit.prevent=\"setSearchQuery(searchQuery)\">\n    <input v-model=\"searchQuery\" class=\"header-logo-user-box__search-box__input\" placeholder=\"Keresés a termékek között\" />\n    <NuxtImg class=\"header-logo-user-box__search-box__img position-absolute\" src=\"/img/header/search.svg\" alt=\"Függöny Oázis\" />\n    <span\n      v-if=\"searchQuery\"\n      class=\"absolute z-10 flex items-center gap-1 px-2 py-1 text-xs rounded cursor-pointer bg-primary bg-opacity-10 hover:bg-opacity-20 text-primary right-2\"\n      @click=\"reset\">\n      <span>{{ $t('messages.general.clear') }}</span>\n      <Icon name=\"ion:close-outline\" size=\"18\" />\n    </span>\n  </form>\n</template>\n","<script setup lang=\"ts\">\nconst { viewer, avatar, logoutUser, isPending } = useAuth();\nconst linkTitle = computed<string>(() => viewer.value?.username || 'Sign In');\nconst wishlistLink = computed<string>(() => (viewer.value ? '/my-account?tab=wishlist' : '/wishlist'));\n</script>\n\n<template>\n  <NuxtLink to=\"/my-account\" :title=\"linkTitle\" class=\"hidden sm:inline-flex aspect-square items-center\">\n    <Transition name=\"pop-in\" mode=\"out-in\">\n      <span v-if=\"avatar\" class=\"relative avatar\">\n        <!-- <img\n          :src=\"avatar\"\n          class=\"rounded-full transform scale-125 shadow-md overflow-hidden border border-white my-auto\"\n          width=\"22\"\n          height=\"22\"\n          :alt=\"linkTitle\" /> -->\n        <NuxtImg class=\"header-logo-user-box__login-box__link__img position-relative\" src=\"/img/header/user.svg\" alt=\"Függöny Oázis\" />\n        <div class=\"account-dropdown\">\n          <NuxtLink :to=\"wishlistLink\" class=\"hover:bg-gray-100\"><Icon name=\"ion:heart-outline\" size=\"16\" /><span>Wishlist</span></NuxtLink>\n          <NuxtLink to=\"/my-account\" class=\"hover:bg-gray-100\"><Icon name=\"ion:person-outline\" size=\"16\" /><span>My Account</span></NuxtLink>\n          <button class=\"text-red-600 hover:bg-red-50\" @click.prevent=\"logoutUser\">\n            <LoadingIcon v-if=\"isPending\" size=\"16\" />\n            <Icon v-else name=\"ion:log-out-outline\" size=\"16\" />\n            <span>Logout</span>\n          </button>\n        </div>\n      </span>\n      <Icon v-else name=\"ion:person-outline\" size=\"22\" class=\"border border-transparent\" />\n    </Transition>\n  </NuxtLink>\n</template>\n\n<style scoped lang=\"postcss\">\n.pop-in-enter-active,\n.pop-in-leave-active {\n  transition: transform 0.3s;\n}\n\n.pop-in-enter-from,\n.pop-in-leave-to {\n  transform: scale(0);\n}\n\n.avatar {\n  .account-dropdown {\n    @apply absolute gap-2 top-6 -right-2  z-50 p-2 bg-white border border-gray-200 rounded-lg shadow-lg text-sm text-gray-700 hidden;\n\n    a,\n    button {\n      @apply flex gap-2 items-center p-2 rounded whitespace-nowrap min-w-[200px];\n    }\n  }\n\n  &:hover .account-dropdown {\n    @apply grid;\n  }\n}\n</style>\n","<script setup>\nconst { toggleCart, cart } = useCart();\n</script>\n\n<template>\n  <div class=\"cartTrigger relative cursor-pointer d-flex\" title=\"Cart\" @click=\"toggleCart\">\n\n    <div class=\"cartTrigger__tBox\">\n      <ClientOnly>\n        <Transition name=\"popIn\" mode=\"out-in\">\n          <span\n            v-if=\"cart?.contents?.itemCount > 0\"\n            class=\"cartTrigger__tBox__span f-600\"\n            >{{ cart?.contents?.itemCount }}</span\n          >\n        </Transition>\n      </ClientOnly>\n    </div>\n\n    <div class=\"cartTrigger__iBox\">\n      <NuxtImg\n        class=\"header-logo-user-box__login-box__link__img header-logo-user-box__login-box__link__img--format position-relative\"\n        src=\"/img/header/basket.svg\"\n        alt=\"Függöny Oázis\" />\n    </div>\n\n\n  </div>\n</template>\n\n<style lang=\"postcss\">\n/* popIn */\n.popIn-enter-active,\n.popIn-leave-active {\n  transition: all 200ms cubic-bezier(0, 0, 0.57, 1.61);\n}\n\n.popIn-enter-from,\n.popIn-leave-to {\n  transform: scale(0);\n}\n</style>\n","<script setup>\nconst links = [\n  { name: 'FÜGGÖNY', path: '/' },\n  { name: 'LAKÁSTEXTIL', path: '/lakastextil' },\n  { name: 'SÖTÉTÍTŐ', path: '/sotetito' },\n  { name: 'RÖVIDÁRÚ', path: '/rovidaru' },\n  { name: 'KARNIS', path: '/dekoracio' },\n  { name: 'AKCIÓK', path: '/akciok' },\n  { name: 'KAPCSOLAT', path: '/kapcsolat' },\n];\n\n\n</script>\n\n<template>\n  <nav>\n    <ul class=\"menu__list d-flex\">\n      <NuxtLink class=\"menu__item text-color text-transform-uppercase f-500\" v-for=\"link in links\" :key=\"link.path\" :to=\"link.path\">\n        {{ link.name }}\n      </NuxtLink>\n      <!-- <NuxtLink to=\"/products\">{{ $t('messages.general.allProducts') }}</NuxtLink>\n    <NuxtLink to=\"/categories\">{{ $t('messages.shop.category', 2) }}</NuxtLink>\n    <NuxtLink class=\"lg:hidden\" to=\"/wishlist\" :prefetch=\"false\">Wishlist</NuxtLink>\n    <NuxtLink class=\"lg:hidden\" to=\"/my-account\" :prefetch=\"false\">My Account</NuxtLink> -->\n    </ul>\n\n  </nav>\n</template>\n","<script setup lang=\"ts\">\nconst { toggleMobileMenu } = useHelpers();\n</script>\n\n<template>\n  <div>\n    <Icon name=\"ion:menu-outline\" size=\"30\" class=\"hamburgerBtn cursor-pointer\" @click=\"toggleMobileMenu\" />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nconst { toggleSearch } = useSearching();\n</script>\n\n<template>\n  <div class=\"relative cursor-pointer inline-flex sm:hidden\" title=\"Cart\" @click=\"toggleSearch\">\n    <NuxtImg\n          class=\"header-logo-user-box__search-box__img\"\n          src=\"/img/header/search.svg\"\n          alt=\"Függöny Oázis\"\n        />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nconst { isShowingSearch } = useSearching();\n</script>\n\n<template>\n  <header class=\"header\">\n    <div class=\"header__up-box\">\n      <a class=\"header__up-box__link header__up-box__link--margin f-400\" href=\"tel:+36704266794\">\n        <NuxtImg class=\"header__up-box__link__img\" src=\"/img/header/mobile.svg\" alt=\"Függöny Oázis\" />\n        +36 70 426 67 94\n      </a>\n      <a class=\"header__up-box__link f-400\" href=\"mailto:fuggonyoazis@gmail.com\">\n        <NuxtImg class=\"header__up-box__link__img\" src=\"/img/header/mail.svg\" alt=\"Függöny Oázis\" />\n        fuggonyoazis@gmail.com\n      </a>\n    </div>\n    <div class=\"header-logo-user-box grid-3\">\n      <div class=\"header-logo-user-box__img-box\">\n        <NuxtImg class=\"header-logo-user-box__img-box__img\" src=\"/img/header/logo.svg\" alt=\"Függöny Oázis\" />\n      </div>\n      <div class=\"header-logo-user-box__search-box header-logo-user-box__search-box--d-none position-relative\">\n        <ProductSearch />\n      </div>\n      <div class=\"header-logo-user-box__login-box d-flex\">\n        <div class=\"header-logo-user-box__login-box__link\">\n          Bejelentkezés\n          <SignInLink />\n        </div>\n        <div class=\"header-logo-user-box__login-box__link header-logo-user-box__login-box__link--margin\">\n          <CartTrigger />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"header-content\">\n      <div class=\"nav-box header-content__nav-box\">\n        <MainMenu />\n      </div>\n    </div>\n\n    <div class=\"header__mobilBox flex items-center justify-between py-4\">\n      <div class=\"flex items-center\">\n        <MenuTrigger class=\"lg:hidden\" />\n      </div>\n      <div class=\"flex justify-end items-center md:w-[160px] flex-1 ml-auto gap-4 md:gap-6\">\n        <SearchTrigger />\n      </div>\n    </div>\n    <Transition name=\"scale-y\" mode=\"out-in\">\n      <div class=\"container mb-3 -mt-1 sm:hidden\" v-if=\"isShowingSearch\">\n        <ProductSearch class=\"flex w-full\" />\n      </div>\n    </Transition>\n  </header>\n</template>\n","<template>\n  <svg\n    class=\"cursor-pointer top-6 left-8 absolute\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"34\"\n    height=\"34\"\n    viewBox=\"0 0 512 512\">\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"32\"\n      d=\"M368 368L144 144M368 144L144 368\" />\n  </svg>\n</template>\n","<script setup lang=\"ts\">\nconst { toggleMobileMenu, wooNuxtVersionInfo } = useHelpers();\n</script>\n\n<template>\n  <div class=\"bg-white flex flex-col max-w-lg shadow-lg top-0 bottom-0 left-0 w-11/12 z-50 fixed overflow-x-hidden\">\n    <CloseIcon class=\"bg-white rounded-xl shadow-xl p-1.5\" @click=\"toggleMobileMenu(false)\" />\n    <div class=\"mt-8 text-center\">{{ $t('messages.general.menu') }}</div>\n    <MainMenu class=\"m-4 grid p-4 text-gray-500 gap-6\" />\n    <div class=\"mt-auto text-center p-8 text-[10px] text-gray-400\">\n      <a href=\"/\" :title=\"wooNuxtVersionInfo\">WooNuxt v{{ wooNuxtVersionInfo }}</a>\n    </div>\n  </div>\n</template>\n","import { defineComponent, h, nextTick, onMounted, provide, shallowReactive } from \"vue\";\nimport { PageRouteSymbol } from \"./injections.js\";\nexport const RouteProvider = defineComponent({\n  props: {\n    vnode: {\n      type: Object,\n      required: true\n    },\n    route: {\n      type: Object,\n      required: true\n    },\n    vnodeRef: Object,\n    renderKey: String,\n    trackRootNodes: Boolean\n  },\n  setup(props) {\n    const previousKey = props.renderKey;\n    const previousRoute = props.route;\n    const route = {};\n    for (const key in props.route) {\n      Object.defineProperty(route, key, {\n        get: () => previousKey === props.renderKey ? props.route[key] : previousRoute[key]\n      });\n    }\n    provide(PageRouteSymbol, shallowReactive(route));\n    let vnode;\n    if (import.meta.dev && import.meta.client && props.trackRootNodes) {\n      onMounted(() => {\n        nextTick(() => {\n          if ([\"#comment\", \"#text\"].includes(vnode?.el?.nodeName)) {\n            const filename = (vnode?.type).__file;\n            console.warn(`[nuxt] \\`${filename}\\` does not have a single root node and will cause errors when navigating between routes.`);\n          }\n        });\n      });\n    }\n    return () => {\n      if (import.meta.dev && import.meta.client) {\n        vnode = h(props.vnode, { ref: props.vnodeRef });\n        return vnode;\n      }\n      return h(props.vnode, { ref: props.vnodeRef });\n    };\n  }\n});\n","import { Fragment, Suspense, Transition, defineComponent, h, inject, nextTick, ref, watch } from \"vue\";\nimport { RouterView } from \"vue-router\";\nimport { defu } from \"defu\";\nimport { generateRouteKey, toArray, wrapInKeepAlive } from \"./utils.js\";\nimport { RouteProvider } from \"#app/components/route-provider\";\nimport { useNuxtApp } from \"#app/nuxt\";\nimport { useRouter } from \"#app/composables/router\";\nimport { _wrapIf } from \"#app/components/utils\";\nimport { LayoutMetaSymbol, PageRouteSymbol } from \"#app/components/injections\";\nimport { appKeepalive as defaultKeepaliveConfig, appPageTransition as defaultPageTransition } from \"#build/nuxt.config.mjs\";\nexport default defineComponent({\n  name: \"NuxtPage\",\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String\n    },\n    transition: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    keepalive: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    route: {\n      type: Object\n    },\n    pageKey: {\n      type: [Function, String],\n      default: null\n    }\n  },\n  setup(props, { attrs, slots, expose }) {\n    const nuxtApp = useNuxtApp();\n    const pageRef = ref();\n    const forkRoute = inject(PageRouteSymbol, null);\n    let previousPageKey;\n    expose({ pageRef });\n    const _layoutMeta = inject(LayoutMetaSymbol, null);\n    let vnode;\n    const done = nuxtApp.deferHydration();\n    if (import.meta.client && nuxtApp.isHydrating) {\n      const removeErrorHook = nuxtApp.hooks.hookOnce(\"app:error\", done);\n      useRouter().beforeEach(removeErrorHook);\n    }\n    if (props.pageKey) {\n      watch(() => props.pageKey, (next, prev) => {\n        if (next !== prev) {\n          nuxtApp.callHook(\"page:loading:start\");\n        }\n      });\n    }\n    if (import.meta.dev) {\n      nuxtApp._isNuxtPageUsed = true;\n    }\n    return () => {\n      return h(RouterView, { name: props.name, route: props.route, ...attrs }, {\n        default: (routeProps) => {\n          const isRenderingNewRouteInOldFork = import.meta.client && haveParentRoutesRendered(forkRoute, routeProps.route, routeProps.Component);\n          const hasSameChildren = import.meta.client && forkRoute && forkRoute.matched.length === routeProps.route.matched.length;\n          if (!routeProps.Component) {\n            if (import.meta.client && vnode && !hasSameChildren) {\n              return vnode;\n            }\n            done();\n            return;\n          }\n          if (import.meta.client && vnode && _layoutMeta && !_layoutMeta.isCurrent(routeProps.route)) {\n            return vnode;\n          }\n          if (import.meta.client && isRenderingNewRouteInOldFork && forkRoute && (!_layoutMeta || _layoutMeta?.isCurrent(forkRoute))) {\n            if (hasSameChildren) {\n              return vnode;\n            }\n            return null;\n          }\n          const key = generateRouteKey(routeProps, props.pageKey);\n          if (!nuxtApp.isHydrating && !hasChildrenRoutes(forkRoute, routeProps.route, routeProps.Component) && previousPageKey === key) {\n            nuxtApp.callHook(\"page:loading:end\");\n          }\n          previousPageKey = key;\n          const hasTransition = !!(props.transition ?? routeProps.route.meta.pageTransition ?? defaultPageTransition);\n          const transitionProps = hasTransition && _mergeTransitionProps([\n            props.transition,\n            routeProps.route.meta.pageTransition,\n            defaultPageTransition,\n            { onAfterLeave: () => {\n              nuxtApp.callHook(\"page:transition:finish\", routeProps.Component);\n            } }\n          ].filter(Boolean));\n          const keepaliveConfig = props.keepalive ?? routeProps.route.meta.keepalive ?? defaultKeepaliveConfig;\n          vnode = _wrapIf(\n            Transition,\n            hasTransition && transitionProps,\n            wrapInKeepAlive(\n              keepaliveConfig,\n              h(Suspense, {\n                suspensible: true,\n                onPending: () => nuxtApp.callHook(\"page:start\", routeProps.Component),\n                onResolve: () => {\n                  nextTick(() => nuxtApp.callHook(\"page:finish\", routeProps.Component).then(() => nuxtApp.callHook(\"page:loading:end\")).finally(done));\n                }\n              }, {\n                default: () => {\n                  const providerVNode = h(RouteProvider, {\n                    key: key || void 0,\n                    vnode: slots.default ? h(Fragment, void 0, slots.default(routeProps)) : routeProps.Component,\n                    route: routeProps.route,\n                    renderKey: key || void 0,\n                    trackRootNodes: hasTransition,\n                    vnodeRef: pageRef\n                  });\n                  if (import.meta.client && keepaliveConfig) {\n                    providerVNode.type.name = routeProps.Component.type.name || routeProps.Component.type.__name || \"RouteProvider\";\n                  }\n                  return providerVNode;\n                }\n              })\n            )\n          ).default();\n          return vnode;\n        }\n      });\n    };\n  }\n});\nfunction _mergeTransitionProps(routeProps) {\n  const _props = routeProps.map((prop) => ({\n    ...prop,\n    onAfterLeave: prop.onAfterLeave ? toArray(prop.onAfterLeave) : void 0\n  }));\n  return defu(..._props);\n}\nfunction haveParentRoutesRendered(fork, newRoute, Component) {\n  if (!fork) {\n    return false;\n  }\n  const index = newRoute.matched.findIndex((m) => m.components?.default === Component?.type);\n  if (!index || index === -1) {\n    return false;\n  }\n  return newRoute.matched.slice(0, index).some(\n    (c, i) => c.components?.default !== fork.matched[i]?.components?.default\n  ) || Component && generateRouteKey({ route: newRoute, Component }) !== generateRouteKey({ route: fork, Component });\n}\nfunction hasChildrenRoutes(fork, newRoute, Component) {\n  if (!fork) {\n    return false;\n  }\n  const index = newRoute.matched.findIndex((m) => m.components?.default === Component?.type);\n  return index < newRoute.matched.length - 1;\n}\n","<script setup lang=\"ts\"></script>\n\n<template>\n  <!-- <LangSwitcher class=\"mt-8\" /> -->\n  <footer>\n    <div class=\"footer-content grid-4\">\n      <div class=\"footer-content__link-box\">\n        <h6 class=\"footer-content__link-box__h6 text-color\">MENÜ</h6>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">TERMÉKEK</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">BELÉPÉS</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">REGISZTRÁCIÓ</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">PROFILOM</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">KOSÁR</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">PROFILOM</NuxtLink>\n        </p>\n      </div>\n      <div class=\"footer-content__link-box footer-content__link-box--one-formating\">\n        <h6 class=\"footer-content__link-box__h6 text-color\">INFORMÁCIÓK</h6>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">ÁLTALÁNOS SZERZŐDÉSI FELTÉTELEK</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">ADATKEZELÉSI TÁJÉKOZTATÓ</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">FIZETÉS</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">SZÁLLÍTÁS</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">GYAKRAN ISMÉTELT KÉRDÉSEK</NuxtLink>\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <NuxtLink class=\"footer-content__link-box__NuxtLink text-color\">ELÉRHETŐSÉGEK</NuxtLink>\n        </p>\n      </div>\n      <div class=\"footer-content__link-box footer-content__link-box--two-formating\">\n        <h6 class=\"footer-content__link-box__h6 footer-content__link-box__h6--margin text-color\">ELÉRHETŐSÉG</h6>\n        <p class=\"footer-content__link-box__p\">\n          <a href=\"tel:+36704266794\" class=\"footer-content__link-box__link text-color\">\n            <NuxtImg class=\"footer-content__link-box__link__img\" src=\"/img/footer/mobile.svg\" alt=\"Függöny Oázis\" />\n            +36 70 426 67 94</a\n          >\n        </p>\n        <p class=\"footer-content__link-box__p text-color\">\n          <NuxtImg class=\"footer-content__link-box__link__img\" src=\"/img/footer/time.svg\" alt=\"Függöny Oázis\" />\n          Telefonos ügyfélszolgálat: Munkanapokon 8:00 - 17:00\n        </p>\n        <p class=\"footer-content__link-box__p\">\n          <a href=\"mailto:fuggonyoazis@gmail.com\" class=\"footer-content__link-box__link text-color\">\n            <NuxtImg class=\"footer-content__link-box__link__img\" src=\"/img/footer/mail.svg\" alt=\"Függöny Oázis\" />\n            fuggonyoazis@gmail.com</a\n          >\n        </p>\n      </div>\n      <div class=\"footer-content__img-content d-flex\">\n        <NuxtImg class=\"footer-content__img-content__img\" src=\"img/header/logo.svg\" alt=\"Függöny Oázis\" />\n      </div>\n    </div>\n\n    <div class=\"copyright-content\">\n      <NuxtImg class=\"copyright-content__img\" src=\"img/footer/digitalSeed.svg\" alt=\"Függöny Oázis\" />\n    </div>\n  </footer>\n</template>\n","<script setup lang=\"ts\">\nconst route = useRoute();\nconst { isShowingCart, toggleCart } = useCart();\nconst { isShowingMobileMenu, toggleMobileMenu, addBodyClass, removeBodyClass } = useHelpers();\nconst { siteName } = useAppConfig();\n\nconst closeCartAndMenu = () => {\n  toggleCart(false);\n  toggleMobileMenu(false);\n};\n\nwatch([isShowingCart, isShowingMobileMenu], () => {\n  isShowingCart.value || isShowingMobileMenu.value ? addBodyClass('overflow-hidden') : removeBodyClass('overflow-hidden');\n});\n\nwatch(\n  () => route.path,\n  () => closeCartAndMenu(),\n);\n\nuseHead({\n  titleTemplate: `%s - ${siteName}`,\n});\n</script>\n\n<template>\n  <div class=\"flex flex-col min-h-screen\">\n    <AppHeader />\n\n    <Transition name=\"slide-from-right\">\n      <LazyCart v-if=\"isShowingCart\" />\n    </Transition>\n\n    <Transition name=\"slide-from-left\">\n      <MobileMenu v-if=\"isShowingMobileMenu\" />\n    </Transition>\n\n    <NuxtPage />\n\n    <Transition name=\"fade\">\n      <div v-if=\"isShowingCart || isShowingMobileMenu\" class=\"bg-black opacity-25 inset-0 z-40 fixed\" @click=\"closeCartAndMenu\" />\n    </Transition>\n\n    <!-- <LazyAppFooter /> -->\n    <AppFooter />\n  </div>\n</template>\n\n<style lang=\"postcss\">\nhtml,\nbody {\n  @apply bg-gray-100 text-gray-900;\n  scroll-behavior: smooth;\n}\n\nimg {\n  image-rendering: crisp-edges;\n  image-rendering: -webkit-optimize-contrast;\n}\n\npre {\n  @apply rounded bg-gray-800 my-8 text-xs text-white p-4 whitespace-pre-wrap overflow-auto;\n}\n\nselect {\n  @apply bg-white border rounded-md font-medium border-gray-300 flex-1 text-sm p-1.5 pr-12 pl-4 text-gray-500 relative inline-flex items-center hover:bg-gray-50 focus:z-20 py-2 px-4 appearance-none;\n  background: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='none' viewBox='0 0 16 16'%3E%3Cpath stroke='%23333' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M4 6l4 4 4-4'/%3E%3C/svg%3E\")\n    center right 10px no-repeat;\n  background-size: 1rem;\n  padding-right: 2.5rem;\n}\n\n/* Slide-from-right & Slide-from-left */\n.slide-from-right-leave-active,\n.slide-from-right-enter-active,\n.slide-from-left-leave-active,\n.slide-from-left-enter-active {\n  transition: transform 300ms ease-in-out;\n}\n\n.slide-from-right-enter-from,\n.slide-from-right-leave-to {\n  transform: translateX(500px);\n}\n\n.slide-from-left-enter-from,\n.slide-from-left-leave-to {\n  transform: translateX(-500px);\n}\n\n/* Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 300ms ease-in-out;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n\n/* Scale Y */\n.scale-y-enter-active,\n.scale-y-leave-active {\n  transition: all 500ms linear;\n  will-change: max-height, opacity;\n  max-height: 9999px;\n  overflow: hidden;\n  opacity: 1;\n}\n\n.scale-y-enter-from,\n.scale-y-leave-to {\n  max-height: 0;\n  opacity: 0;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.custom-scrollbar::-webkit-scrollbar-track,\n.custom-scrollbar::-webkit-scrollbar {\n  @apply rounded bg-gray-100 w-1.5;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  @apply rounded bg-gray-400;\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0.001;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeDisabledIn {\n  0% {\n    opacity: 0.001;\n  }\n\n  100% {\n    opacity: 0.7;\n  }\n}\n\n@keyframes fadeOut {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0.001;\n  }\n}\n\n.page-enter-active,\n.page-leave-active {\n  transition: opacity 20ms;\n}\n\n.page-enter,\n.page-leave-to {\n  opacity: 0;\n}\n\n.page-enter-active {\n  animation-duration: 200ms;\n  animation-name: fadeIn;\n  animation-timing-function: linear;\n  backface-visibility: hidden;\n}\n\n.page-leave-active {\n  animation-name: fadeOut;\n  animation-duration: 200ms;\n}\n\n@keyframes skelaton {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\nimg.skeleton {\n  animation: skelaton 2000ms infinite cubic-bezier(0.4, 0, 0.2, 1);\n  background-image: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n}\n</style>\n","<script setup lang=\"ts\">\nconst route = useRoute();\nconst { error } = defineProps<{ error: any }>();\nconst { isShowingCart, toggleCart } = useCart();\nconst { isShowingMobileMenu, toggleMobileMenu, addBodyClass, removeBodyClass } = useHelpers();\n\nconst closeCartAndMenu = () => {\n  toggleCart(false);\n  toggleMobileMenu(false);\n};\n\nwatch([isShowingCart, isShowingMobileMenu], () => {\n  isShowingCart.value || isShowingMobileMenu.value ? addBodyClass('overflow-hidden') : removeBodyClass('overflow-hidden');\n});\n\nwatch(\n  () => route.path,\n  () => closeCartAndMenu(),\n);\n</script>\n\n<template>\n  <div class=\"flex flex-col min-h-screen\">\n    <AppHeader />\n\n    <Transition name=\"slide-from-right\">\n      <LazyCart v-if=\"isShowingCart\" />\n    </Transition>\n\n    <Transition name=\"slide-from-left\">\n      <MobileMenu v-if=\"isShowingMobileMenu\" />\n    </Transition>\n\n    <div class=\"flex flex-col items-center justify-center flex-1 gap-4 min-h-[500px]\">\n      <h1 class=\"text-6xl font-bold\">Error {{ error?.statusCode || '404' }}</h1>\n      <p v-if=\"error?.message\" class=\"text-lg\">{{ error.message }}</p>\n    </div>\n\n    <Transition name=\"fade\">\n      <div v-if=\"isShowingCart || isShowingMobileMenu\" class=\"bg-black opacity-25 inset-0 z-40 fixed\" @click=\"closeCartAndMenu\" />\n    </Transition>\n\n    <AppFooter />\n  </div>\n</template>\n","<template>\n  <Suspense @resolve=\"onResolve\">\n    <div v-if=\"abortRender\" />\n    <ErrorComponent\n      v-else-if=\"error\"\n      :error=\"error\"\n    />\n    <IslandRenderer\n      v-else-if=\"islandContext\"\n      :context=\"islandContext\"\n    />\n    <component\n      :is=\"SingleRenderer\"\n      v-else-if=\"SingleRenderer\"\n    />\n    <AppComponent v-else />\n  </Suspense>\n</template>\n\n<script setup>\nimport { defineAsyncComponent, onErrorCaptured, onServerPrefetch, provide } from 'vue'\nimport { useNuxtApp } from '../nuxt'\nimport { isNuxtError, showError, useError } from '../composables/error'\nimport { useRoute, useRouter } from '../composables/router'\nimport { PageRouteSymbol } from '../components/injections'\nimport AppComponent from '#build/app-component.mjs'\nimport ErrorComponent from '#build/error-component.mjs'\n// @ts-expect-error virtual file\nimport { componentIslands } from '#build/nuxt.config.mjs'\n\nconst IslandRenderer = import.meta.server && componentIslands\n  ? defineAsyncComponent(() => import('./island-renderer').then(r => r.default || r))\n  : () => null\n\nconst nuxtApp = useNuxtApp()\nconst onResolve = nuxtApp.deferHydration()\nif (import.meta.client && nuxtApp.isHydrating) {\n  const removeErrorHook = nuxtApp.hooks.hookOnce('app:error', onResolve)\n  useRouter().beforeEach(removeErrorHook)\n}\n\nconst url = import.meta.server ? nuxtApp.ssrContext.url : window.location.pathname\nconst SingleRenderer = import.meta.test && import.meta.dev && import.meta.server && url.startsWith('/__nuxt_component_test__/') && defineAsyncComponent(() => import('#build/test-component-wrapper.mjs')\n  .then(r => r.default(import.meta.server ? url : window.location.href)))\n\n// Inject default route (outside of pages) as active route\nprovide(PageRouteSymbol, useRoute())\n\n// vue:setup hook\nconst results = nuxtApp.hooks.callHookWith(hooks => hooks.map(hook => hook()), 'vue:setup')\nif (import.meta.dev && results && results.some(i => i && 'then' in i)) {\n  console.error('[nuxt] Error in `vue:setup`. Callbacks must be synchronous.')\n}\n\n// error handling\nconst error = useError()\n// render an empty <div> when plugins have thrown an error but we're not yet rendering the error page\nconst abortRender = import.meta.server && error.value && !nuxtApp.ssrContext.error\nonErrorCaptured((err, target, info) => {\n  nuxtApp.hooks.callHook('vue:error', err, target, info).catch(hookError => console.error('[nuxt] Error in `vue:error` hook', hookError))\n  if (import.meta.server || (isNuxtError(err) && (err.fatal || err.unhandled))) {\n    const p = nuxtApp.runWithContext(() => showError(err))\n    onServerPrefetch(() => p)\n    return false // suppress error from breaking render\n  }\n})\n\n// Component islands context\nconst islandContext = import.meta.server && nuxtApp.ssrContext.islandContext\n</script>\n","import { createApp, createSSRApp, nextTick } from \"vue\";\nimport \"#build/fetch.mjs\";\nimport { applyPlugins, createNuxtApp } from \"./nuxt.js\";\nimport { createError } from \"./composables/error.js\";\nimport \"#build/css\";\nimport plugins from \"#build/plugins\";\nimport RootComponent from \"#build/root-component.mjs\";\nimport { vueAppRootContainer } from \"#build/nuxt.config.mjs\";\nlet entry;\nif (import.meta.server) {\n  entry = async function createNuxtAppServer(ssrContext) {\n    const vueApp = createApp(RootComponent);\n    const nuxt = createNuxtApp({ vueApp, ssrContext });\n    try {\n      await applyPlugins(nuxt, plugins);\n      await nuxt.hooks.callHook(\"app:created\", vueApp);\n    } catch (error) {\n      await nuxt.hooks.callHook(\"app:error\", error);\n      nuxt.payload.error = nuxt.payload.error || createError(error);\n    }\n    if (ssrContext?._renderResponse) {\n      throw new Error(\"skipping render\");\n    }\n    return vueApp;\n  };\n}\nif (import.meta.client) {\n  if (import.meta.dev && import.meta.webpackHot) {\n    import.meta.webpackHot.accept();\n  }\n  let vueAppPromise;\n  entry = async function initApp() {\n    if (vueAppPromise) {\n      return vueAppPromise;\n    }\n    const isSSR = Boolean(\n      window.__NUXT__?.serverRendered || document.getElementById(\"__NUXT_DATA__\")?.dataset.ssr === \"true\"\n    );\n    const vueApp = isSSR ? createSSRApp(RootComponent) : createApp(RootComponent);\n    const nuxt = createNuxtApp({ vueApp });\n    async function handleVueError(error) {\n      await nuxt.callHook(\"app:error\", error);\n      nuxt.payload.error = nuxt.payload.error || createError(error);\n    }\n    vueApp.config.errorHandler = handleVueError;\n    try {\n      await applyPlugins(nuxt, plugins);\n    } catch (err) {\n      handleVueError(err);\n    }\n    try {\n      await nuxt.hooks.callHook(\"app:created\", vueApp);\n      await nuxt.hooks.callHook(\"app:beforeMount\", vueApp);\n      vueApp.mount(vueAppRootContainer);\n      await nuxt.hooks.callHook(\"app:mounted\", vueApp);\n      await nextTick();\n    } catch (err) {\n      handleVueError(err);\n    }\n    if (vueApp.config.errorHandler === handleVueError) {\n      vueApp.config.errorHandler = void 0;\n    }\n    return vueApp;\n  };\n  vueAppPromise = entry().catch((error) => {\n    console.error(\"Error while mounting app:\", error);\n    throw error;\n  });\n}\nexport default (ssrContext) => entry(ssrContext);\n"],"names":["$fetch","name","defineGetter","plugin","provide","plugins","_a","hash","global","createH3Error","version","ref","entry","globalKey","_globalThis","generateRouteKey","toArray","createRadixRouter","index","defaultPageTransition","resolve","resolve2","__executeAsync","routes","createRouter","_b","_d","_c","createError","format","code","src","des","warnMessages","errorMessages","context","type","isLiteral","parse","resource","baseCompile","initFeatureFlags","code$1","inc$1","getWarnMessage","inc","getLocale","VERSION","resolveValue","msg","source","message","locale","locales","_context","messages","mergeLocaleMessage","options","composer","getComposer","locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_en_US_json","locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_de_DE_json","locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_es_ES_json","locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_fr_FR_json","locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_it_IT_json","locale__Applications_XAMPP_xamppfiles_htdocs_woonuxt_oazis_woonuxt_base_app_locales_pt_BR_json","vueI18nConfigs","localeLoaders","localeCodes","isEqual","normalizedLocales","localePath","useNuxtCookie","useCookie","navigate","_getLocaleCookie","_getBrowserLocale","_setLocaleCookie","switchLocalePath","__temp","__restore","baseURL","OrderStatusEnum","ProductTypesEnum","StockStatusEnum","defaultGqlSdk","viewer","customer","cart","paymentGateways","addToCart","emptyCart","updateShippingMethod","applyCoupon","router_jmwsqit4Rs","getImage","_getIcon","Iconify","orderQuery","a","b","_sfc_ssrRender","_ssrRenderAttrs","_mergeProps","defaultKeepaliveConfig","_ssrRenderComponent","_withCtx","_push","_parent","RootComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,IAAI,CAAC,WAAW,QAAQ;AACtB,aAAW,SAASA,SAAO,OAAO;AAAA,IAChC,SAAS,QAAS;AAAA,EACtB,CAAG;AACH;ACJO,MAAM,oBAAoB,EAAC,QAAO,QAAO,QAAO,SAAQ;AAYxD,MAAM,eAAe;AAkCrB,MAAM,mBAAmB,EAAC,iBAAgB,WAAU;AAEpD,MAAM,oBAAoB,EAAC,QAAO,MAAK;AAYvC,MAAM,QAAQ;AC1DrB,SAAS,cAAc,UAAU,OAAqB;AACpD,SAAO,WAAW,SAAS;AAAA,IACzB,cAAc;AAAA,EAAA,CACf;AACH;AACO,MAAM,sBAAsB;AAC5B,SAAS,cAAc,SAAS;AACrC,MAAI,iBAAiB;AACrB,QAAM,UAAU;AAAA,IACd,OAAO;AAAA,IACP,QAAQ,YAAY;AAAA,IACpB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,UAAU;AAAA,MACR,IAAI,OAAO;AACF,eAAA;AAAA,MACT;AAAA,MACA,IAAI,MAAM;AACR,eAAO,QAAQ,OAAO;AAAA,MACxB;AAAA,IACF;AAAA,IACA,SAAS,gBAAgB;AAAA,MACvB,MAAM,gBAAgB,EAAE;AAAA,MACxB,OAAO,SAAS,EAAE;AAAA,MAClB,0BAA0B,IAAI;AAAA,MAC9B,SAAS,gBAAgB,EAAE;AAAA,IAAA,CAC5B;AAAA,IACD,QAAQ;AAAA,MACN,MAAM,CAAC;AAAA,IACT;AAAA,IACA,eAAe,IAAI;AACjB,UAAI,QAAQ,OAAO,UAAU,CAAC,mBAAmB;AAC/C,eAAO,QAAQ,OAAO,IAAI,MAAM,aAAa,SAAS,EAAE,CAAC;AAAA,MAC3D;AACO,aAAA,aAAa,SAAS,EAAE;AAAA,IACjC;AAAA,IACA,aAAa;AAAA,IACb,iBAAiB;AACX,UAAA,CAAC,QAAQ,aAAa;AACxB,eAAO,MAAM;AAAA,QAAA;AAAA,MAEf;AACA;AACA,UAAI,SAAS;AACb,aAAO,MAAM;AACX,YAAI,QAAQ;AACV;AAAA,QACF;AACS,iBAAA;AACT;AACA,YAAI,mBAAmB,GAAG;AACxB,kBAAQ,cAAc;AACf,iBAAA,QAAQ,SAAS,sBAAsB;AAAA,QAChD;AAAA,MAAA;AAAA,IAEJ;AAAA,IACA,oBAAoB,CAAC;AAAA,IACrB,YAAY,gBAAgB,EAAE;AAAA,IAC9B,kBAAkB,CAAC;AAAA,IACnB,GAAG;AAAA,EAAA;AAEmB;AACtB,YAAQ,QAAQ,iBAAiB;AAAA,EACnC;AAcA,UAAQ,QAAQ;AACR,UAAA,OAAO,QAAQ,MAAM;AACL;AAChB,UAAA,gBAAgB,eAAe,OAAO,MAAM;AAChD,iBAAW,QAAQ,OAAO;AACxB,cAAM,QAAQ,eAAe,MAAM,KAAK,GAAG,IAAI,CAAC;AAAA,MAClD;AAAA,IAAA;AAEM,YAAA,MAAM,WAAW,CAACC,UAAS,SAAS,QAAQ,MAAM,aAAa,eAAeA,OAAM,GAAG,IAAI;AAAA,EACrG;AACQ,UAAA,WAAW,QAAQ,MAAM;AACzB,UAAA,UAAU,CAACA,OAAM,UAAU;AACjC,UAAM,QAAQ,MAAMA;AACPC,mBAAA,SAAS,OAAO,KAAK;AAClCA,mBAAa,QAAQ,OAAO,OAAO,kBAAkB,OAAO,KAAK;AAAA,EAAA;AAEtDA,iBAAA,QAAQ,QAAQ,SAAS,OAAO;AAC7CA,iBAAa,QAAQ,OAAO,OAAO,kBAAkB,SAAS,OAAO;AAC7C;AACtB,QAAI,QAAQ,YAAY;AACtB,cAAQ,WAAW,OAAO;AAClB,cAAA,WAAW,mBAAmB;AAC9B,cAAA,QAAQ,OAAO,QAAQ,WAAW;AAAA,IAC5C;AACQ,YAAA,aAAa,QAAQ,cAAc,CAAA;AACvC,QAAA,QAAQ,WAAW,SAAS;AAC9B,aAAO,OAAO,QAAQ,SAAS,QAAQ,WAAW,OAAO;AAAA,IAC3D;AACQ,YAAA,WAAW,UAAU,QAAQ;AACrC,YAAQ,WAAW,SAAS;AAAA,MAC1B,QAAQ,QAAQ,WAAW,cAAc;AAAA,MACzC,KAAK,QAAQ,WAAW,cAAc;AAAA,IAAA;AAAA,EAE1C;AAWA,QAAM,gBAAqC,QAAQ,WAAW;AAC9D,UAAQ,QAAQ,UAAiF,aAAa;AACvG,SAAA;AACT;AACgB,SAAA,oBAAoB,SAASC,SAAQ;AACnD,MAAIA,QAAO,OAAO;AACR,YAAA,MAAM,SAASA,QAAO,KAAK;AAAA,EACrC;AACF;AACsB,eAAA,YAAY,SAASA,SAAQ;AAC7C,MAAA,OAAOA,YAAW,YAAY;AAC1B,UAAA,EAAE,SAAAC,aAAY,MAAM,QAAQ,eAAe,MAAMD,QAAO,OAAO,CAAC,KAAK;AACvE,QAAAC,YAAW,OAAOA,aAAY,UAAU;AAC1C,iBAAW,OAAOA,UAAS;AACzB,gBAAQ,QAAQ,KAAKA,SAAQ,GAAG,CAAC;AAAA,MACnC;AAAA,IACF;AAAA,EACF;AACF;AACsB,eAAA,aAAa,SAASC,UAAS;;AACnD,QAAM,kBAAkB,CAAA;AACxB,QAAM,oBAAoB,CAAA;AAC1B,QAAM,YAAY,CAAA;AAClB,QAAM,SAAS,CAAA;AACf,MAAI,eAAe;AACnB,iBAAe,cAAcF,SAAQ;;AAC7B,UAAA,mCAAiCG,MAAAH,QAAO,cAAP,gBAAAG,IAAkB,OAAO,CAACL,UAASI,SAAQ,KAAK,CAAC,MAAM,EAAE,UAAUJ,KAAI,KAAK,CAAC,gBAAgB,SAASA,KAAI,OAAM;AACnJ,QAAA,+BAA+B,SAAS,GAAG;AAC7C,wBAAkB,KAAK,CAAC,IAAI,IAAI,8BAA8B,GAAGE,OAAM,CAAC;AAAA,IAAA,OACnE;AACL,YAAM,UAAU,YAAY,SAASA,OAAM,EAAE,KAAK,YAAY;AAC5D,YAAIA,QAAO,OAAO;AACA,0BAAA,KAAKA,QAAO,KAAK;AAC3B,gBAAA,QAAQ,IAAI,kBAAkB,IAAI,OAAO,CAAC,WAAW,gBAAgB,MAAM;AAC/E,gBAAI,UAAU,IAAIA,QAAO,KAAK,GAAG;AACrB,wBAAA,OAAOA,QAAO,KAAK;AACzB,kBAAA,UAAU,SAAS,GAAG;AACxB;AACA,sBAAM,cAAc,gBAAgB;AAAA,cACtC;AAAA,YACF;AAAA,UACD,CAAA,CAAC;AAAA,QACJ;AAAA,MAAA,CACD;AACD,UAAIA,QAAO,UAAU;AACT,kBAAA,KAAK,QAAQ,MAAM,CAAC,MAAM,OAAO,KAAK,CAAC,CAAC,CAAC;AAAA,MAAA,OAC9C;AACC,cAAA;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,aAAWA,WAAUE,UAAS;AAC5B,UAA0B,aAAQ,eAAR,mBAAoB,oBAAiB,KAAAF,QAAO,QAAP,mBAAY,aAAY,OAAO;AAC5F;AAAA,IACF;AACA,wBAAoB,SAASA,OAAM;AAAA,EACrC;AACA,aAAWA,WAAUE,UAAS;AAC5B,UAA0B,aAAQ,eAAR,mBAAoB,oBAAiB,KAAAF,QAAO,QAAP,mBAAY,aAAY,OAAO;AAC5F;AAAA,IACF;AACA,UAAM,cAAcA,OAAM;AAAA,EAC5B;AACM,QAAA,QAAQ,IAAI,SAAS;AAC3B,MAAI,cAAc;AAChB,aAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AAC/B,YAAA,QAAQ,IAAI,SAAS;AAAA,IAC7B;AAAA,EACF;AACA,MAAI,OAAO,QAAQ;AACjB,UAAM,OAAO,CAAC;AAAA,EAChB;AACF;AAAA;AAEO,SAAS,iBAAiBA,SAAQ;AACnC,MAAA,OAAOA,YAAW,YAAY;AACzB,WAAAA;AAAA,EACT;AACM,QAAA,QAAQA,QAAO,SAASA,QAAO;AACrC,SAAOA,QAAO;AACd,SAAO,OAAO,OAAOA,QAAO,UAAU,MAAM;AAAA,EAAA,IACxCA,SAAQ,EAAE,CAAC,mBAAmB,GAAG,MAAM,OAAO;AACpD;AAKgB,SAAA,aAAa,MAAM,OAAO,MAAM;AAC9C,QAAM,KAAK,MAA8B;AACnC,QAAA,aAAa,cAAc,KAAK,KAAK;AACnB;AACf,WAAA,KAAK,OAAO,eAAe,MAAM,WAAW,UAAU,MAAM,EAAE,CAAC;AAAA,EAIxE;AACF;AACO,SAAS,cAAc,SAAS;;AACjC,MAAA;AACJ,MAAI,uBAAuB;AACP,uBAAA,wBAAsB,MAAtB,mBAAsB,WAAW,IAAI;AAAA,EACzD;AACA,oBAAkB,mBAAmB,cAAc,OAAO,EAAE,OAAO;AACnE,SAAO,mBAAmB;AAC5B;AACO,SAAS,WAAW,SAAS;AAC5B,QAAA,kBAAkB,cAAc,OAAO;AAC7C,MAAI,CAAC,iBAAiB;AAGb;AACC,YAAA,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AAAA,EACF;AACO,SAAA;AACT;AAAA;AAEO,SAAS,iBAAiB,QAAQ;AACvC,SAAO,WAAa,EAAA;AACtB;AACA,SAASD,eAAa,KAAK,KAAK,KAAK;AACnC,SAAO,eAAe,KAAK,KAAK,EAAE,KAAK,MAAM,KAAK;AACpD;AACO,SAAS,gBAAgB,QAAQ;AAC/B,SAAA;AACT;AC/JA,MAAM,UAAU;AAChB,MAAM,eAAe;AACrB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,eAAe;AACrB,MAAM,kBAAkB;AAExB,MAAM,cAAc;AAEpB,MAAM,eAAe;AAErB,MAAM,mBAAmB;AACzB,SAAS,OAAO,MAAM;AACpB,SAAO,UAAU,KAAK,IAAI,EAAE,QAAQ,aAAa,GAAG;AACtD;AAIA,SAAS,iBAAiB,OAAO;AAC/B,SAAO,OAAO,OAAO,UAAU,WAAW,QAAQ,KAAK,UAAU,KAAK,CAAC,EAAE,QAAQ,SAAS,KAAK,EAAE,QAAQ,cAAc,GAAG,EAAE,QAAQ,SAAS,KAAK,EAAE,QAAQ,cAAc,KAAK,EAAE,QAAQ,iBAAiB,GAAG,EAAE,QAAQ,cAAc,GAAG,EAAE,QAAQ,UAAU,KAAK;AACnQ;AACA,SAAS,eAAe,MAAM;AAC5B,SAAO,iBAAiB,IAAI,EAAE,QAAQ,UAAU,KAAK;AACvD;AACA,SAAS,WAAW,MAAM;AACxB,SAAO,OAAO,IAAI,EAAE,QAAQ,SAAS,KAAK,EAAE,QAAQ,OAAO,KAAK,EAAE,QAAQ,kBAAkB,KAAK,EAAE,QAAQ,cAAc,KAAK,EAAE,QAAQ,SAAS,KAAK;AACxJ;AACA,SAAS,YAAY,MAAM;AACzB,SAAO,WAAW,IAAI,EAAE,QAAQ,UAAU,KAAK;AACjD;AACA,SAAS,OAAO,OAAO,IAAI;AACzB,MAAI;AACF,WAAO,mBAAmB,KAAK,IAAI;AAAA,EACvC,QAAU;AACN,WAAO,KAAK;AAAA,EACb;AACH;AAIA,SAAS,eAAe,MAAM;AAC5B,SAAO,OAAO,KAAK,QAAQ,SAAS,GAAG,CAAC;AAC1C;AACA,SAAS,iBAAiB,MAAM;AAC9B,SAAO,OAAO,KAAK,QAAQ,SAAS,GAAG,CAAC;AAC1C;AAKA,SAAS,WAAW,mBAAmB,IAAI;AACzC,QAAM,SAAS,CAAA;AACf,MAAI,iBAAiB,CAAC,MAAM,KAAK;AAC/B,uBAAmB,iBAAiB,MAAM,CAAC;AAAA,EAC5C;AACD,aAAW,aAAa,iBAAiB,MAAM,GAAG,GAAG;AACnD,UAAM,IAAI,UAAU,MAAM,eAAe,KAAK,CAAA;AAC9C,QAAI,EAAE,SAAS,GAAG;AAChB;AAAA,IACD;AACD,UAAM,MAAM,eAAe,EAAE,CAAC,CAAC;AAC/B,QAAI,QAAQ,eAAe,QAAQ,eAAe;AAChD;AAAA,IACD;AACD,UAAM,QAAQ,iBAAiB,EAAE,CAAC,KAAK,EAAE;AACzC,QAAI,OAAO,GAAG,MAAM,QAAQ;AAC1B,aAAO,GAAG,IAAI;AAAA,IACf,WAAU,MAAM,QAAQ,OAAO,GAAG,CAAC,GAAG;AACrC,aAAO,GAAG,EAAE,KAAK,KAAK;AAAA,IAC5B,OAAW;AACL,aAAO,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG,KAAK;AAAA,IAClC;AAAA,EACF;AACD,SAAO;AACT;AACA,SAAS,gBAAgB,KAAK,OAAO;AACnC,MAAI,OAAO,UAAU,YAAY,OAAO,UAAU,WAAW;AAC3D,YAAQ,OAAO,KAAK;AAAA,EACrB;AACD,MAAI,CAAC,OAAO;AACV,WAAO,eAAe,GAAG;AAAA,EAC1B;AACD,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,MAAM,IAAI,CAAC,WAAW,GAAG,eAAe,GAAG,CAAC,IAAI,iBAAiB,MAAM,CAAC,EAAE,EAAE,KAAK,GAAG;AAAA,EAC5F;AACD,SAAO,GAAG,eAAe,GAAG,CAAC,IAAI,iBAAiB,KAAK,CAAC;AAC1D;AACA,SAAS,eAAe,OAAO;AAC7B,SAAO,OAAO,KAAK,KAAK,EAAE,OAAO,CAAC,MAAM,MAAM,CAAC,MAAM,MAAM,EAAE,IAAI,CAAC,MAAM,gBAAgB,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,OAAO,EAAE,KAAK,GAAG;AAChI;AAEA,MAAM,wBAAwB;AAC9B,MAAM,iBAAiB;AACvB,MAAM,0BAA0B;AAChC,MAAM,qBAAqB;AAC3B,MAAM,oBAAoB;AAC1B,MAAM,wBAAwB;AAI9B,SAAS,YAAY,aAAa,OAAO,IAAI;AAC3C,MAAI,OAAO,SAAS,WAAW;AAC7B,WAAO,EAAE,gBAAgB;EAC1B;AACD,MAAI,KAAK,QAAQ;AACf,WAAO,sBAAsB,KAAK,WAAW;AAAA,EAC9C;AACD,SAAO,eAAe,KAAK,WAAW,MAAM,KAAK,iBAAiB,wBAAwB,KAAK,WAAW,IAAI;AAChH;AACA,SAAS,iBAAiB,UAAU;AAClC,SAAO,CAAC,CAAC,YAAY,mBAAmB,KAAK,QAAQ;AACvD;AACA,SAAS,iBAAiB,QAAQ,IAAI,yBAAyB;AAC7D,MAAI,CAAC,yBAAyB;AAC5B,WAAO,MAAM,SAAS,GAAG;AAAA,EAC1B;AACD,SAAO,kBAAkB,KAAK,KAAK;AACrC;AACA,SAAS,qBAAqB,QAAQ,IAAI,yBAAyB;AACjE,MAAI,CAAC,yBAAyB;AAC5B,YAAQ,iBAAiB,KAAK,IAAI,MAAM,MAAM,GAAG,EAAE,IAAI,UAAU;AAAA,EAClE;AACD,MAAI,CAAC,iBAAiB,OAAO,IAAI,GAAG;AAClC,WAAO,SAAS;AAAA,EACjB;AACD,MAAI,OAAO;AACX,MAAI,WAAW;AACf,QAAM,gBAAgB,MAAM,QAAQ,GAAG;AACvC,MAAI,iBAAiB,GAAG;AACtB,WAAO,MAAM,MAAM,GAAG,aAAa;AACnC,eAAW,MAAM,MAAM,aAAa;AAAA,EACrC;AACD,QAAM,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,GAAG;AACjC,QAAM,YAAY,GAAG,SAAS,GAAG,IAAI,GAAG,MAAM,GAAG,EAAE,IAAI;AACvD,UAAQ,aAAa,QAAQ,EAAE,SAAS,IAAI,IAAI,EAAE,KAAK,GAAG,CAAC,KAAK,MAAM;AACxE;AACA,SAAS,kBAAkB,QAAQ,IAAI,yBAAyB;AAC9D,MAAI,CAAC,yBAAyB;AAC5B,WAAO,MAAM,SAAS,GAAG,IAAI,QAAQ,QAAQ;AAAA,EAC9C;AACD,MAAI,iBAAiB,OAAO,IAAI,GAAG;AACjC,WAAO,SAAS;AAAA,EACjB;AACD,MAAI,OAAO;AACX,MAAI,WAAW;AACf,QAAM,gBAAgB,MAAM,QAAQ,GAAG;AACvC,MAAI,iBAAiB,GAAG;AACtB,WAAO,MAAM,MAAM,GAAG,aAAa;AACnC,eAAW,MAAM,MAAM,aAAa;AACpC,QAAI,CAAC,MAAM;AACT,aAAO;AAAA,IACR;AAAA,EACF;AACD,QAAM,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,GAAG;AACjC,SAAO,KAAK,OAAO,EAAE,SAAS,IAAI,IAAI,EAAE,KAAK,GAAG,CAAC,KAAK,MAAM;AAC9D;AACA,SAAS,gBAAgB,QAAQ,IAAI;AACnC,SAAO,MAAM,WAAW,GAAG;AAC7B;AAIA,SAAS,iBAAiB,QAAQ,IAAI;AACpC,SAAO,gBAAgB,KAAK,IAAI,QAAQ,MAAM;AAChD;AAyBA,SAAS,UAAU,OAAO,OAAO;AAC/B,QAAM,SAAS,SAAS,KAAK;AAC7B,QAAM,cAAc,EAAE,GAAG,WAAW,OAAO,MAAM,GAAG,GAAG;AACvD,SAAO,SAAS,eAAe,WAAW;AAC1C,SAAO,mBAAmB,MAAM;AAClC;AAOA,SAAS,cAAc,KAAK;AAC1B,SAAO,OAAO,QAAQ;AACxB;AACA,SAAS,QAAQ,SAAS,OAAO;AAC/B,MAAI,MAAM,QAAQ;AAClB,aAAW,WAAW,MAAM,OAAO,CAAC,SAAS,cAAc,IAAI,CAAC,GAAG;AACjE,QAAI,KAAK;AACP,YAAM,WAAW,QAAQ,QAAQ,uBAAuB,EAAE;AAC1D,YAAM,kBAAkB,GAAG,IAAI;AAAA,IACrC,OAAW;AACL,YAAM;AAAA,IACP;AAAA,EACF;AACD,SAAO;AACT;AA4GA,SAAS,QAAQ,GAAG,GAAG,UAAU,CAAA,GAAI;AACnC,MAAI,CAAC,QAAQ,eAAe;AAC1B,QAAI,kBAAkB,CAAC;AACvB,QAAI,kBAAkB,CAAC;AAAA,EACxB;AACD,MAAI,CAAC,QAAQ,cAAc;AACzB,QAAI,iBAAiB,CAAC;AACtB,QAAI,iBAAiB,CAAC;AAAA,EACvB;AACD,MAAI,CAAC,QAAQ,UAAU;AACrB,QAAI,OAAO,CAAC;AACZ,QAAI,OAAO,CAAC;AAAA,EACb;AACD,SAAO,MAAM;AACf;AAiBA,MAAM,mBAAmB,OAAO,IAAI,sBAAsB;AAC1D,SAAS,SAAS,QAAQ,IAAI,cAAc;AAC1C,QAAM,qBAAqB,MAAM;AAAA,IAC/B;AAAA,EACJ;AACE,MAAI,oBAAoB;AACtB,UAAM,CAAG,EAAA,QAAQ,YAAY,EAAE,IAAI;AACnC,WAAO;AAAA,MACL,UAAU,OAAO,YAAa;AAAA,MAC9B,UAAU;AAAA,MACV,MAAM,SAAS;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,MAAM;AAAA,IACZ;AAAA,EACG;AACD,MAAI,CAAC,YAAY,OAAO,EAAE,gBAAgB,KAAM,CAAA,GAAG;AACjD,WAAuD,UAAU,KAAK;AAAA,EACvE;AACD,QAAM,CAAA,EAAG,WAAW,IAAI,MAAM,cAAc,EAAE,IAAI,MAAM,QAAQ,OAAO,GAAG,EAAE,MAAM,2CAA2C,KAAK,CAAA;AAClI,MAAI,CAAG,EAAA,OAAO,IAAI,OAAO,EAAE,IAAI,YAAY,MAAM,gBAAgB,KAAK;AACtE,MAAI,aAAa,SAAS;AACxB,WAAO,KAAK,QAAQ,mBAAmB,EAAE;AAAA,EAC1C;AACD,QAAM,EAAE,UAAU,QAAQ,MAAAK,MAAI,IAAK,UAAU,IAAI;AACjD,SAAO;AAAA,IACL,UAAU,SAAS,YAAa;AAAA,IAChC,MAAM,OAAO,KAAK,MAAM,GAAG,KAAK,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC,IAAI;AAAA,IAC3D;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAAA;AAAA,IACA,CAAC,gBAAgB,GAAG,CAAC;AAAA,EACzB;AACA;AACA,SAAS,UAAU,QAAQ,IAAI;AAC7B,QAAM,CAAC,WAAW,IAAI,SAAS,IAAIA,QAAO,EAAE,KAAK,MAAM,MAAM,0BAA0B,KAAK,CAAA,GAAI,OAAO,CAAC;AACxG,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,MAAAA;AAAA,EACJ;AACA;AAeA,SAAS,mBAAmB,QAAQ;AAClC,QAAM,WAAW,OAAO,YAAY;AACpC,QAAM,SAAS,OAAO,UAAU,OAAO,OAAO,WAAW,GAAG,IAAI,KAAK,OAAO,OAAO,SAAS;AAC5F,QAAMA,QAAO,OAAO,QAAQ;AAC5B,QAAM,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM;AAC/C,QAAM,OAAO,OAAO,QAAQ;AAC5B,QAAM,QAAQ,OAAO,YAAY,OAAO,gBAAgB,KAAK,OAAO,YAAY,MAAM,OAAO;AAC7F,SAAO,QAAQ,OAAO,OAAO,WAAW,SAASA;AACnD;ACjgBO,MAAM,mBAAmB,OAAO,aAAa;AAC7C,MAAM,kBAAkB,OAAO,OAAO;ACKtC,MAAM,YAAY,MAAM;;AAC7B,UAAO,gBAAc,MAAd,mBAAc;AACvB;AACO,MAAM,WAAW,MAAM;AAI5B,MAAI,uBAAuB;AACzB,WAAO,OAAO,iBAAiB,WAAW,EAAE,MAAM;AAAA,EACpD;AACA,SAAO,WAAa,EAAA;AACtB;AAAA;AAeO,SAAS,0BAA0B,YAAY;AAC7C,SAAA;AACT;AACO,MAAM,qBAAqB,CAACN,OAAM,YAAY,UAAU,CAAA,MAAO;AACpE,QAAM,UAAU;AAChB,QAAMO,UAAS,QAAQ,UAAU,OAAOP,UAAS;AACjD,QAAM,KAAuC;AAC7C,MAAI,CAAC,IAAI;AACC,YAAA,KAAK,8DAA8DA,KAAI;AAC/E;AAAA,EACF;AACA,MAAIO,SAAQ;AACF,YAAA,YAAY,OAAO,KAAK,EAAE;AAAA,EAAA,OAC7B;AACG,YAAA,YAAY,MAAMP,KAAI,IAAI;AAAA,EACpC;AACF;AACA,MAAM,yBAAyB,MAAM;AAC/B,MAAA;AACE,QAAA,aAAa,uBAAuB;AAC/B,aAAA;AAAA,IACT;AAAA,EAAA,QACM;AACC,WAAA;AAAA,EACT;AACO,SAAA;AACT;AACa,MAAA,aAAa,CAAC,IAAI,YAAY;AACzC,MAAI,CAAC,IAAI;AACF,SAAA;AAAA,EACP;AACA,QAAM,SAAS,OAAO,OAAO,WAAW,KAAK,UAAU,KAAK,mBAAmB,EAAE,IAAI,UAAY,EAAA,QAAQ,EAAE,EAAE;AAO7G,QAAM,iBAAiB,YAAY,QAAQ,EAAE,gBAAgB,MAAM;AAC7D,QAAA,cAAa,mCAAS,aAAY;AACxC,MAAI,YAAY;AACV,QAAA,EAAC,mCAAS,WAAU;AAChB,YAAA,IAAI,MAAM,qGAAqG;AAAA,IACvH;AACM,UAAA,EAAE,SAAS,IAAI,IAAI,IAAI,QAAoD,kBAAkB;AAC/F,QAAA,YAAY,iBAAiB,QAAQ,GAAG;AAC1C,YAAM,IAAI,MAAM,kCAAkC,QAAQ,aAAa;AAAA,IACzE;AAAA,EACF;AACA,QAAM,eAAe;AAIrB,QAAM,SAAS;AACf,QAAM,UAAU;AACQ;AACtB,QAAI,QAAQ,YAAY;AAChB,YAAA,WAAW,OAAO,OAAO,YAAY,aAAa,SAAS,OAAO,QAAQ,EAAE,EAAE,YAAY;AAC1F,YAAA,YAAY,aAAa,SAAS,SAAQ,oCAAmB,IAAI,SAAS,QAAQ;AAClF,YAAA,WAAW,eAAe,UAAU;AAClC,cAAA,QAAQ,SAAS,gBAAgB;AACvC,cAAM,aAAa,UAAU,QAAQ,MAAM,KAAK;AAC1C,cAAA,gBAAgB,UAAU,WAAW,cAAc;AACzD,gBAAQ,WAAW,kBAAkB;AAAA,UACnC,YAAY,oBAAmB,mCAAS,iBAAgB,KAAK,GAAG;AAAA,UAChE,MAAM,yEAAyE,UAAU;AAAA,UACzF,SAAS,EAAE,UAAU,cAAc;AAAA,QAAA;AAE9B,eAAA;AAAA,MAAA;AAEL,UAAA,CAAC,cAAc,cAAc;AACxB,eAAA,UAAU,CAAC,UAAU,MAAM,aAAa,WAAW,SAAS,KAAK,IAAI,MAAM;AAC3E,eAAA;AAAA,MACT;AACO,aAAA,SAAS,CAAC,eAAe;AAAA;AAAA,QAE9B;AAAA,OACD;AAAA,IACH;AAAA,EACF;AACA,MAAI,YAAY;AACd,YAAQ,OAAO;AACf,QAAI,mCAAS,SAAS;AACpB,MAAA,SAAS,QAAQ,MAAM;AAAA,IAAA,OAClB;AACL,MAAA,SAAS,OAAO;AAAA,IAClB;AACA,QAAI,cAAc;AACZ,UAAA,CAAC,QAAQ,aAAa;AACjB,eAAA;AAAA,MACT;AACO,aAAA,IAAI,QAAQ,MAAM;AAAA,MAAA,CACxB;AAAA,IACH;AACA,WAAO,QAAQ;EACjB;AACO,UAAA,mCAAS,WAAU,OAAO,QAAQ,EAAE,IAAI,OAAO,KAAK,EAAE;AAC/D;AAoCO,SAAS,mBAAmB,IAAI;AAC9B,SAAA,UAAU,GAAG,QAAQ,IAAI,GAAG,SAAS,CAAA,CAAE,KAAK,GAAG,QAAQ;AAChE;AACgB,SAAA,UAAU,WAAW,iBAAiB,OAAO;AAC3D,QAAM,MAAM,IAAI,IAAI,WAAW,kBAAkB;AACjD,MAAI,CAAC,gBAAgB;AACnB,WAAO,IAAI,WAAW,IAAI,SAAS,IAAI;AAAA,EACzC;AACI,MAAA,UAAU,WAAW,IAAI,GAAG;AAC9B,WAAO,IAAI,WAAW,QAAQ,IAAI,UAAU,EAAE;AAAA,EAChD;AACA,SAAO,IAAI;AACb;AC5KO,MAAM,uBAAuB;AAC7B,MAAM,WAAW,MAAM,MAAM,WAAY,EAAC,SAAS,OAAO;AAC1D,MAAM,YAAY,CAAC,UAAU;AAClC,QAAM,YAAY,YAAY,KAAK;AACnC,MAAI;AACF,UAAM,UAAU;AAChB,UAAM,SAAS;AACf,QAAI,MAAoB;AAGxB,WAAO,QAAQ,OAAO,SAAS;AAAA,EACnC,QAAU;AACN,UAAM;AAAA,EACP;AACD,SAAO;AACT;AAUO,MAAM,cAAc,CAAC,UAAU,CAAC,CAAC,SAAS,OAAO,UAAU,YAAY,wBAAwB;AAC/F,MAAM,cAAc,CAAC,UAAU;AACpC,QAAM,YAAYQ,cAAc,KAAK;AACrC,SAAO,eAAe,WAAW,sBAAsB;AAAA,IACrD,OAAO;AAAA,IACP,cAAc;AAAA,IACd,UAAU;AAAA,EACd,CAAG;AACD,SAAO;AACT;ACnCaC,UAAQ,WAAW,GAAG;AAEnC,SAAS,aAAa,GAAG;AACvB,SAAO,OAAO,MAAM,aAAa,EAAE,IAAI,MAAM,CAAC;AAChD;AACA,SAAS,sBAAsBC,MAAK,UAAU,IAAI;AAChD,MAAIA,gBAAe;AACV,WAAAA;AACH,QAAA,OAAO,aAAaA,IAAG;AACzB,MAAA,CAACA,QAAO,CAAC;AACJ,WAAA;AACL,MAAA,MAAM,QAAQ,IAAI;AACpB,WAAO,KAAK,IAAI,CAAC,MAAM,sBAAsB,GAAG,OAAO,CAAC;AACtD,MAAA,OAAO,SAAS,UAAU;AAC5B,WAAO,OAAO;AAAA,MACZ,OAAO,QAAQ,IAAI,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM;AACnC,YAAI,MAAM,mBAAmB,EAAE,WAAW,IAAI;AAC5C,iBAAO,CAAC,GAAG,MAAM,CAAC,CAAC;AACrB,eAAO,CAAC,GAAG,sBAAsB,GAAG,CAAC,CAAC;AAAA,MAAA,CACvC;AAAA,IAAA;AAAA,EAEL;AACO,SAAA;AACT;AAE4B,iBAAiB;AAAA,EAC3C,OAAO;AAAA,IACL,mBAAmB,SAAS,KAAK;AAC/B,iBAAWC,UAAS,IAAI;AAChB,QAAAA,OAAA,gBAAgB,sBAAsBA,OAAM,KAAK;AAAA,IAC3D;AAAA,EACF;AACF,CAAC;AAED,MAAM,aAAa;AA2BnB,MAAM,UAAU,OAAO,eAAe,cAAc,aAAsD,OAAO,WAAW,cAAc,SAAS,OAAO,SAAS,cAAc,OAAO,CAAA;AACxL,MAAMC,cAAY;AAClB,SAAS,wBAAwB,SAAS;AACxC,UAAQA,WAAS,IAAI;AACvB;AACA,SAAS,aAAa;AACpB,MAAIA,eAAa,SAAS;AACjB,WAAA,QAAQA,WAAS;EAC1B;AACM,QAAA,OAAO,OAAO,UAAU;AAC9B,MAAI,CAAC,QAAQ,QAAQ,IAAI,aAAa;AACpC,YAAQ,KAAK,kGAAkG;AACjH,SAAO,QAAQ;AACjB;AC3EA,SAAS,QAAQ,OAAO,UAAU,IAAI;AACpC,QAAM,OAAO,QAAQ,QAAQ,WAAU;AACvC,MAAI,MAAM;AACR,QAAI,CAAC,KAAK;AACR,aAAO,cAAc,MAAM,OAAO,OAAO;AAC3C,WAAO,KAAK,KAAK,OAAO,OAAO;AAAA,EAChC;AACH;AACA,SAAS,cAAc,MAAM,OAAO,UAAU,CAAA,GAAI;AAChD,QAAM,cAAc,IAAI,KAAK;AAC7B,QAAM,gBAAgB,IAAI,CAAA,CAAE;AAC5B,cAAY,MAAM;AAChB,kBAAc,QAAQ,YAAY,QAAQ,CAAA,IAAK,sBAAsB,KAAK;AAAA,EAC9E,CAAG;AACD,QAAMD,SAAQ,KAAK,KAAK,cAAc,OAAO,OAAO;AACpD,QAAM,eAAe,CAAC,MAAM;AAC1B,IAAAA,OAAM,MAAM,CAAC;AAAA,EACjB,CAAG;AACU,qBAAqB;AAYhC,SAAOA;AACT;ACeA,MAAM,sBAAsB;AAAA,EAC1B;AACF;AAAA,CACoC;AAAA,EAClC,eAAe,CAAC,GAAG,qBAAqB,GAAG,eAAe;AAC5D;AAMA,SAAS,WAAW,OAAO,SAAS;AAClC,QAAM,EAAE,OAAO,eAAe,GAAG,KAAI,IAAK;AAC1C,SAAO,QAAQ;AAAA,IACb;AAAA,IACA;AAAA;AAAA,IAEA,WAAW;AAAA,EACf,GAAK;AAAA,IACD,GAAG;AAAA,IACH,UAAU,GAAG;AACX,YAAM,QAAQ,WAAW,EAAE,GAAG,EAAE,UAAW,CAAA;AAC3C,aAAO,EAAE;AACT,aAAO;AAAA;AAAA,QAEL,GAAG;AAAA,QACH,MAAM;AAAA,MACd;AAAA,IACK;AAAA,EACL,CAAG;AACH;AC9EoC,CAAC,WAAW,EAAE,OAAO,KAAI,CAAE,CAAC;ACGhE,MAAA,oBAAe,iCAAiB;AAAA,EAC9B,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM,SAAS;AACb,UAAM,OAA4B,QAAQ,WAAW;AAGrD;AAAA;AAAA,MAEE,MAAM,WAAU,EAAG,OAAO,SAAS,SAAS;AAAA,IAClD;AACI,YAAQ,OAAO,IAAI,IAAI;AAAA,EAqBxB;AACH,CAAC;ACrCD,SAAS,cAAc,OAAO,IAAI;AAC5B,MAAA;AACJ,MAAI,cAAc;AACZ,QAAA,gBAAgB,CAAC,aAAa;AAC9B,QAAA,mBAAmB,oBAAoB,UAAU;AAC7C,YAAA,IAAI,MAAM,kBAAkB;AAAA,IACpC;AAAA,EAAA;AAEE,MAAA;AACJ,MAAI,KAAK,cAAc;AACf,UAAA,qBAAqB,KAAK,qBAAqB,WAAW;AAChE,QAAI,oBAAoB;AACtB,YAAM,IAAI;IAAmB,OACxB;AACL,cAAQ,KAAK,8CAA8C;AAAA,IAC7D;AAAA,EACF;AACA,QAAM,sBAAsB,MAAM;AAC5B,QAAA,OAAO,oBAAoB,QAAQ;AAC/B,YAAA,WAAW,IAAI;AACrB,UAAI,aAAa,QAAQ;AAChB,eAAA;AAAA,MACT;AAAA,IACF;AACO,WAAA;AAAA,EAAA;AAEF,SAAA;AAAA,IACL,KAAK,MAAM;AACT,YAAM,YAAY;AAClB,UAAI,cAAc,QAAQ;AAClB,cAAA,IAAI,MAAM,0BAA0B;AAAA,MAC5C;AACO,aAAA;AAAA,IACT;AAAA,IACA,QAAQ,MAAM;AACZ,aAAO,oBAAoB;AAAA,IAC7B;AAAA,IACA,KAAK,CAAC,UAAU,YAAY;AAC1B,UAAI,CAAC,SAAS;AACZ,sBAAc,QAAQ;AAAA,MACxB;AACkB,wBAAA;AACJ,oBAAA;AAAA,IAChB;AAAA,IACA,OAAO,MAAM;AACO,wBAAA;AACJ,oBAAA;AAAA,IAChB;AAAA,IACA,MAAM,CAAC,UAAU,aAAa;AAC5B,oBAAc,QAAQ;AACJ,wBAAA;AACd,UAAA;AACF,eAAO,MAAM,IAAI,IAAI,UAAU,QAAQ,IAAI;MAAS,UACpD;AACA,YAAI,CAAC,aAAa;AACE,4BAAA;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IACA,MAAM,UAAU,UAAU,UAAU;AAChB,wBAAA;AAClB,YAAM,YAAY,MAAM;AACJ,0BAAA;AAAA,MAAA;AAEpB,YAAM,UAAU,MAAM,oBAAoB,WAAW,YAAY;AACjE,oBAAc,IAAI,OAAO;AACrB,UAAA;AACF,cAAM,IAAI,MAAM,IAAI,IAAI,UAAU,QAAQ,IAAI;AAC9C,YAAI,CAAC,aAAa;AACE,4BAAA;AAAA,QACpB;AACA,eAAO,MAAM;AAAA,MAAA,UACb;AACA,sBAAc,OAAO,OAAO;AAAA,MAC9B;AAAA,IACF;AAAA,EAAA;AAEJ;AACA,SAAS,gBAAgB,cAAc,IAAI;AACzC,QAAM,WAAW,CAAA;AACV,SAAA;AAAA,IACL,IAAI,KAAK,OAAO,IAAI;AACd,UAAA,CAAC,SAAS,GAAG,GAAG;AACT,iBAAA,GAAG,IAAI,cAAc,EAAE,GAAG,aAAa,GAAG,MAAM;AAAA,MAC3D;AACA,eAAS,GAAG;AACZ,aAAO,SAAS,GAAG;AAAA,IACrB;AAAA,EAAA;AAEJ;AACA,MAAME,gBAAc,OAAO,eAAe,cAAc,aAAa,OAAO,SAAS,cAAc,OAAO,OAAO,WAAW,cAAc,SAAkD,CAAA;AAC5L,MAAM,YAAY;AACOA,cAAY,SAAS,MAAMA,cAAY,SAAS,IAAI,gBAAgB;AAG7F,MAAM,mBAAmB;AACzB,MAAM,gBAAgBA,cAAY,gBAAgB,MAAMA,cAAY,gBAAgB,wBAAwB,IAAI;AAChH,SAAS,aAAa,WAAW;AAC/B,QAAM,WAAW,CAAA;AACjB,aAAW,gBAAgB,eAAe;AACxC,UAAM,WAAW;AACjB,QAAI,UAAU;AACZ,eAAS,KAAK,QAAQ;AAAA,IACxB;AAAA,EACF;AACA,QAAM,UAAU,MAAM;AACpB,eAAW,YAAY,UAAU;AACtB;IACX;AAAA,EAAA;AAEF,MAAI,YAAY;AAChB,MAAI,aAAa,OAAO,cAAc,YAAY,WAAW,WAAW;AAC1D,gBAAA,UAAU,MAAM,CAAC,UAAU;AAC7B;AACF,YAAA;AAAA,IAAA,CACP;AAAA,EACH;AACO,SAAA,CAAC,WAAW,OAAO;AAC5B;ACrHA,MAAM,kBAAkB,CAAC,OAAO,UAAU;AACxC,SAAO,MAAM,KAAK,QAAQ,oBAAoB,IAAI,EAAE,QAAQ,gBAAgB,IAAI,EAAE,QAAQ,SAAS,CAAC,MAAM;;AAAA,wBAAM,OAAO,EAAE,MAAM,CAAC,CAAC,MAAvB,mBAA0B,eAAc;AAAA,GAAE;AACtJ;AACO,MAAMC,qBAAmB,CAAC,YAAY,aAAa;AACxD,QAAM,eAAe,WAAW,MAAM,QAAQ,KAAK,CAAC;;AAAM,oBAAE,eAAF,mBAAc,aAAY,WAAW,UAAU;AAAA,GAAI;AAC7G,QAAM,SAAS,aAAY,6CAAc,KAAK,SAAQ,gBAAgB,gBAAgB,WAAW,OAAO,YAAY;AACpH,SAAO,OAAO,WAAW,aAAa,OAAO,WAAW,KAAK,IAAI;AACnE;AACO,MAAM,kBAAkB,CAAC,OAAO,aAAa;AAClD,SAAO,EAAE,SAAS,MAA0F;AAC9G;AACO,SAASC,UAAQ,OAAO;AAC7B,SAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAC9C;ACaO,eAAe,cAAc,KAAK;AACf;AACtB,UAAM,qBAAqB;AAAA,MACzBC,aAAkB,EAAE,SAAQ,iCAAkB,GAAC,MAAM,WAAU,CAAE;AAAA,IACvE;AACI,WAAO,KAAK,CAAE,GAAE,GAAG,mBAAmB,SAAS,GAAG,EAAE,QAAO,CAAE;AAAA,EAC9D;AAYH;AC1BA,MAAe,UAAA;AAAA,EACb;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,4BAAuF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC1I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,gCAA2F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC9I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,8BAAyF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC5I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,6BAAwF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC3I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,+BAA0F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC7I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,6BAAwF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC3I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,2BAAsF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EACzI;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,+BAA0F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC7I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,iCAA4F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC/I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,2BAAiG,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EACpJ;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,mCAAyG,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC5J;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,mCAA8F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EACjJ;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,0BAA2F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC9I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,4BAAwG,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC3J;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,4BAA+F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAClJ;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,8BAAyF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC5I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,8BAAyF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC5I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,8BAAyF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC5I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,8BAAyF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC5I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,8BAAyF,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC5I;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,4BAAwG,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC3J;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,4BAAwG,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EAC3J;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,mCAA8F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EACjJ;AAAA,EACD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,MAAM,OAAO,mCAA8F,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAAA,EACjJ;AACH;ACzIO,MAAM,UAAU,CAAC,WAAW,OAAO,UAAU;AAClD,UAAQ,UAAU,OAAO,CAAA,IAAK;AAC9B,SAAO,EAAE,SAAS;;AAAM,mBAAQ,EAAE,WAAW,OAAO,KAAK,KAAI,WAAM,YAAN;AAAA,IAAiB;AAChF;AACA,SAAS,iBAAiB,OAAO;AAC/B,QAAM,UAAS,+BAAO,KAAK,QAAO,MAAM,KAAK,QAAQ,oBAAoB,IAAI,EAAE,QAAQ,gBAAgB,IAAI,EAAE,QAAQ,SAAS,CAAC,MAAM;;AAAA,wBAAM,OAAO,EAAE,MAAM,CAAC,CAAC,MAAvB,mBAA0B,eAAc;AAAA,GAAE;AAC/K,SAAO,OAAO,WAAW,aAAa,OAAO,KAAK,IAAI;AACxD;AACO,SAAS,eAAe,IAAI,MAAM;AACvC,MAAI,OAAO,QAAQ,SAAS,gBAAgB;AAC1C,WAAO;AAAA,EACR;AACD,MAAI,iBAAiB,EAAE,MAAM,iBAAiB,IAAI,GAAG;AACnD,WAAO;AAAA,EACR;AACD,QAAM,oBAAoB,GAAG,QAAQ;AAAA,IACnC,CAAC,MAAMC,WAAK;;AAAK,kBAAK,cAAc,KAAK,WAAW,cAAY,gBAAK,QAAQA,MAAK,MAAlB,mBAAqB,eAArB,mBAAiC;AAAA;AAAA,EACrG;AACE,MAAI,mBAAmB;AACrB,WAAO;AAAA,EACR;AACD,SAAO;AACT;ACrBA,MAAe,iBAAA;AAAA,EACb,eAAe,IAAI,MAAM,eAAe;;AACtC,UAAM,UAAU;AAChB,UAAM,aAAW,eAAA,EAAY,YAAZ,mBAAqB,uBAAsB;AAC5D,QAAI,WAAW,iBAAiB;AAChC,UAAM,yBAAyB,OAAO,GAAG,KAAK,gBAAgB,aAAa,GAAG,KAAK,YAAY,IAAI,IAAI,IAAI,GAAG,KAAK;AAC/G,QAAA,CAAC,YAAY,QAAQ,MAAM,2BAA2B,SAAS,eAAe,IAAI,IAAI,GAAG;AAC3F,iBAAW,EAAE,MAAM,GAAG,KAAK,EAAE;AAAA,IAC/B;AACI,QAAA,GAAG,SAAS,KAAK,MAAM;AACzB,UAAI,KAAK,QAAQ,CAAC,GAAG,MAAM;AACzB,eAAO,EAAE,MAAM,GAAG,KAAK,EAAE;AAAA,MAC3B;AACA,UAAI,GAAG,MAAM;AACJ,eAAA,EAAE,IAAI,GAAG,MAAM,KAAK,+BAA+B,GAAG,IAAI,GAAG;MACtE;AACO,aAAA;AAAA,IACT;AACA,UAAM,gBAAgB,CAAC,UAAU,CAAC,EAAE,MAAM,KAAK,kBAAkBC;AACjE,UAAM,aAAa,cAAc,IAAI,KAAK,cAAc,EAAE,IAAI,2BAA2B;AAClF,WAAA,IAAI,QAAQ,CAACC,aAAY;AACtB,cAAA,MAAM,SAAS,YAAY,YAAY;AAC7C,cAAM,IAAI,QAAQ,CAACC,cAAa,WAAWA,WAAU,CAAC,CAAC;AACvD,YAAI,GAAG,MAAM;AACA,qBAAA,EAAE,IAAI,GAAG,MAAM,KAAK,+BAA+B,GAAG,IAAI,GAAG;QAC1E;AACA,QAAAD,SAAQ,QAAQ;AAAA,MAAA,CACjB;AAAA,IAAA,CACF;AAAA,EACH;AACF;AACA,SAAS,+BAA+B,UAAU;AAC5C,MAAA;AACI,UAAA,OAAgB,SAAA,cAAc,QAAQ;AAC5C,QAAI,MAAM;AACR,aAAO,OAAO,WAAW,iBAAiB,IAAI,EAAE,eAAe,IAAI,OAAO,WAAW,iBAA0B,SAAA,eAAe,EAAE,gBAAgB;AAAA,IAClJ;AAAA,EAAA,QACM;AAAA,EACR;AACO,SAAA;AACT;AC3CA,MAAM,sBAAsB;AAAA,EAC1B,UAAU;AAAA,EACV,oBAAoB;AACtB;AACA,MAAe,gBAAA;AAAA,EACf,GAAG;AAAA,EACH,GAAG;AACH;ACJE,MAAQ,WAAA,0CAAgB,OAAA,OAAA;;AAAA,MAAA,QAAA;AACtB,MAAA,GAAA,QAAA,SAAA,mBAAA,WAAA;AACF;AAAA,EACA;AACyB,aAAA;AACJ,YAAA;AACrB,kBAAqB,CAAA,QAAA,SAAA,IAAAE,aAAA,MAAA,QAAA,QAAA,GAAA,KAAA,SAAA,EAAA,CAAA,CAAA,GAAA,SAAA,MAAA,QAAA,aAAA;AACnB,MAAA,WAAA,MAAA;AACF;AAAA,EACA;AACS;AACT,WAAA;AAAA,EACA;;ACZA,MAAA,0BAA4C,0CAAA,OAAA,OAAA;AAC1C;AACF;AAAA,EACA;;ACLK,MAAM,mBAAmB;AAAA,EAC9B;AAAA,EACA;AACF;AACO,MAAM,kBAAkB,CAAA;ACsBC,MACxB,SAAA,iCAAA;AAAA,EACN,MAAS;AAAA,EACT;EACM,MAAA,MAAA,SAA8B;;AAAA,QAAA,QAAA;AAClC,QAAI,kDAAsC,IAAA;AAC1B,QAAA,cAAA,YAAA,CAAA,WAAA,SAAA,GAAA,GAAA;AAChB,oBAAA;AAAA,IACA;AACA,UAAM,YAAS,mBAAuB,YAAvB,uCAAuB,gBAAY,oBAAA,UAAA;AAC9C,UAAAC,YAAA,mBAAA,WAAA,uCAAA,aAAA;AACJ,QAAA;AAA4B,UACvB,SAAAC,eAAA;AAAA,MACH,GAAgB;AAAA,MACd,gBAA6B,CAAA,IAAA,MAAA,kBAAA;AACX,YAAA,SAAA,gBAAA;AAChB,0BAAA;AACF;AAAA,QACA;AACS,YAAA,8BAAyB;AAC5B,iBAAA,QAAA,+BAAuC;AACnC,cAAA,uBAAe,SAAiB,SAAA;AAC9B,kBAAA,QAAA,OAAA,WAAA,MAAA;AACN;AACD,cAAA,SAAA,QAAA,oBAAA;AAAA,YAAA,CACH;AAAA,UACA;AACF,iBAAA,cAAA,eAAA,IAAA,gBAAA,iBAAA,aAAA;AAAA,QACF;AAAA,MACA;AAAA,MACA;AAAA,MACD,QAAAD;AAAA,IACD,CAAA;AAIA,YAAsB,OAAA,IAAA,MAAA;AACf,UAAA,gBAAW,WAAc,OAAA,aAAA,KAAA;AAC9B,WAAA,UAAsB,CAAA,KAAA,SAAA;AACvB,oBAAA,QAAA;AAAA,IACD,CAAA;AACE,WAAK,eAAoB,QAAA,OAAA,OAAA,kBAAA,iBAAA;AAAA,MAC1B,KAAA,MAAA,cAAA;AAAA,IACD,CAAM;AACN,UAAM,aAAoB,QAAO,WAAA;AACjC,UAAM,oBAAyB,OAAA,aAAA,KAAA;AACtB,UAAA,mBAA4B,MAAA;AACrC,aAAA,QAAA,OAAA,aAAA;AAAA,IACA;AACO,YAAA,KAAA,eAAwB,gBAAA;AACzB,WAAA,UAAW,CAAC,IAAG,SAAA;;AACA,YAAAE,OAAAnB,MAAA,GAAA,QAAA,CAAA,MAAA,gBAAAA,IAAA,eAAA,gBAAAmB,IAAA,eAAAC,OAAAC,MAAA,KAAA,QAAA,CAAA,MAAA,gBAAAA,IAAA,eAAA,gBAAAD,IAAA,UAAA;AACnB;MACD;AAAA,IACD,CAAA;AACW,UAAA,QAAA,CAAA;AACF,eAAA,OAAA,cAA2B;AAAA,aAC3B,eAAa,OAAS,KAAA;AAAA,QAC5B,KAAA,MAAA,OAAA,MAAA,GAAA;AAAA,MAAA,CACH;AAAA,IACQ;AACA,YAAA,SAAA,gBAAqC,KAAA;AAAA,0BAClC,QAAA,eAAA;AAAA,MACT,QAAQ,CAAA;AAAA,MACV,OAAA,CAAA;AAAA,IACA;AACmC,aAAY;AAC7C,QAAA,GAAA,aAAiB,eAAjB,mBAAiB,gBAA8B;AAC7C,aAAA,UAAe,OAAA,IAAA,OAAA,YAAA;AACf,eAA+D,QAAA;AAIvD,YAAA,SAAA;AACR,gBAAA,QAAA,SAAA,kBAAA;AAAA,QAC0B;AACxB,aAAA,mCAAA,UAAA,GAAA;AACF;AAAA,QACI;AACF,YAAA,GAAA,QAAc,WAAA,GAAA;AAA2C,gBAC3C,QAAA,eAAA,MAAA,UAAAE,cAAA;AAAA,YACZ,YAAO;AAAA,YACP,OAAA;AAAA,YACA,eAAM,mBAAA,GAAA,QAAA;AAAA,YAAA;cAEN,MAAA,GAAA;AAAA,YACC;AAAA,UAC4B,CAAA,CAAA,CAAA;AAAA,QAC/B,gCAA6B,GAAA,aAAiB,YAAG;AACnD,gBAAA,QAAA,eAAA,MAAA,WAAA,GAAA,YAAA,GAAA,CAAA;AAAA,QACD;AAAA,MAAA,CACH;AAAA,IACI;AACF,QAAA;AACQ,UAAA,MAAA;AACR;AAAA,QAAA,CAAA,QAAA,SAAA,IAAAN,aAAA,MAAA,OAAA,KAAA,UAAA,CAAA,GAAA,MAAA,QAAA,UAAA;AAAA;AAAA;;eAEe,SAAA,IAAAA,aAAA,MAAA,OAAA,QAAA,CAAA,GAAA,MAAA,QAAA,UAAA;AAAA;AAAA,IACf,SAAA,QAAA;AACF,MAAA,CAAA,QAAA,SAAA,IAAAA,aAAA,MAAA,QAAA,eAAA,MAAA,UAAA,MAAA,CAAA,CAAA,GAAA,MAAA,QAAA,UAAA;AAAA,IACA;AACiB,UAAA,uBAAA,OAAA,aAAA;AACS;AACxB,SAAA,aAAS,eAAT,mBAAoB,eAAS;AAC/B,aAAA,EAAA,SAAA,EAAA,OAAA;IACM;AACC,UAAA,gBAAkB,QAAa,QAAA,MAAA;AAC9B,WAAA,kBAAiB,IAAoB,SAAA;;AACxC,YAAA,QAAgB,SAAO,oBAAA;AACtB,SAAA,OAAA;AACF,UAAA,QAAiB,eAAA,iBAAA,CAAA,WAAA,GAAA,KAAA,MAAA,GAAA;AACnB,WAAA,KAAA,SAAA;AAAA,MACA;AAC0B,cAAS,wBAA2B;AACtD,UAAA,GAAAhB,MAAA,QAAA,eAAA,gBAAAA,IAAA,gBAAwC;AACnC,cAAA,oBAAyB,oBAAA,IAAA,CAAA,GAAA,kBAAA,GAAA,QAAA,YAAA,MAAA,CAAA;AAC5B,mBAAA,aAAA,GAAA;AACN,gBAA0B,sBAAA,UAAA,KAAA;AACxB,cAAA,CAAA,qBAAA;AACF;AAAA,UACW;AACT,qBAAAM,UAAkBI,UAAS,mBAAA,GAAA;AAC7B,8BAAA,IAAAJ,MAAA;AAAA,UACF;AAAA,QACA;;AAEE,6BAA8B,MAAA,QAAA,eAAA,MAAA,cAAA,GAAA,IAAA,CAAA;AACjB,cAAA,WAAA;AACL,uBAAA,OAAyB,WAAA,eAAM;AACjC,kBAAA,WAAA,cAAyB,GAAA,GAAA;AACpB,kCAAA,IAAA,GAAA;AAAA,cACL,OAAA;AACF,kCAAA,OAAA,GAAA;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACA;AACQ,mBAAAA,UAAA,mBAA8B;AACpC,gBAAiB,aAAA,OAAAA,WAAA,WAAA,QAAA,YAAA,MAAAA,MAAA,KAAA,QAAAa,MAAA,gBAAAb,YAAA,gBAAAa,IAAA,sBAAA,KAAA,CAAA,MAAA,EAAA,WAAA,MAAAb;AACf,cAAA,CAAA,YAAqB;AAIvB,kBAAA,IAAA,MAAA,8BAAAA,MAAA,IAAA;AAAA,UACM;AACN,gBAAkF,SAAA,MAAA,QAAA,eAAA,MAAA,WAAA,IAAA,IAAA,CAAA;AAC5E;AACI,gBAAA,WAAA,2BAA+B,OAAA;AAAA,oBACvB,SAAA,UAAAgB,cAAA;AAAA,gBACZ,YAAA;AAAA,gBACD,eAAA,mBAAA,UAAA;AAAA,cACD,CAAA;AACO,oBAAA,QAAA,eAAA,MAAA,UAAA,MAAA,CAAA;AACT,qBAAA;AAAA,YACF;AAAA,UACA;AACE,cAAA,WAAA,MAAA;AACF;AAAA,UACI;AACK,cAAA,UAAA,WAAA,OAAA;AACT,mBAAA;AAAA,UACF;AAAA,QACF;AAAA,MACD;AAAA,IACD,CAAA;AACE,WAAA,QAAe,YAAA;AACT,aAAA;AACP,YAAA,QAAA,SAAA,kBAAA;AAAA,IACD,CAAQ;AACF,YAAA,MAAA,SAAA,eAAA,YAAA;AACF,UAAA;AACE,YAAA,UAAA,sBAA4B;AAC9B,+BAAA,OAAA;AAAA,QACA;AAAqB,cAChB,OAAA,QAAA;AAAA,UACH,GAAO;AAAA,UACR,OAAA;AAAA,QACD,CAAO;eACA,QAAQ,iBAAA,cAAA;AAAA,MACf,SAAc,QAAA;AAChB,cAAA,QAAA,eAAA,MAAA,UAAA,MAAA,CAAA;AAAA,MACD;AAAA,IACD,CAAA;AACF,WAAA,EAAA,SAAA,EAAA,OAAA;EACD;AACD,CAAe;ACtGC,SAAA,qBAAqB3B,OAAM,QAAQ;AACzB;AACtB,eAAa,EAAA,WAAW,iBAAiBA,KAAI,IAAI;AAAA,EACnD;AACF;AC9GA,MAAM,WAAW;AAAA,EACf,WAAW,CAAC,SAAS,YAAY,IAAI,KAAK,KAAK,OAAQ;AAAA,EACvD,iBAAiB,CAAC,SAAS,MAAM,IAAI,KAAK,UAAU,IAAI,KAAK,CAAC,KAAK,UAAU,OAAO,KAAK,UAAU,WAAW,OAAO,KAAK,UAAU,KAAK,KAAK,KAAK;AAAA,EACnJ,UAAU,CAAC,SAAS,MAAM,IAAI,KAAK,CAAC,KAAK,UAAU,OAAO,KAAK,UAAU,WAAW,OAAO,KAAK,UAAU,KAAK,KAAK,KAAK;AAAA,EACzH,YAAY,CAAC,SAAS,MAAM,IAAI,KAAK,UAAU,IAAI,KAAK,KAAK;AAAA,EAC7D,iBAAiB,CAAC,SAAS,WAAW,IAAI,KAAK,UAAU,IAAI,KAAK,MAAM,IAAI;AAAA,EAC5E,KAAK,CAAC,SAAS,MAAM,IAAI,KAAK,KAAK;AAAA,EACnC,UAAU,CAAC,SAAS,WAAW,IAAI,KAAK,MAAM,IAAI;AACpD;AAIA,MAAA,mCAAe,iCAAiB;AAAA,EAC9B,MAAM;AAAA,EACN,QAAQ;AACN,eAAW,WAAW,UAAU;AAC9B,2BAAqB,SAAS,SAAS,OAAO,CAAC;AAAA,IAChD;AAAA,EACF;AACH,CAAC;ACvBD,MAAA,WAAe,qBAAqB,MAAM;;GAAuH,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;ACC1M,MAAM,uBAAuB;AAAA,EAC3B,CAAC,QAAQ,QAAQ;AAEnB;AAEA,MAAA,+BAAe,iCAAiB;AAAA,EAC9B,MAAM;AAAA,EACN,MAAO,SAAS;AACd,eAAW,CAACA,OAAM,SAAS,KAAK,sBAAsB;AACpD,cAAQ,OAAO,UAAUA,OAAM,SAAS;AACxC,cAAQ,OAAO,UAAU,SAASA,OAAM,SAAS;AAAA,IAClD;AAAA,EACF;AACH,CAAC;ACfD;AAAA;AAAA;AAAA;AAAA;AASA,MAAM,YAAY;AAClB,IAAI;AACJ,IAAI;AACJ,IAAK,QAAQ,IAAI,aAAa,aAAe;AAkB7C,MAAM,UAAU;AAEhB,SAAS4B,SAAO,YAAY,MAAM;AAC9B,MAAI,KAAK,WAAW,KAAK,SAAS,KAAK,CAAC,CAAC,GAAG;AACxC,WAAO,KAAK,CAAC;AAAA,EACjB;AACA,MAAI,CAAC,QAAQ,CAAC,KAAK,gBAAgB;AAC/B,WAAO,CAAA;AAAA,EACX;AACA,SAAO,QAAQ,QAAQ,SAAS,CAAC,OAAO,eAAe;AACnD,WAAO,KAAK,eAAe,UAAU,IAAI,KAAK,UAAU,IAAI;AAAA,EAAA,CAC/D;AACL;AACA,MAAM,aAAa,CAAC5B,OAAM,YAAY,UAAU,CAAC,YAAY,OAAOA,KAAI,IAAI,OAAO,IAAIA,KAAI;AAC3F,MAAM,yBAAyB,CAAC,QAAQ,KAAK,WAAW,sBAAsB,EAAE,GAAG,QAAQ,GAAG,KAAK,GAAG,OAAQ,CAAA;AAC9G,MAAM,wBAAwB,CAAC,SAAS,KAAK,UAAU,IAAI,EACtD,QAAQ,WAAW,SAAS,EAC5B,QAAQ,WAAW,SAAS,EAC5B,QAAQ,WAAW,SAAS;AACjC,MAAM,WAAW,CAAC,QAAQ,OAAO,QAAQ,YAAY,SAAS,GAAG;AACjE,MAAM,SAAS,CAAC,QAAQ,aAAa,GAAG,MAAM;AAC9C,MAAM,WAAW,CAAC,QAAQ,aAAa,GAAG,MAAM;AAChD,MAAM,gBAAgB,CAAC,QAAQ,cAAc,GAAG,KAAK,OAAO,KAAK,GAAG,EAAE,WAAW;AACjF,MAAM,SAAS,OAAO;AACtB,IAAI;AACJ,MAAM,gBAAgB,MAAM;AAExB,SAAQ,gBACH,cACG,OAAO,eAAe,cAChB,aACA,OAAO,SAAS,cACZ,OAGI,OAAO,WAAW,cACd,SACA,CAAC;AAC/B;AACA,SAAS,WAAW,SAAS;AACzB,SAAO,QACF,QAAQ,MAAM,MAAM,EACpB,QAAQ,MAAM,MAAM,EACpB,QAAQ,MAAM,QAAQ,EACtB,QAAQ,MAAM,QAAQ;AAC/B;AACA,MAAM,iBAAiB,OAAO,UAAU;AACxC,SAAS,OAAO,KAAK,KAAK;AACf,SAAA,eAAe,KAAK,KAAK,GAAG;AACvC;AASA,MAAM,UAAU,MAAM;AACtB,MAAM,aAAa,CAAC,QAAQ,OAAO,QAAQ;AAC3C,MAAM,WAAW,CAAC,QAAQ,OAAO,QAAQ;AACzC,MAAM,YAAY,CAAC,QAAQ,OAAO,QAAQ;AAC1C,MAAM,WAAW,CAAC,QAAQ,OAAO,QAAQ;AAEzC,MAAM,WAAW,CAAC,QAAQ,QAAQ,QAAQ,OAAO,QAAQ;AAEzD,MAAM,YAAY,CAAC,QAAQ;AAChB,SAAA,SAAS,GAAG,KAAK,WAAW,IAAI,IAAI,KAAK,WAAW,IAAI,KAAK;AACxE;AACA,MAAM,iBAAiB,OAAO,UAAU;AACxC,MAAM,eAAe,CAAC,UAAU,eAAe,KAAK,KAAK;AACzD,MAAM,gBAAgB,CAAC,QAAQ;AACvB,MAAA,CAAC,SAAS,GAAG;AACN,WAAA;AACL,QAAA,QAAQ,OAAO,eAAe,GAAG;AAChC,SAAA,UAAU,QAAQ,MAAM,gBAAgB;AACnD;AAEA,MAAM,kBAAkB,CAAC,QAAQ;AAC7B,SAAO,OAAO,OACR,KACA,QAAQ,GAAG,KAAM,cAAc,GAAG,KAAK,IAAI,aAAa,iBACpD,KAAK,UAAU,KAAK,MAAM,CAAC,IAC3B,OAAO,GAAG;AACxB;AACA,SAAS,KAAK,OAAO,YAAY,IAAI;AACjC,SAAO,MAAM,OAAO,CAAC,KAAK,MAAMiB,WAAWA,WAAU,IAAI,MAAM,OAAO,MAAM,YAAY,MAAO,EAAE;AACrG;AACA,MAAM,QAAQ;AACd,SAAS,kBAAkB,QAAQ,QAAQ,GAAG,MAAM,OAAO,QAAQ;AACzD,QAAA,QAAQ,OAAO,MAAM,OAAO;AAClC,MAAI,QAAQ;AACZ,QAAM,MAAM,CAAA;AACZ,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC1B,aAAA,MAAM,CAAC,EAAE,SAAS;AAC3B,QAAI,SAAS,OAAO;AACP,eAAA,IAAI,IAAI,OAAO,KAAK,IAAI,SAAS,MAAM,OAAO,KAAK;AACpD,YAAA,IAAI,KAAK,KAAK,MAAM;AACpB;AACJ,cAAM,OAAO,IAAI;AACjB,YAAI,KAAK,GAAG,IAAI,GAAG,IAAI,OAAO,IAAI,OAAO,IAAI,EAAE,MAAM,CAAC,MAAM,MAAM,CAAC,CAAC,EAAE;AAChE,cAAA,aAAa,MAAM,CAAC,EAAE;AAC5B,YAAI,MAAM,GAAG;AAEH,gBAAA,MAAM,SAAS,QAAQ,cAAc;AACrC,gBAAA,SAAS,KAAK,IAAI,GAAG,MAAM,QAAQ,aAAa,MAAM,MAAM,KAAK;AACnE,cAAA,KAAK,WAAW,IAAI,OAAO,GAAG,IAAI,IAAI,OAAO,MAAM,CAAC;AAAA,QAAA,WAEnD,IAAI,GAAG;AACZ,cAAI,MAAM,OAAO;AACP,kBAAA,SAAS,KAAK,IAAI,KAAK,IAAI,MAAM,OAAO,UAAU,GAAG,CAAC;AAC5D,gBAAI,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC;AAAA,UAC1C;AACA,mBAAS,aAAa;AAAA,QAC1B;AAAA,MACJ;AACA;AAAA,IACJ;AAAA,EACJ;AACO,SAAA,IAAI,KAAK,IAAI;AACxB;AACA,SAAS,YAAYY,OAAM;AACvB,MAAI,UAAUA;AACd,SAAO,MAAM,EAAE;AACnB;AAEA,SAAS,KAAK,KAAK,KAAK;AAChB,MAAA,OAAO,YAAY,aAAa;AACxB,YAAA,KAAK,eAAe,GAAG;AAE/B,QAAI,KAAK;AACG,cAAA,KAAK,IAAI,KAAK;AAAA,IAC1B;AAAA,EACJ;AACJ;AACA,MAAM,YAAY,CAAA;AAClB,SAAS,SAAS,KAAK;AACf,MAAA,CAAC,UAAU,GAAG,GAAG;AACjB,cAAU,GAAG,IAAI;AACjB,SAAK,GAAG;AAAA,EACZ;AACJ;AAcA,SAAS,gBAAgB;AACf,QAAA,6BAAa;AACnB,QAAM,UAAU;AAAA,IACZ;AAAA,IACA,GAAG,OAAO,SAAS;AACT,YAAA,WAAW,OAAO,IAAI,KAAK;AACjC,YAAM,QAAQ,YAAY,SAAS,KAAK,OAAO;AAC/C,UAAI,CAAC,OAAO;AACR,eAAO,IAAI,OAAO,CAAC,OAAO,CAAC;AAAA,MAC/B;AAAA,IACJ;AAAA,IACA,IAAI,OAAO,SAAS;AACV,YAAA,WAAW,OAAO,IAAI,KAAK;AACjC,UAAI,UAAU;AACV,iBAAS,OAAO,SAAS,QAAQ,OAAO,MAAM,GAAG,CAAC;AAAA,MACtD;AAAA,IACJ;AAAA,IACA,KAAK,OAAO,SAAS;AACjB,OAAC,OAAO,IAAI,KAAK,KAAK,CAAA,GACjB,QACA,IAAI,CAAA,YAAW,QAAQ,OAAO,CAAC;AACpC,OAAC,OAAO,IAAI,GAAG,KAAK,CAAC,GAChB,MAAM,EACN,IAAI,CAAA,YAAW,QAAQ,OAAO,OAAO,CAAC;AAAA,IAC/C;AAAA,EAAA;AAEG,SAAA;AACX;AAEA,MAAM,uBAAuB,CAAC,QAAQ,CAAC,SAAS,GAAG,KAAK,QAAQ,GAAG;AAEnE,SAAS,SAAS,KAAK,KAAK;AAExB,MAAI,qBAAqB,GAAG,KAAK,qBAAqB,GAAG,GAAG;AAClD,UAAA,IAAI,MAAM,eAAe;AAAA,EACnC;AACA,QAAM,QAAQ,CAAC,EAAE,KAAK,IAAK,CAAA;AAC3B,SAAO,MAAM,QAAQ;AACjB,UAAM,EAAE,KAAAC,MAAK,KAAAC,SAAQ,MAAM;AAC3B,WAAO,KAAKD,IAAG,EAAE,QAAQ,CAAO,QAAA;AACxB,UAAA,qBAAqBA,KAAI,GAAG,CAAC,KAAK,qBAAqBC,KAAI,GAAG,CAAC,GAAG;AAIlEA,aAAI,GAAG,IAAID,KAAI,GAAG;AAAA,MAAA,OAEjB;AAEK,cAAA,KAAK,EAAE,KAAKA,KAAI,GAAG,GAAG,KAAKC,KAAI,GAAG,EAAA,CAAG;AAAA,MAC/C;AAAA,IAAA,CACH;AAAA,EACL;AACJ;AC7OA;AAAA;AAAA;AAAA;AAAA;AAWA,SAAS,eAAe,MAAM,QAAQ,QAAQ;AACnC,SAAA,EAAE,MAAM,QAAQ;AAC3B;AACA,SAAS,eAAe,OAAO,KAAK,QAAQ;AAClC,QAAA,MAAM,EAAE,OAAO;AAId,SAAA;AACX;AAEA,MAAM,mBAAmB;AAAA,EACrB,mBAAmB;AAAA,EACnB,kBAAkB;AACtB;AAEA,MAAMC,iBAAe;AAAA,EACjB,CAAC,iBAAiB,iBAAiB,GAAG;AAC1C;AACA,SAAS,kBAAkBH,OAAM,QAAQ,MAAM;AAC3C,QAAM,MAAO,QAAQ,IAAI,aAAa,eAAgBD,SAAOI,eAAaH,KAAI,GAAS,GAAI,QAAQ,CAAG,CAAA,IAAIA;AAC1G,QAAM,UAAU,EAAE,SAAS,OAAO,GAAG,GAAG,MAAAA;AACxC,MAAI,KAAK;AACL,YAAQ,WAAW;AAAA,EACvB;AACO,SAAA;AACX;AAEA,MAAM,oBAAoB;AAAA;AAAA,EAEtB,gBAAgB;AAAA,EAChB,8BAA8B;AAAA,EAC9B,0CAA0C;AAAA,EAC1C,yBAAyB;AAAA,EACzB,iCAAiC;AAAA,EACjC,0BAA0B;AAAA,EAC1B,4BAA4B;AAAA,EAC5B,mBAAmB;AAAA,EACnB,4BAA4B;AAAA,EAC5B,uBAAuB;AAAA;AAAA,EAEvB,8BAA8B;AAAA,EAC9B,kCAAkC;AAAA,EAClC,6BAA6B;AAAA,EAC7B,6BAA6B;AAAA;AAAA,EAE7B,6BAA6B;AAAA;AAAA,EAE7B,8BAA8B;AAAA;AAAA;AAAA;AAAA,EAI9B,kBAAkB;AACtB;AAEA,MAAMI,kBAAgB;AAAA;AAAA,EAElB,CAAC,kBAAkB,cAAc,GAAG;AAAA,EACpC,CAAC,kBAAkB,4BAA4B,GAAG;AAAA,EAClD,CAAC,kBAAkB,wCAAwC,GAAG;AAAA,EAC9D,CAAC,kBAAkB,uBAAuB,GAAG;AAAA,EAC7C,CAAC,kBAAkB,+BAA+B,GAAG;AAAA,EACrD,CAAC,kBAAkB,wBAAwB,GAAG;AAAA,EAC9C,CAAC,kBAAkB,0BAA0B,GAAG;AAAA,EAChD,CAAC,kBAAkB,iBAAiB,GAAG;AAAA,EACvC,CAAC,kBAAkB,0BAA0B,GAAG;AAAA,EAChD,CAAC,kBAAkB,qBAAqB,GAAG;AAAA;AAAA,EAE3C,CAAC,kBAAkB,4BAA4B,GAAG;AAAA,EAClD,CAAC,kBAAkB,gCAAgC,GAAG;AAAA,EACtD,CAAC,kBAAkB,2BAA2B,GAAG;AAAA,EACjD,CAAC,kBAAkB,2BAA2B,GAAG;AAAA;AAAA,EAEjD,CAAC,kBAAkB,2BAA2B,GAAG;AAAA;AAAA,EAEjD,CAAC,kBAAkB,4BAA4B,GAAG;AACtD;AACA,SAAS,mBAAmBJ,OAAM,KAAK,UAAU,CAAA,GAAI;AACjD,QAAM,EAAE,QAAQ,UAAU,KAAA,IAAS;AACnC,QAAM,MAAO,QAAQ,IAAI,aAAa,eAChCD,UAAQ,YAAYK,iBAAeJ,KAAI,KAAK,IAAI,GAAI,QAAQ,CAAA,CAAG,IAC/DA;AACN,QAAM,QAAQ,IAAI,YAAY,OAAO,GAAG,CAAC;AACzC,QAAM,OAAOA;AACb,MAAI,KAAK;AACL,UAAM,WAAW;AAAA,EACrB;AACA,QAAM,SAAS;AACR,SAAA;AACX;AAEA,SAAS,eAAe,OAAO;AACrB,QAAA;AACV;AAGA,MAAM,cAAc;AACpB,MAAM,gBAAgB,CAAC,WAAW,YAAY,KAAK,MAAM;AAEzD,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,MAAM,UAAU;AAChB,MAAM,UAAU,OAAO,aAAa,IAAM;AAC1C,MAAM,UAAU,OAAO,aAAa,IAAM;AAC1C,SAAS,cAAc,KAAK;AACxB,QAAM,OAAO;AACb,MAAI,SAAS;AACb,MAAI,QAAQ;AACZ,MAAI,UAAU;AACd,MAAI,cAAc;AACZ,QAAA,SAAS,CAACZ,YAAU,KAAKA,OAAK,MAAM,WAAW,KAAKA,UAAQ,CAAC,MAAM;AACzE,QAAM,OAAO,CAACA,YAAU,KAAKA,OAAK,MAAM;AACxC,QAAM,OAAO,CAACA,YAAU,KAAKA,OAAK,MAAM;AACxC,QAAM,OAAO,CAACA,YAAU,KAAKA,OAAK,MAAM;AACxC,QAAM,YAAY,CAACA,YAAU,OAAOA,OAAK,KAAK,KAAKA,OAAK,KAAK,KAAKA,OAAK,KAAK,KAAKA,OAAK;AACtF,QAAMA,SAAQ,MAAM;AACpB,QAAM,OAAO,MAAM;AACnB,QAAM,SAAS,MAAM;AACrB,QAAM,aAAa,MAAM;AACzB,QAAM,SAAS,CAAC,WAAW,OAAO,MAAM,KAAK,KAAK,MAAM,KAAK,KAAK,MAAM,IAAI,UAAU,KAAK,MAAM;AAC3F,QAAA,cAAc,MAAM,OAAO,MAAM;AACvC,QAAM,cAAc,MAAM,OAAO,SAAS,WAAW;AACrD,WAAS,OAAO;AACE,kBAAA;AACV,QAAA,UAAU,MAAM,GAAG;AACnB;AACU,gBAAA;AAAA,IACd;AACI,QAAA,OAAO,MAAM,GAAG;AAChB;AAAA,IACJ;AACA;AACA;AACA,WAAO,KAAK,MAAM;AAAA,EACtB;AACA,WAAS,OAAO;AACR,QAAA,OAAO,SAAS,WAAW,GAAG;AAC9B;AAAA,IACJ;AACA;AACO,WAAA,KAAK,SAAS,WAAW;AAAA,EACpC;AACA,WAAS,QAAQ;AACJ,aAAA;AACD,YAAA;AACE,cAAA;AACI,kBAAA;AAAA,EAClB;AACS,WAAA,UAAU,SAAS,GAAG;AACb,kBAAA;AAAA,EAClB;AACA,WAAS,aAAa;AAClB,UAAM,SAAS,SAAS;AAExB,WAAO,WAAW,QAAQ;AACjB;IACT;AACc,kBAAA;AAAA,EAClB;AACO,SAAA;AAAA,IACH,OAAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAER;AAEA,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,oBAAoB;AAC1B,MAAM,iBAAiB;AACvB,SAAS,gBAAgB,QAAQ,UAAU,IAAI;AACrC,QAAA,WAAW,QAAQ,aAAa;AAChC,QAAA,QAAQ,cAAc,MAAM;AAC5B,QAAA,gBAAgB,MAAM,MAAM;AAC5B,QAAA,kBAAkB,MAAM,eAAe,MAAM,KAAA,GAAQ,MAAM,OAAO,GAAG,MAAM,MAAO,CAAA;AACxF,QAAM,WAAW;AACjB,QAAM,cAAc;AACpB,QAAM,WAAW;AAAA,IACb,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,UAAU;AAAA,IACV,MAAM;AAAA,EAAA;AAEV,QAAM,UAAU,MAAM;AAChB,QAAA,EAAE,QAAY,IAAA;AACpB,WAAS,UAAUY,OAAM,KAAK,WAAW,MAAM;AAC3C,UAAM,MAAM;AACZ,QAAI,UAAU;AACd,QAAI,UAAU;AACd,QAAI,SAAS;AACT,YAAM,MAAM,WAAW,eAAe,IAAI,UAAU,GAAG,IAAI;AACrD,YAAA,MAAM,mBAAmBA,OAAM,KAAK;AAAA,QACtC,QAAQ;AAAA,QACR;AAAA,MAAA,CACH;AACD,cAAQ,GAAG;AAAA,IACf;AAAA,EACJ;AACS,WAAA,SAASK,UAASC,OAAM,OAAO;AACpCD,aAAQ,SAAS;AACjBA,aAAQ,cAAcC;AAChB,UAAA,QAAQ,EAAE,MAAAA;AAChB,QAAI,UAAU;AACV,YAAM,MAAM,eAAeD,SAAQ,UAAUA,SAAQ,MAAM;AAAA,IAC/D;AACA,QAAI,SAAS,MAAM;AACf,YAAM,QAAQ;AAAA,IAClB;AACO,WAAA;AAAA,EACX;AACM,QAAA,cAAc,CAACA,aAAY;AAAA,IAASA;AAAAA,IAAS;AAAA;AAAA,EAAA;AAC1C,WAAA,IAAI,MAAM,IAAI;AACf,QAAA,KAAK,YAAY,MAAM,IAAI;AAC3B,WAAK,KAAK;AACH,aAAA;AAAA,IAAA,OAEN;AACD,gBAAU,kBAAkB,gBAAgB,gBAAgB,GAAG,GAAG,EAAE;AAC7D,aAAA;AAAA,IACX;AAAA,EACJ;AACA,WAAS,WAAW,MAAM;AACtB,QAAI,MAAM;AACV,WAAO,KAAK,kBAAkB,WAAW,KAAK,kBAAkB,SAAS;AACrE,aAAO,KAAK;AACZ,WAAK,KAAK;AAAA,IACd;AACO,WAAA;AAAA,EACX;AACA,WAAS,WAAW,MAAM;AAChB,UAAA,MAAM,WAAW,IAAI;AAC3B,SAAK,WAAW;AACT,WAAA;AAAA,EACX;AACA,WAAS,kBAAkB,IAAI;AAC3B,QAAI,OAAO,KAAK;AACL,aAAA;AAAA,IACX;AACM,UAAA,KAAK,GAAG,WAAW,CAAC;AACjB,WAAA,MAAM,MAAM,MAAM;AAAA,IACtB,MAAM,MAAM,MAAM;AAAA,IACnB,OAAO;AAAA,EAEf;AACA,WAAS,cAAc,IAAI;AACvB,QAAI,OAAO,KAAK;AACL,aAAA;AAAA,IACX;AACM,UAAA,KAAK,GAAG,WAAW,CAAC;AACnB,WAAA,MAAM,MAAM,MAAM;AAAA,EAC7B;AACS,WAAA,uBAAuB,MAAMA,UAAS;AACrC,UAAA,EAAE,YAAgBA,IAAAA;AACxB,QAAI,gBAAgB,GAA8B;AACvC,aAAA;AAAA,IACX;AACA,eAAW,IAAI;AACf,UAAM,MAAM,kBAAkB,KAAK,YAAa,CAAA;AAChD,SAAK,UAAU;AACR,WAAA;AAAA,EACX;AACS,WAAA,sBAAsB,MAAMA,UAAS;AACpC,UAAA,EAAE,YAAgBA,IAAAA;AACxB,QAAI,gBAAgB,GAA8B;AACvC,aAAA;AAAA,IACX;AACA,eAAW,IAAI;AACT,UAAA,KAAK,KAAK,kBAAkB,MAAM,KAAK,KAAS,IAAA,KAAK;AACrD,UAAA,MAAM,cAAc,EAAE;AAC5B,SAAK,UAAU;AACR,WAAA;AAAA,EACX;AACS,WAAA,eAAe,MAAMA,UAAS;AAC7B,UAAA,EAAE,YAAgBA,IAAAA;AACxB,QAAI,gBAAgB,GAA8B;AACvC,aAAA;AAAA,IACX;AACA,eAAW,IAAI;AACT,UAAA,MAAM,KAAK,YAAA,MAAkB;AACnC,SAAK,UAAU;AACR,WAAA;AAAA,EACX;AACS,WAAA,iBAAiB,MAAMA,UAAS;AAC/B,UAAA,EAAE,YAAgBA,IAAAA;AACxB,QAAI,gBAAgB,GAAgC;AACzC,aAAA;AAAA,IACX;AACA,eAAW,IAAI;AACT,UAAA,MAAM,KAAK,YAAA,MAAkB;AACnC,SAAK,UAAU;AACR,WAAA;AAAA,EACX;AACS,WAAA,sBAAsB,MAAMA,UAAS;AACpC,UAAA,EAAE,YAAgBA,IAAAA;AACxB,QAAI,gBAAgB,GAA8B;AACvC,aAAA;AAAA,IACX;AACA,eAAW,IAAI;AACf,UAAM,MAAM,kBAAkB,KAAK,YAAa,CAAA;AAChD,SAAK,UAAU;AACR,WAAA;AAAA,EACX;AACS,WAAA,uBAAuB,MAAMA,UAAS;AACrC,UAAA,EAAE,YAAgBA,IAAAA;AACxB,QAAI,EAAE,gBAAgB,KAClB,gBAAgB,KAAqC;AAC9C,aAAA;AAAA,IACX;AACA,eAAW,IAAI;AACT,UAAA,MAAM,KAAK,YAAA,MAAkB;AACnC,SAAK,UAAU;AACR,WAAA;AAAA,EACX;AACS,WAAA,mBAAmB,MAAMA,UAAS;AACjC,UAAA,EAAE,YAAgBA,IAAAA;AACxB,QAAI,gBAAgB,IAAqC;AAC9C,aAAA;AAAA,IACX;AACA,UAAM,KAAK,MAAM;AACP,YAAA,KAAK,KAAK;AAChB,UAAI,OAAO,KAAgC;AAChC,eAAA,kBAAkB,KAAK,KAAA,CAAM;AAAA,MAAA,WAE/B,OAAO,OACZ,OAAO,OACP,OAAO,OACP,OAAO,OACP,OAAO,OACP,OAAO,WACP,CAAC,IAAI;AACE,eAAA;AAAA,MAAA,WAEF,OAAO,SAAS;AACrB,aAAK,KAAK;AACV,eAAO,GAAG;AAAA,MAAA,OAET;AAEM,eAAA,YAAY,MAAM,KAAK;AAAA,MAClC;AAAA,IAAA;AAEJ,UAAM,MAAM;AACZ,SAAK,UAAU;AACR,WAAA;AAAA,EACX;AACA,WAAS,cAAc,MAAM;AACzB,eAAW,IAAI;AACT,UAAA,MAAM,KAAK,YAAA,MAAkB;AACnC,SAAK,UAAU;AACR,WAAA;AAAA,EACX;AACA,WAAS,kBAAkB,MAAM;AACvB,UAAA,SAAS,WAAW,IAAI;AAC9B,UAAM,MAAM,KAAK,kBAAkB,OAC/B,KAAK,KAAW,MAAA;AACpB,SAAK,UAAU;AACR,WAAA;AAAA,MACH,UAAU;AAAA,MACV,UAAU,OAAO,SAAS;AAAA,IAAA;AAAA,EAElC;AACS,WAAA,YAAY,MAAM,QAAQ,MAAM;AACrC,UAAM,KAAK,CAAC,WAAW,OAAO,OAAO,IAAI,eAAe,UAAU;AACxD,YAAA,KAAK,KAAK;AAChB,UAAI,OAAO,KAAgC;AAChC,eAAA,SAAS,MAA8B,QAAQ;AAAA,MAEjD,WAAA,OAAO,OAAoC,CAAC,IAAI;AAC9C,eAAA,SAAS,MAA8B,OAAO;AAAA,MAAA,WAEhD,OAAO,KAA6B;AACzC,aAAK,KAAK;AACH,eAAA,GAAG,UAAU,KAA6B,IAAI;AAAA,MAAA,WAEhD,OAAO,KAA2B;AACvC,eAAO,SAAS,OAA+B,eACzC,OACA,EAAE,SAAS,WAAW,SAAS;AAAA,MAAA,WAEhC,OAAO,SAAS;AACrB,aAAK,KAAK;AACH,eAAA,GAAG,MAAM,SAAS,YAAY;AAAA,MAAA,WAEhC,OAAO,SAAS;AACrB,aAAK,KAAK;AACH,eAAA,GAAG,MAAM,SAAS,YAAY;AAAA,MAAA,OAEpC;AACM,eAAA;AAAA,MACX;AAAA,IAAA;AAEJ,UAAM,MAAM;AACZ,aAAS,KAAK;AACP,WAAA;AAAA,EACX;AACS,WAAA,SAAS,MAAM,IAAI;AAClB,UAAA,KAAK,KAAK;AAChB,QAAI,OAAO,KAAK;AACL,aAAA;AAAA,IACX;AACI,QAAA,GAAG,EAAE,GAAG;AACR,WAAK,KAAK;AACH,aAAA;AAAA,IACX;AACO,WAAA;AAAA,EACX;AACA,WAAS,aAAa,IAAI;AAChB,UAAA,KAAK,GAAG,WAAW,CAAC;AACjB,WAAA,MAAM,MAAM,MAAM;AAAA,IACtB,MAAM,MAAM,MAAM;AAAA,IAClB,MAAM,MAAM,MAAM;AAAA,IACnB,OAAO;AAAA,IACP,OAAO;AAAA,EAEf;AACA,WAAS,mBAAmB,MAAM;AACvB,WAAA,SAAS,MAAM,YAAY;AAAA,EACtC;AACA,WAAS,kBAAkB,IAAI;AACrB,UAAA,KAAK,GAAG,WAAW,CAAC;AACjB,WAAA,MAAM,MAAM,MAAM;AAAA,IACtB,MAAM,MAAM,MAAM;AAAA,IAClB,MAAM,MAAM,MAAM;AAAA,IACnB,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,EAEf;AACA,WAAS,wBAAwB,MAAM;AAC5B,WAAA,SAAS,MAAM,iBAAiB;AAAA,EAC3C;AACA,WAAS,QAAQ,IAAI;AACX,UAAA,KAAK,GAAG,WAAW,CAAC;AACnB,WAAA,MAAM,MAAM,MAAM;AAAA,EAC7B;AACA,WAAS,UAAU,MAAM;AACd,WAAA,SAAS,MAAM,OAAO;AAAA,EACjC;AACA,WAAS,WAAW,IAAI;AACd,UAAA,KAAK,GAAG,WAAW,CAAC;AACjB,WAAA,MAAM,MAAM,MAAM;AAAA,IACtB,MAAM,MAAM,MAAM;AAAA,IAClB,MAAM,MAAM,MAAM;AAAA,EAC3B;AACA,WAAS,aAAa,MAAM;AACjB,WAAA,SAAS,MAAM,UAAU;AAAA,EACpC;AACA,WAAS,UAAU,MAAM;AACrB,QAAI,KAAK;AACT,QAAI,MAAM;AACF,WAAA,KAAK,UAAU,IAAI,GAAI;AACpB,aAAA;AAAA,IACX;AACO,WAAA;AAAA,EACX;AACA,WAAS,WAAW,MAAM;AACtB,eAAW,IAAI;AACT,UAAA,KAAK,KAAK;AAChB,QAAI,OAAO,KAA6B;AACpC,gBAAU,kBAAkB,gBAAgB,gBAAgB,GAAG,GAAG,EAAE;AAAA,IACxE;AACA,SAAK,KAAK;AACH,WAAA;AAAA,EACX;AACA,WAAS,SAAS,MAAM;AACpB,QAAI,MAAM;AAEV,WAAO,MAAM;AACH,YAAA,KAAK,KAAK;AACZ,UAAA,OAAO,OACP,OAAO,OACP,OAAO,OACP,OAAO,OACP,CAAC,IAAI;AACL;AAAA,MAAA,WAEK,OAAO,KAA6B;AACrC,YAAA,YAAY,IAAI,GAAG;AACZ,iBAAA;AACP,eAAK,KAAK;AAAA,QAAA,OAET;AACD;AAAA,QACJ;AAAA,MAEK,WAAA,OAAO,WAAW,OAAO,SAAS;AACnC,YAAA,YAAY,IAAI,GAAG;AACZ,iBAAA;AACP,eAAK,KAAK;AAAA,QAAA,WAEL,cAAc,IAAI,GAAG;AAC1B;AAAA,QAAA,OAEC;AACM,iBAAA;AACP,eAAK,KAAK;AAAA,QACd;AAAA,MAAA,OAEC;AACM,eAAA;AACP,aAAK,KAAK;AAAA,MACd;AAAA,IACJ;AACO,WAAA;AAAA,EACX;AACA,WAAS,oBAAoB,MAAM;AAC/B,eAAW,IAAI;AACf,QAAI,KAAK;AACT,QAAIlC,QAAO;AACH,WAAA,KAAK,wBAAwB,IAAI,GAAI;AACjC,MAAAA,SAAA;AAAA,IACZ;AACI,QAAA,KAAK,YAAY,MAAM,KAAK;AAC5B,gBAAU,kBAAkB,4BAA4B,gBAAgB,GAAG,CAAC;AAAA,IAChF;AACO,WAAAA;AAAA,EACX;AACA,WAAS,mBAAmB,MAAM;AAC9B,eAAW,IAAI;AACf,QAAI,QAAQ;AACR,QAAA,KAAK,YAAY,MAAM,KAAK;AAC5B,WAAK,KAAK;AACD,eAAA,IAAI,UAAU,IAAI,CAAC;AAAA,IAAA,OAE3B;AACD,eAAS,UAAU,IAAI;AAAA,IAC3B;AACI,QAAA,KAAK,YAAY,MAAM,KAAK;AAC5B,gBAAU,kBAAkB,4BAA4B,gBAAgB,GAAG,CAAC;AAAA,IAChF;AACO,WAAA;AAAA,EACX;AACA,WAASoC,WAAU,IAAI;AACZ,WAAA,OAAO,qBAAqB,OAAO;AAAA,EAC9C;AACA,WAAS,YAAY,MAAM;AACvB,eAAW,IAAI;AAEf,QAAI,MAAM,GAAI;AACd,QAAI,KAAK;AACT,QAAI,UAAU;AACd,WAAQ,KAAK,SAAS,MAAMA,UAAS,GAAI;AACrC,UAAI,OAAO,MAAM;AACb,mBAAW,mBAAmB,IAAI;AAAA,MAAA,OAEjC;AACU,mBAAA;AAAA,MACf;AAAA,IACJ;AACM,UAAA,UAAU,KAAK;AACjB,QAAA,YAAY,WAAW,YAAY,KAAK;AACxC,gBAAU,kBAAkB,0CAA0C,gBAAgB,GAAG,CAAC;AAE1F,UAAI,YAAY,SAAS;AACrB,aAAK,KAAK;AAEV,YAAI,MAAM,GAAI;AAAA,MAClB;AACO,aAAA;AAAA,IACX;AAEA,QAAI,MAAM,GAAI;AACP,WAAA;AAAA,EACX;AACA,WAAS,mBAAmB,MAAM;AACxB,UAAA,KAAK,KAAK;AAChB,YAAQ,IAAI;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AACD,aAAK,KAAK;AACV,eAAO,KAAK,EAAE;AAAA,MAClB,KAAK;AACM,eAAA,0BAA0B,MAAM,IAAI,CAAC;AAAA,MAChD,KAAK;AACM,eAAA,0BAA0B,MAAM,IAAI,CAAC;AAAA,MAChD;AACI,kBAAU,kBAAkB,yBAAyB,gBAAgB,GAAG,GAAG,EAAE;AACtE,eAAA;AAAA,IACf;AAAA,EACJ;AACS,WAAA,0BAA0B,MAAM,SAAS,QAAQ;AACtD,QAAI,MAAM,OAAO;AACjB,QAAI,WAAW;AACf,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AACvB,YAAA,KAAK,aAAa,IAAI;AAC5B,UAAI,CAAC,IAAI;AACL,kBAAU,kBAAkB,iCAAiC,gBAAgB,GAAG,GAAG,KAAK,OAAO,GAAG,QAAQ,GAAG,KAAK,YAAa,CAAA,EAAE;AACjI;AAAA,MACJ;AACY,kBAAA;AAAA,IAChB;AACO,WAAA,KAAK,OAAO,GAAG,QAAQ;AAAA,EAClC;AACA,WAAS,oBAAoB,IAAI;AAC7B,WAAQ,OAAO,OACX,OAAO,OACP,OAAO,WACP,OAAO;AAAA,EACf;AACA,WAAS,sBAAsB,MAAM;AACjC,eAAW,IAAI;AACf,QAAI,KAAK;AACT,QAAI,cAAc;AAClB,WAAQ,KAAK,SAAS,MAAM,mBAAmB,GAAI;AAChC,qBAAA;AAAA,IACnB;AACO,WAAA;AAAA,EACX;AACA,WAAS,mBAAmB,MAAM;AAC9B,QAAI,KAAK;AACT,QAAIpC,QAAO;AACH,WAAA,KAAK,mBAAmB,IAAI,GAAI;AAC5B,MAAAA,SAAA;AAAA,IACZ;AACO,WAAAA;AAAA,EACX;AACA,WAAS,gBAAgB,MAAM;AACrB,UAAA,KAAK,CAAC,QAAQ;AACV,YAAA,KAAK,KAAK;AAChB,UAAI,OAAO,OACP,OAAO,OACP,OAAO,OACP,OAAO,OACP,OAAO,OACP,OAAO,OACP,CAAC,IAAI;AACE,eAAA;AAAA,MAAA,WAEF,OAAO,SAAS;AACd,eAAA;AAAA,MAEF,WAAA,OAAO,WAAW,OAAO,KAAK;AAC5B,eAAA;AACP,aAAK,KAAK;AACV,eAAO,GAAG,GAAG;AAAA,MAAA,OAEZ;AACM,eAAA;AACP,aAAK,KAAK;AACV,eAAO,GAAG,GAAG;AAAA,MACjB;AAAA,IAAA;AAEJ,WAAO,GAAG,EAAE;AAAA,EAChB;AACA,WAAS,WAAW,MAAM;AACtB,eAAW,IAAI;AACf,UAAM,SAAS;AAAA,MAAI;AAAA,MAAM;AAAA;AAAA,IAAA;AACzB,eAAW,IAAI;AACR,WAAA;AAAA,EACX;AAES,WAAA,uBAAuB,MAAMkC,UAAS;AAC3C,QAAI,QAAQ;AACN,UAAA,KAAK,KAAK;AAChB,YAAQ,IAAI;AAAA,MACR,KAAK;AACGA,YAAAA,SAAQ,aAAa,GAAG;AACxB,oBAAU,kBAAkB,4BAA4B,gBAAgB,GAAG,CAAC;AAAA,QAChF;AACA,aAAK,KAAK;AACF,gBAAA;AAAA,UAASA;AAAAA,UAAS;AAAA,UAA8B;AAAA;AAAA,QAAA;AACxD,mBAAW,IAAI;AACfA,iBAAQ;AACD,eAAA;AAAA,MACX,KAAK;AACD,YAAIA,SAAQ,YAAY,KACpBA,SAAQ,gBAAgB,GAA8B;AACtD,oBAAU,kBAAkB,mBAAmB,gBAAgB,GAAG,CAAC;AAAA,QACvE;AACA,aAAK,KAAK;AACF,gBAAA;AAAA,UAASA;AAAAA,UAAS;AAAA,UAA+B;AAAA;AAAA,QAAA;AACzDA,iBAAQ;AACRA,iBAAQ,YAAY,KAAK,WAAW,IAAI;AACxC,YAAIA,SAAQ,YAAYA,SAAQ,cAAc,GAAG;AAC7CA,mBAAQ,WAAW;AAAA,QACvB;AACO,eAAA;AAAA,MACX,KAAK;AACGA,YAAAA,SAAQ,YAAY,GAAG;AACvB,oBAAU,kBAAkB,4BAA4B,gBAAgB,GAAG,CAAC;AAAA,QAChF;AACA,gBAAQ,kBAAkB,MAAMA,QAAO,KAAK,YAAYA,QAAO;AAC/DA,iBAAQ,YAAY;AACb,eAAA;AAAA,MACX,SAAS;AACL,YAAI,uBAAuB;AAC3B,YAAI,sBAAsB;AAC1B,YAAI,eAAe;AACf,YAAA,cAAc,IAAI,GAAG;AACjBA,cAAAA,SAAQ,YAAY,GAAG;AACvB,sBAAU,kBAAkB,4BAA4B,gBAAgB,GAAG,CAAC;AAAA,UAChF;AACA,kBAAQ,SAASA,UAAS,GAAyB,WAAW,IAAI,CAAC;AAEnEA,mBAAQ,YAAY;AACpBA,mBAAQ,WAAW;AACZ,iBAAA;AAAA,QACX;AACIA,YAAAA,SAAQ,YAAY,MACnBA,SAAQ,gBAAgB,KACrBA,SAAQ,gBAAgB,KACxBA,SAAQ,gBAAgB,IAA6B;AACzD,oBAAU,kBAAkB,4BAA4B,gBAAgB,GAAG,CAAC;AAC5EA,mBAAQ,YAAY;AACb,iBAAA,UAAU,MAAMA,QAAO;AAAA,QAClC;AACA,YAAK,uBAAuB,uBAAuB,MAAMA,QAAO,GAAI;AAChE,kBAAQ,SAASA,UAAS,GAA0B,oBAAoB,IAAI,CAAC;AAC7E,qBAAW,IAAI;AACR,iBAAA;AAAA,QACX;AACA,YAAK,sBAAsB,sBAAsB,MAAMA,QAAO,GAAI;AAC9D,kBAAQ,SAASA,UAAS,GAAyB,mBAAmB,IAAI,CAAC;AAC3E,qBAAW,IAAI;AACR,iBAAA;AAAA,QACX;AACA,YAAK,eAAe,eAAe,MAAMA,QAAO,GAAI;AAChD,kBAAQ,SAASA,UAAS,GAA4B,YAAY,IAAI,CAAC;AACvE,qBAAW,IAAI;AACR,iBAAA;AAAA,QACX;AACA,YAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,cAAc;AAEhE,kBAAQ,SAASA,UAAS,IAAkC,sBAAsB,IAAI,CAAC;AACvF,oBAAU,kBAAkB,8BAA8B,gBAAmB,GAAA,GAAG,MAAM,KAAK;AAC3F,qBAAW,IAAI;AACR,iBAAA;AAAA,QACX;AACA;AAAA,MACJ;AAAA,IACJ;AACO,WAAA;AAAA,EACX;AAES,WAAA,kBAAkB,MAAMA,UAAS;AAChC,UAAA,EAAE,YAAgBA,IAAAA;AACxB,QAAI,QAAQ;AACN,UAAA,KAAK,KAAK;AACX,SAAA,gBAAgB,KACjB,gBAAgB,KAChB,gBAAgB,MAChB,gBAAgB,QACf,OAAO,WAAW,OAAO,UAAU;AACpC,gBAAU,kBAAkB,uBAAuB,gBAAgB,GAAG,CAAC;AAAA,IAC3E;AACA,YAAQ,IAAI;AAAA,MACR,KAAK;AACD,aAAK,KAAK;AACF,gBAAA;AAAA,UAASA;AAAAA,UAAS;AAAA,UAAgC;AAAA;AAAA,QAAA;AAC1DA,iBAAQ,WAAW;AACZ,eAAA;AAAA,MACX,KAAK;AACD,mBAAW,IAAI;AACf,aAAK,KAAK;AACH,eAAA;AAAA,UAASA;AAAAA,UAAS;AAAA,UAA8B;AAAA;AAAA,QAAA;AAAA,MAC3D,KAAK;AACD,mBAAW,IAAI;AACf,aAAK,KAAK;AACH,eAAA;AAAA,UAASA;AAAAA,UAAS;AAAA,UAAqC;AAAA;AAAA,QAAA;AAAA,MAClE;AACQ,YAAA,cAAc,IAAI,GAAG;AACrB,kBAAQ,SAASA,UAAS,GAAyB,WAAW,IAAI,CAAC;AAEnEA,mBAAQ,YAAY;AACpBA,mBAAQ,WAAW;AACZ,iBAAA;AAAA,QACX;AACA,YAAI,iBAAiB,MAAMA,QAAO,KAC9B,uBAAuB,MAAMA,QAAO,GAAG;AACvC,qBAAW,IAAI;AACR,iBAAA,kBAAkB,MAAMA,QAAO;AAAA,QAC1C;AACI,YAAA,sBAAsB,MAAMA,QAAO,GAAG;AACtC,qBAAW,IAAI;AACf,iBAAO,SAASA,UAAS,IAAoC,mBAAmB,IAAI,CAAC;AAAA,QACzF;AACI,YAAA,mBAAmB,MAAMA,QAAO,GAAG;AACnC,qBAAW,IAAI;AACf,cAAI,OAAO,KAAgC;AAEhC,mBAAA,uBAAuB,MAAMA,QAAO,KAAK;AAAA,UAAA,OAE/C;AACD,mBAAO,SAASA,UAAS,IAA+B,gBAAgB,IAAI,CAAC;AAAA,UACjF;AAAA,QACJ;AACA,YAAI,gBAAgB,GAAgC;AAChD,oBAAU,kBAAkB,uBAAuB,gBAAgB,GAAG,CAAC;AAAA,QAC3E;AACAA,iBAAQ,YAAY;AACpBA,iBAAQ,WAAW;AACZ,eAAA,UAAU,MAAMA,QAAO;AAAA,IACtC;AAAA,EACJ;AAES,WAAA,UAAU,MAAMA,UAAS;AAC9B,QAAI,QAAQ;AAAA,MAAE,MAAM;AAAA;AAAA,IAAA;AAChBA,QAAAA,SAAQ,YAAY,GAAG;AACvB,aAAO,uBAAuB,MAAMA,QAAO,KAAK,YAAYA,QAAO;AAAA,IACvE;AACA,QAAIA,SAAQ,UAAU;AAClB,aAAO,kBAAkB,MAAMA,QAAO,KAAK,YAAYA,QAAO;AAAA,IAClE;AACM,UAAA,KAAK,KAAK;AAChB,YAAQ,IAAI;AAAA,MACR,KAAK;AACD,eAAO,uBAAuB,MAAMA,QAAO,KAAK,YAAYA,QAAO;AAAA,MACvE,KAAK;AACD,kBAAU,kBAAkB,0BAA0B,gBAAgB,GAAG,CAAC;AAC1E,aAAK,KAAK;AACH,eAAA;AAAA,UAASA;AAAAA,UAAS;AAAA,UAA+B;AAAA;AAAA,QAAA;AAAA,MAC5D,KAAK;AACD,eAAO,kBAAkB,MAAMA,QAAO,KAAK,YAAYA,QAAO;AAAA,MAClE,SAAS;AACD,YAAA,cAAc,IAAI,GAAG;AACrB,kBAAQ,SAASA,UAAS,GAAyB,WAAW,IAAI,CAAC;AAEnEA,mBAAQ,YAAY;AACpBA,mBAAQ,WAAW;AACZ,iBAAA;AAAA,QACX;AACA,cAAM,EAAE,UAAU,SAAS,IAAI,kBAAkB,IAAI;AACrD,YAAI,UAAU;AACV,iBAAO,WACD,SAASA,UAAS,GAAyB,SAAS,IAAI,CAAC,IACzD,SAASA,UAAS,GAA2B,WAAW,IAAI,CAAC;AAAA,QACvE;AACI,YAAA,YAAY,IAAI,GAAG;AACnB,iBAAO,SAASA,UAAS,GAAyB,SAAS,IAAI,CAAC;AAAA,QACpE;AACA;AAAA,MACJ;AAAA,IACJ;AACO,WAAA;AAAA,EACX;AACA,WAAS,YAAY;AACjB,UAAM,EAAE,aAAa,QAAQ,UAAU,WAAW;AAClD,aAAS,WAAW;AACpB,aAAS,aAAa;AACtB,aAAS,eAAe;AACxB,aAAS,aAAa;AACtB,aAAS,SAAS;AAClB,aAAS,WAAW;AAChB,QAAA,MAAM,YAAY,MAAM,KAAK;AACtB,aAAA;AAAA,QAAS;AAAA,QAAU;AAAA;AAAA,MAAA;AAAA,IAC9B;AACO,WAAA,UAAU,OAAO,QAAQ;AAAA,EACpC;AACO,SAAA;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAER;AAEA,MAAM,iBAAiB;AAEvB,MAAM,gBAAgB;AACtB,SAAS,mBAAmB,OAAO,YAAY,YAAY;AACvD,UAAQ,OAAO;AAAA,IACX,KAAK;AACM,aAAA;AAAA,IAEX,KAAK;AAEM,aAAA;AAAA,IACX,SAAS;AACL,YAAM,YAAY,SAAS,cAAc,YAAY,EAAE;AACnD,UAAA,aAAa,SAAU,aAAa,OAAQ;AACrC,eAAA,OAAO,cAAc,SAAS;AAAA,MACzC;AAGO,aAAA;AAAA,IACX;AAAA,EACJ;AACJ;AACA,SAAS,aAAa,UAAU,IAAI;AAC1B,QAAA,WAAW,QAAQ,aAAa;AAChC,QAAA,EAAE,SAAS,OAAW,IAAA;AAC5B,WAAS,UAAU,UAAUL,OAAM,OAAO,WAAW,MAAM;AACjD,UAAA,MAAM,SAAS;AACrB,QAAI,UAAU;AACd,QAAI,UAAU;AACd,QAAI,SAAS;AACT,YAAM,MAAM,WAAW,eAAe,OAAO,GAAG,IAAI;AAC9C,YAAA,MAAM,mBAAmBA,OAAM,KAAK;AAAA,QACtC,QAAQ;AAAA,QACR;AAAA,MAAA,CACH;AACD,cAAQ,GAAG;AAAA,IACf;AAAA,EACJ;AACA,WAAS,SAAS,UAAUA,OAAM,OAAO,WAAW,MAAM;AAChD,UAAA,MAAM,SAAS;AACrB,QAAI,UAAU;AACd,QAAI,UAAU;AACd,QAAI,QAAQ;AACR,YAAM,MAAM,WAAW,eAAe,OAAO,GAAG,IAAI;AACpD,aAAO,kBAAkBA,OAAM,KAAK,IAAI,CAAC;AAAA,IAC7C;AAAA,EACJ;AACS,WAAA,UAAUM,OAAM,QAAQ,KAAK;AAC5B,UAAA,OAAO,EAAE,MAAAA;AACf,QAAI,UAAU;AACV,WAAK,QAAQ;AACb,WAAK,MAAM;AACX,WAAK,MAAM,EAAE,OAAO,KAAK,KAAK;IAClC;AACO,WAAA;AAAA,EACX;AACA,WAAS,QAAQ,MAAM,QAAQ,KAAKA,OAAM;AAItC,QAAI,UAAU;AACV,WAAK,MAAM;AACX,UAAI,KAAK,KAAK;AACV,aAAK,IAAI,MAAM;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AACS,WAAA,UAAU,WAAW,OAAO;AAC3B,UAAA,UAAU,UAAU;AAC1B,UAAM,OAAO,UAAU,GAAwB,QAAQ,QAAQ,QAAQ,QAAQ;AAC/E,SAAK,QAAQ;AACb,YAAQ,MAAM,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AAC7D,WAAA;AAAA,EACX;AACS,WAAA,UAAU,WAAWlB,QAAO;AAC3B,UAAA,UAAU,UAAU;AAC1B,UAAM,EAAE,YAAY,QAAQ,cAAc,QAAQ;AAClD,UAAM,OAAO,UAAU,GAAwB,QAAQ,GAAG;AACrD,SAAA,QAAQ,SAASA,QAAO,EAAE;AAC/B,cAAU,UAAU;AACpB,YAAQ,MAAM,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AAC7D,WAAA;AAAA,EACX;AACS,WAAA,WAAW,WAAW,KAAK,QAAQ;AAClC,UAAA,UAAU,UAAU;AAC1B,UAAM,EAAE,YAAY,QAAQ,cAAc,QAAQ;AAClD,UAAM,OAAO,UAAU,GAAyB,QAAQ,GAAG;AAC3D,SAAK,MAAM;AACX,QAAI,WAAW,MAAM;AACjB,WAAK,SAAS;AAAA,IAClB;AACA,cAAU,UAAU;AACpB,YAAQ,MAAM,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AAC7D,WAAA;AAAA,EACX;AACS,WAAA,aAAa,WAAW,OAAO;AAC9B,UAAA,UAAU,UAAU;AAC1B,UAAM,EAAE,YAAY,QAAQ,cAAc,QAAQ;AAClD,UAAM,OAAO,UAAU,GAA2B,QAAQ,GAAG;AAC7D,SAAK,QAAQ,MAAM,QAAQ,eAAe,kBAAkB;AAC5D,cAAU,UAAU;AACpB,YAAQ,MAAM,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AAC7D,WAAA;AAAA,EACX;AACA,WAAS,oBAAoB,WAAW;AAC9B,UAAA,QAAQ,UAAU;AAClB,UAAA,UAAU,UAAU;AAC1B,UAAM,EAAE,YAAY,QAAQ,cAAc,QAAQ;AAClD,UAAM,OAAO,UAAU,GAAkC,QAAQ,GAAG;AAChE,QAAA,MAAM,SAAS,IAAoC;AAEnD,gBAAU,WAAW,kBAAkB,kCAAkC,QAAQ,cAAc,CAAC;AAChG,WAAK,QAAQ;AACL,cAAA,MAAM,QAAQ,GAAG;AAClB,aAAA;AAAA,QACH,kBAAkB;AAAA,QAClB;AAAA,MAAA;AAAA,IAER;AAEI,QAAA,MAAM,SAAS,MAAM;AACX,gBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,IACvH;AACK,SAAA,QAAQ,MAAM,SAAS;AAC5B,YAAQ,MAAM,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AAC7D,WAAA;AAAA,MACH;AAAA,IAAA;AAAA,EAER;AACS,WAAA,eAAe,WAAW,OAAO;AAChC,UAAA,UAAU,UAAU;AAC1B,UAAM,OAAO,UAAU,GAA6B,QAAQ,QAAQ,QAAQ,QAAQ;AACpF,SAAK,QAAQ;AACb,YAAQ,MAAM,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AAC7D,WAAA;AAAA,EACX;AACA,WAAS,YAAY,WAAW;AACtB,UAAA,UAAU,UAAU;AAC1B,UAAM,aAAa,UAAU,GAA0B,QAAQ,QAAQ,QAAQ,QAAQ;AACnF,QAAA,QAAQ,UAAU;AAClB,QAAA,MAAM,SAAS,GAA8B;AACvC,YAAA,SAAS,oBAAoB,SAAS;AAC5C,iBAAW,WAAW,OAAO;AACrB,cAAA,OAAO,oBAAoB,UAAU,UAAU;AAAA,IAC3D;AAEI,QAAA,MAAM,SAAS,IAAqC;AAC1C,gBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,IACvH;AACA,YAAQ,UAAU;AAEd,QAAA,MAAM,SAAS,GAA8B;AAC7C,cAAQ,UAAU;IACtB;AACA,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK;AACG,YAAA,MAAM,SAAS,MAAM;AACX,oBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,QACvH;AACA,mBAAW,MAAM,eAAe,WAAW,MAAM,SAAS,EAAE;AAC5D;AAAA,MACJ,KAAK;AACG,YAAA,MAAM,SAAS,MAAM;AACX,oBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,QACvH;AACA,mBAAW,MAAM,WAAW,WAAW,MAAM,SAAS,EAAE;AACxD;AAAA,MACJ,KAAK;AACG,YAAA,MAAM,SAAS,MAAM;AACX,oBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,QACvH;AACA,mBAAW,MAAM,UAAU,WAAW,MAAM,SAAS,EAAE;AACvD;AAAA,MACJ,KAAK;AACG,YAAA,MAAM,SAAS,MAAM;AACX,oBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,QACvH;AACA,mBAAW,MAAM,aAAa,WAAW,MAAM,SAAS,EAAE;AAC1D;AAAA,MACJ,SAAS;AAEL,kBAAU,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,CAAC;AACrF,cAAA,cAAc,UAAU;AAC9B,cAAM,qBAAqB,UAAU,GAA6B,YAAY,QAAQ,YAAY,QAAQ;AAC1G,2BAAmB,QAAQ;AAC3B,gBAAQ,oBAAoB,YAAY,QAAQ,YAAY,QAAQ;AACpE,mBAAW,MAAM;AACjB,gBAAQ,YAAY,YAAY,QAAQ,YAAY,QAAQ;AACrD,eAAA;AAAA,UACH,kBAAkB;AAAA,UAClB,MAAM;AAAA,QAAA;AAAA,MAEd;AAAA,IACJ;AACA,YAAQ,YAAY,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AACnE,WAAA;AAAA,MACH,MAAM;AAAA,IAAA;AAAA,EAEd;AACA,WAAS,aAAa,WAAW;AACvB,UAAA,UAAU,UAAU;AAC1B,UAAM,cAAc,QAAQ,gBAAgB,IACtC,UAAU,cAAA,IACV,QAAQ;AACd,UAAM,WAAW,QAAQ,gBAAgB,IACnC,QAAQ,SACR,QAAQ;AACd,UAAM,OAAO,UAAU,GAA2B,aAAa,QAAQ;AACvE,SAAK,QAAQ;AACb,QAAI,YAAY;AAChB,QAAI,SAAS;AACV,OAAA;AACO,YAAA,QAAQ,aAAa,UAAU,UAAU;AACnC,kBAAA;AACZ,cAAQ,MAAM,MAAM;AAAA,QAChB,KAAK;AACG,cAAA,MAAM,SAAS,MAAM;AACX,sBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,UACvH;AACA,eAAK,MAAM,KAAK,UAAU,WAAW,MAAM,SAAS,EAAE,CAAC;AACvD;AAAA,QACJ,KAAK;AACG,cAAA,MAAM,SAAS,MAAM;AACX,sBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,UACvH;AACA,eAAK,MAAM,KAAK,UAAU,WAAW,MAAM,SAAS,EAAE,CAAC;AACvD;AAAA,QACJ,KAAK;AACQ,mBAAA;AACT;AAAA,QACJ,KAAK;AACG,cAAA,MAAM,SAAS,MAAM;AACX,sBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,UACvH;AACK,eAAA,MAAM,KAAK,WAAW,WAAW,MAAM,SAAS,IAAI,CAAC,CAAC,MAAM,CAAC;AAClE,cAAI,QAAQ;AACC,qBAAA,WAAW,iBAAiB,mBAAmB,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAC9F,qBAAA;AAAA,UACb;AACA;AAAA,QACJ,KAAK;AACG,cAAA,MAAM,SAAS,MAAM;AACX,sBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,gBAAgB,KAAK,CAAC;AAAA,UACvH;AACA,eAAK,MAAM,KAAK,aAAa,WAAW,MAAM,SAAS,EAAE,CAAC;AAC1D;AAAA,QACJ,KAAK,GAAgC;AAC3B,gBAAA,SAAS,YAAY,SAAS;AAC/B,eAAA,MAAM,KAAK,OAAO,IAAI;AAC3B,sBAAY,OAAO,oBAAoB;AACvC;AAAA,QACJ;AAAA,MACJ;AAAA,IAAA,SACK,QAAQ,gBAAgB,MAC7B,QAAQ,gBAAgB;AAE5B,UAAM,YAAY,QAAQ,gBAAgB,IACpC,QAAQ,aACR,UAAU;AAChB,UAAM,SAAS,QAAQ,gBAAgB,IACjC,QAAQ,aACR,UAAU;AACR,YAAA,MAAM,WAAW,MAAM;AACxB,WAAA;AAAA,EACX;AACA,WAAS,YAAY,WAAW,QAAQ,KAAK,SAAS;AAC5C,UAAA,UAAU,UAAU;AACtB,QAAA,kBAAkB,QAAQ,MAAM,WAAW;AAC/C,UAAM,OAAO,UAAU,GAA0B,QAAQ,GAAG;AAC5D,SAAK,QAAQ;AACR,SAAA,MAAM,KAAK,OAAO;AACpB,OAAA;AACO,YAAA,MAAM,aAAa,SAAS;AAClC,UAAI,CAAC,iBAAiB;AACA,0BAAA,IAAI,MAAM,WAAW;AAAA,MAC3C;AACK,WAAA,MAAM,KAAK,GAAG;AAAA,IAAA,SACd,QAAQ,gBAAgB;AACjC,QAAI,iBAAiB;AACjB,gBAAU,WAAW,kBAAkB,8BAA8B,KAAK,CAAC;AAAA,IAC/E;AACA,YAAQ,MAAM,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AAC7D,WAAA;AAAA,EACX;AACA,WAAS,cAAc,WAAW;AACxB,UAAA,UAAU,UAAU;AACpB,UAAA,EAAE,QAAQ,SAAa,IAAA;AACvB,UAAA,UAAU,aAAa,SAAS;AAClC,QAAA,QAAQ,gBAAgB,IAAyB;AAC1C,aAAA;AAAA,IAAA,OAEN;AACD,aAAO,YAAY,WAAW,QAAQ,UAAU,OAAO;AAAA,IAC3D;AAAA,EACJ;AACA,WAASoB,OAAM,QAAQ;AACnB,UAAM,YAAY,gBAAgB,QAAQ,OAAO,CAAC,GAAG,OAAO,CAAC;AACvD,UAAA,UAAU,UAAU;AAC1B,UAAM,OAAO,UAAU,GAA4B,QAAQ,QAAQ,QAAQ,QAAQ;AAC/E,QAAA,YAAY,KAAK,KAAK;AACtB,WAAK,IAAI,SAAS;AAAA,IACtB;AACK,SAAA,OAAO,cAAc,SAAS;AACnC,QAAI,QAAQ,YAAY;AACf,WAAA,WAAW,QAAQ,WAAW,MAAM;AAAA,IAC7C;AAEI,QAAA,QAAQ,gBAAgB,IAAyB;AACvC,gBAAA,WAAW,kBAAkB,6BAA6B,QAAQ,cAAc,GAAG,OAAO,QAAQ,MAAM,KAAK,EAAE;AAAA,IAC7H;AACA,YAAQ,MAAM,UAAU,cAAiB,GAAA,UAAU,iBAAiB;AAC7D,WAAA;AAAA,EACX;AACA,SAAO,EAAE,OAAAA,OAAM;AACnB;AACA,SAAS,gBAAgB,OAAO;AACxB,MAAA,MAAM,SAAS,IAAyB;AACjC,WAAA;AAAA,EACX;AACA,QAAMrC,SAAQ,MAAM,SAAS,IAAI,QAAQ,WAAW,KAAK;AAClD,SAAAA,MAAK,SAAS,KAAKA,MAAK,MAAM,GAAG,CAAC,IAAI,MAAMA;AACvD;AAEA,SAAS,kBAAkB,KAAK,UAAU,IACxC;AACE,QAAM,WAAW;AAAA,IACb;AAAA,IACA,6BAAa,IAAI;AAAA,EAAA;AAErB,QAAM,UAAU,MAAM;AAChB,QAAA,SAAS,CAACA,UAAS;AACZ,aAAA,QAAQ,IAAIA,KAAI;AAClB,WAAAA;AAAA,EAAA;AAEJ,SAAA,EAAE,SAAS;AACtB;AACA,SAAS,cAAc,OAAO,aAAa;AACvC,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtB,iBAAA,MAAM,CAAC,GAAG,WAAW;AAAA,EACtC;AACJ;AACA,SAAS,aAAa,MAAM,aAAa;AAErC,UAAQ,KAAK,MAAM;AAAA,IACf,KAAK;AACa,oBAAA,KAAK,OAAO,WAAW;AACzB,kBAAA;AAAA,QAAO;AAAA;AAAA,MAAA;AACnB;AAAA,IACJ,KAAK;AACa,oBAAA,KAAK,OAAO,WAAW;AACrC;AAAA,IACJ,KAAK,GAA0B;AAC3B,YAAM,SAAS;AACF,mBAAA,OAAO,KAAK,WAAW;AACxB,kBAAA;AAAA,QAAO;AAAA;AAAA,MAAA;AACP,kBAAA;AAAA,QAAO;AAAA;AAAA,MAAA;AACnB;AAAA,IACJ;AAAA,IACA,KAAK;AACW,kBAAA;AAAA,QAAO;AAAA;AAAA,MAAA;AACP,kBAAA;AAAA,QAAO;AAAA;AAAA,MAAA;AACnB;AAAA,IACJ,KAAK;AACW,kBAAA;AAAA,QAAO;AAAA;AAAA,MAAA;AACP,kBAAA;AAAA,QAAO;AAAA;AAAA,MAAA;AACnB;AAAA,EACR;AAEJ;AAEA,SAAS,UAAU,KAAK,UAAU,IAChC;AACQ,QAAA,cAAc,kBAAkB,GAAG;AAC7B,cAAA;AAAA,IAAO;AAAA;AAAA,EAAA;AAEnB,MAAI,QAAQ,aAAa,IAAI,MAAM,WAAW;AAExC,QAAA,UAAU,YAAY;AAC5B,MAAI,UAAU,MAAM,KAAK,QAAQ,OAAO;AAC5C;AAEA,SAAS,SAAS,KAAK;AACnB,QAAM,OAAO,IAAI;AACb,MAAA,KAAK,SAAS,GAA2B;AACzC,wBAAoB,IAAI;AAAA,EAAA,OAEvB;AACD,SAAK,MAAM,QAAQ,CAAK,MAAA,oBAAoB,CAAC,CAAC;AAAA,EAClD;AACO,SAAA;AACX;AACA,SAAS,oBAAoB,SAAS;AAC9B,MAAA,QAAQ,MAAM,WAAW,GAAG;AACtB,UAAA,OAAO,QAAQ,MAAM,CAAC;AAC5B,QAAI,KAAK,SAAS,KAA0B,KAAK,SAAS,GAA2B;AACjF,cAAQ,SAAS,KAAK;AACtB,aAAO,KAAK;AAAA,IAChB;AAAA,EAAA,OAEC;AACD,UAAM,SAAS,CAAA;AACf,aAAS,IAAI,GAAG,IAAI,QAAQ,MAAM,QAAQ,KAAK;AACrC,YAAA,OAAO,QAAQ,MAAM,CAAC;AAC5B,UAAI,EAAE,KAAK,SAAS,KAA0B,KAAK,SAAS,IAA4B;AACpF;AAAA,MACJ;AACI,UAAA,KAAK,SAAS,MAAM;AACpB;AAAA,MACJ;AACO,aAAA,KAAK,KAAK,KAAK;AAAA,IAC1B;AACA,QAAI,OAAO,WAAW,QAAQ,MAAM,QAAQ;AAChC,cAAA,SAAS,KAAK,MAAM;AAC5B,eAAS,IAAI,GAAG,IAAI,QAAQ,MAAM,QAAQ,KAAK;AACrC,cAAA,OAAO,QAAQ,MAAM,CAAC;AAC5B,YAAI,KAAK,SAAS,KAA0B,KAAK,SAAS,GAA2B;AACjF,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,MAAM,iBAAiB;AAEvB,SAAS,OAAO,MAAM;AAClB,OAAK,IAAI,KAAK;AACd,UAAQ,KAAK,MAAM;AAAA,IACf,KAAK,GAA4B;AAC7B,YAAMsC,YAAW;AACjB,aAAOA,UAAS,IAAI;AACpB,MAAAA,UAAS,IAAIA,UAAS;AACtB,aAAOA,UAAS;AAChB;AAAA,IACJ;AAAA,IACA,KAAK,GAA0B;AAC3B,YAAM,SAAS;AACf,YAAM,QAAQ,OAAO;AACrB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC5B,eAAA,MAAM,CAAC,CAAC;AAAA,MACnB;AACA,aAAO,IAAI;AACX,aAAO,OAAO;AACd;AAAA,IACJ;AAAA,IACA,KAAK,GAA2B;AAC5B,YAAM,UAAU;AAChB,YAAM,QAAQ,QAAQ;AACtB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC5B,eAAA,MAAM,CAAC,CAAC;AAAA,MACnB;AACA,cAAQ,IAAI;AACZ,aAAO,QAAQ;AACf,UAAI,QAAQ,QAAQ;AAChB,gBAAQ,IAAI,QAAQ;AACpB,eAAO,QAAQ;AAAA,MACnB;AACA;AAAA,IACJ;AAAA,IACA,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,GAA6B;AAC9B,YAAM,YAAY;AAClB,UAAI,UAAU,OAAO;AACjB,kBAAU,IAAI,UAAU;AACxB,eAAO,UAAU;AAAA,MACrB;AACA;AAAA,IACJ;AAAA,IACA,KAAK,GAA0B;AAC3B,YAAM,SAAS;AACf,aAAO,OAAO,GAAG;AACjB,aAAO,IAAI,OAAO;AAClB,aAAO,OAAO;AACd,UAAI,OAAO,UAAU;AACjB,eAAO,OAAO,QAAQ;AACtB,eAAO,IAAI,OAAO;AAClB,eAAO,OAAO;AAAA,MAClB;AACA;AAAA,IACJ;AAAA,IACA,KAAK,GAAwB;AACzB,YAAM,OAAO;AACb,WAAK,IAAI,KAAK;AACd,aAAO,KAAK;AACZ;AAAA,IACJ;AAAA,IACA,KAAK,GAAyB;AAC1B,YAAM,QAAQ;AACd,YAAM,IAAI,MAAM;AAChB,aAAO,MAAM;AACb;AAAA,IACJ;AAAA,IACA;AACS,UAAA,QAAQ,IAAI,aAAa,cAAe;AACnC,cAAA,mBAAmB,kBAAkB,8BAA8B,MAAM;AAAA,UAC3E,QAAQ;AAAA,UACR,MAAM,CAAC,KAAK,IAAI;AAAA,QAAA,CACnB;AAAA,MACL;AAAA,EACR;AACA,SAAO,KAAK;AAChB;AAKA,MAAM,eAAe;AACrB,SAAS,oBAAoB,KAAK,SAAS;AACvC,QAAM,EAAE,WAAW,UAAU,eAAe,YAAY,YAAgB,IAAA;AAClE,QAAA,WAAW,QAAQ,aAAa;AACtC,QAAM,WAAW;AAAA,IACb;AAAA,IACA,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,KAAK;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,aAAa;AAAA,EAAA;AAEb,MAAA,YAAY,IAAI,KAAK;AACZ,aAAA,SAAS,IAAI,IAAI;AAAA,EAC9B;AACA,QAAM,UAAU,MAAM;AACb,WAAA,KAAKT,OAAM,MAAM;AACtB,aAAS,QAAQA;AAAA,EACrB;AACS,WAAA,SAAS,GAAG,gBAAgB,MAAM;AACjC,UAAA,iBAAiB,gBAAgB,gBAAgB;AACvD,SAAK,cAAc,iBAAiB,KAAK,OAAO,CAAC,IAAI,cAAc;AAAA,EACvE;AACS,WAAA,OAAO,cAAc,MAAM;AAC1B,UAAA,QAAQ,EAAE,SAAS;AACzB,mBAAe,SAAS,KAAK;AAAA,EACjC;AACS,WAAA,SAAS,cAAc,MAAM;AAC5B,UAAA,QAAQ,EAAE,SAAS;AACzB,mBAAe,SAAS,KAAK;AAAA,EACjC;AACA,WAAS,UAAU;AACf,aAAS,SAAS,WAAW;AAAA,EACjC;AACA,QAAM,SAAS,CAAC,QAAQ,IAAI,GAAG;AACzB,QAAA,aAAa,MAAM,SAAS;AAC3B,SAAA;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAER;AACA,SAAS,mBAAmB,WAAW,MAAM;AACnC,QAAA,EAAE,OAAW,IAAA;AACnB,YAAU,KAAK,GAAG;AAAA,IAAO;AAAA;AAAA,EAAA,CAAoC,GAAG;AACnD,eAAA,WAAW,KAAK,GAAG;AAChC,MAAI,KAAK,UAAU;AACf,cAAU,KAAK,IAAI;AACN,iBAAA,WAAW,KAAK,QAAQ;AACrC,cAAU,KAAK,SAAS;AAAA,EAAA,OAEvB;AACD,cAAU,KAAK,oBAAoB;AAAA,EACvC;AACA,YAAU,KAAK,GAAG;AACtB;AACA,SAAS,oBAAoB,WAAW,MAAM;AACpC,QAAA,EAAE,QAAQ,WAAe,IAAA;AAC/B,YAAU,KAAK,GAAG;AAAA,IAAO;AAAA;AAAA,EAAA,CAA0C,IAAI;AAC7D,YAAA,OAAO,YAAY;AACvB,QAAA,SAAS,KAAK,MAAM;AAC1B,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,iBAAa,WAAW,KAAK,MAAM,CAAC,CAAC;AACjC,QAAA,MAAM,SAAS,GAAG;AAClB;AAAA,IACJ;AACA,cAAU,KAAK,IAAI;AAAA,EACvB;AACU,YAAA,SAAS,YAAY;AAC/B,YAAU,KAAK,IAAI;AACvB;AACA,SAAS,mBAAmB,WAAW,MAAM;AACnC,QAAA,EAAE,QAAQ,WAAe,IAAA;AAC3B,MAAA,KAAK,MAAM,SAAS,GAAG;AACvB,cAAU,KAAK,GAAG;AAAA,MAAO;AAAA;AAAA,IAAA,CAAoC,IAAI;AACvD,cAAA,OAAO,YAAY;AACvB,UAAA,SAAS,KAAK,MAAM;AAC1B,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,mBAAa,WAAW,KAAK,MAAM,CAAC,CAAC;AACjC,UAAA,MAAM,SAAS,GAAG;AAClB;AAAA,MACJ;AACA,gBAAU,KAAK,IAAI;AAAA,IACvB;AACU,cAAA,SAAS,YAAY;AAC/B,cAAU,KAAK,IAAI;AAAA,EACvB;AACJ;AACA,SAAS,iBAAiB,WAAW,MAAM;AACvC,MAAI,KAAK,MAAM;AACE,iBAAA,WAAW,KAAK,IAAI;AAAA,EAAA,OAEhC;AACD,cAAU,KAAK,MAAM;AAAA,EACzB;AACJ;AACA,SAAS,aAAa,WAAW,MAAM;AAC7B,QAAA,EAAE,OAAW,IAAA;AACnB,UAAQ,KAAK,MAAM;AAAA,IACf,KAAK;AACD,uBAAiB,WAAW,IAAI;AAChC;AAAA,IACJ,KAAK;AACD,yBAAmB,WAAW,IAAI;AAClC;AAAA,IACJ,KAAK;AACD,0BAAoB,WAAW,IAAI;AACnC;AAAA,IACJ,KAAK;AACD,yBAAmB,WAAW,IAAI;AAClC;AAAA,IACJ,KAAK;AACD,gBAAU,KAAK,KAAK,UAAU,KAAK,KAAK,GAAG,IAAI;AAC/C;AAAA,IACJ,KAAK;AACD,gBAAU,KAAK,KAAK,UAAU,KAAK,KAAK,GAAG,IAAI;AAC/C;AAAA,IACJ,KAAK;AACD,gBAAU,KAAK,GAAG;AAAA,QAAO;AAAA;AAAA,MAA8C,CAAA,IAAI;AAAA,QAAO;AAAA;AAAA,MAAA,CAAgC,IAAI,KAAK,KAAK,MAAM,IAAI;AAC1I;AAAA,IACJ,KAAK;AACD,gBAAU,KAAK,GAAG;AAAA,QAAO;AAAA;AAAA,MAA8C,CAAA,IAAI;AAAA,QAAO;AAAA;AAAA,MAAA,CAAkC,IAAI,KAAK,UAAU,KAAK,GAAG,CAAC,MAAM,IAAI;AAC1J;AAAA,IACJ,KAAK;AACD,gBAAU,KAAK,KAAK,UAAU,KAAK,KAAK,GAAG,IAAI;AAC/C;AAAA,IACJ,KAAK;AACD,gBAAU,KAAK,KAAK,UAAU,KAAK,KAAK,GAAG,IAAI;AAC/C;AAAA,IACJ;AACS,UAAA,QAAQ,IAAI,aAAa,cAAe;AACnC,cAAA,mBAAmB,kBAAkB,6BAA6B,MAAM;AAAA,UAC1E,QAAQ;AAAA,UACR,MAAM,CAAC,KAAK,IAAI;AAAA,QAAA,CACnB;AAAA,MACL;AAAA,EACR;AACJ;AAEA,MAAM,WAAW,CAAC,KAAK,UAAU,OAC5B;AACD,QAAM,OAAO,SAAS,QAAQ,IAAI,IAAI,QAAQ,OAAO;AACrD,QAAM,WAAW,SAAS,QAAQ,QAAQ,IACpC,QAAQ,WACR;AACA,QAAA,YAAY,CAAC,CAAC,QAAQ;AAEtB,QAAA,gBAAgB,QAAQ,iBAAiB,OACzC,QAAQ,gBACR,SAAS,UACL,MACA;AACV,QAAM,aAAa,QAAQ,aAAa,QAAQ,aAAa,SAAS;AAChE,QAAA,UAAU,IAAI,WAAW;AACzB,QAAA,YAAY,oBAAoB,KAAK;AAAA,IACvC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACH;AACD,YAAU,KAAK,SAAS,WAAW,6BAA6B,YAAY;AAC5E,YAAU,OAAO,UAAU;AACvB,MAAA,QAAQ,SAAS,GAAG;AACpB,cAAU,KAAK,WAAW,KAAK,QAAQ,IAAI,CAAK,MAAA,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU;AAC/E,cAAU,QAAQ;AAAA,EACtB;AACA,YAAU,KAAK,SAAS;AACxB,eAAa,WAAW,GAAG;AAC3B,YAAU,SAAS,UAAU;AAC7B,YAAU,KAAK,GAAG;AAClB,SAAO,IAAI;AACX,QAAM,EAAE,MAAAA,OAAM,IAAI,IAAI,UAAU,QAAQ;AACjC,SAAA;AAAA,IACH;AAAA,IACA,MAAAA;AAAA,IACA,KAAK,MAAM,IAAI,OAAA,IAAW;AAAA;AAAA,EAAA;AAElC;AAEA,SAASU,cAAY,QAAQ,UAAU,IAAI;AACvC,QAAM,kBAAkB,OAAO,CAAC,GAAG,OAAO;AACpC,QAAA,MAAM,CAAC,CAAC,gBAAgB;AACxB,QAAA,eAAe,CAAC,CAAC,gBAAgB;AACvC,QAAM,iBAAiB,gBAAgB,YAAY,OAAO,OAAO,gBAAgB;AAE3E,QAAA,SAAS,aAAa,eAAe;AACrC,QAAA,MAAM,OAAO,MAAM,MAAM;AAC/B,MAAI,CAAC,KAAK;AAEN,cAAU,KAAK,eAAe;AAEvB,WAAA,SAAS,KAAK,eAAe;AAAA,EAAA,OAEnC;AAED,sBAAkB,SAAS,GAAG;AAE9B,oBAAgB,OAAO,GAAG;AAEnB,WAAA,EAAE,KAAK,MAAM;EACxB;AACJ;AChkDA;AAAA;AAAA;AAAA;AAAA;AAaA,SAASC,qBAAmB;AACpB,MAAA,OAAO,8BAA8B,WAAW;AAChD,oBAAgB,4BAA4B;AAAA,EAChD;AAOJ;AAEA,MAAM,mBAAoB,CAAA;AAC1B;AAAA,EAAiB;AAAA;AAA0B,IAAI;AAAA,EAC3C;AAAA,IAAC;AAAA;AAAA,EAAoC,GAAA;AAAA,IAAC;AAAA;AAAA,EAA0B;AAAA,EAChE;AAAA,IAAC;AAAA;AAAA,EAAgC,GAAA;AAAA,IAAC;AAAA,IAAyB;AAAA;AAAA,EAAsB;AAAA,EACjF;AAAA,IAAC;AAAA;AAAA,EAAuC,GAAA;AAAA,IAAC;AAAA;AAAA,EAA0B;AAAA,EACnE;AAAA,IAAC;AAAA;AAAA,EAAsC,GAAA;AAAA,IAAC;AAAA;AAAA,EAAyB;AACrE;AACA;AAAA,EAAiB;AAAA;AAAsB,IAAI;AAAA,EACvC;AAAA,IAAC;AAAA;AAAA,EAAoC,GAAA;AAAA,IAAC;AAAA;AAAA,EAAsB;AAAA,EAC5D;AAAA,IAAC;AAAA;AAAA,EAA8B,GAAA;AAAA,IAAC;AAAA;AAAA,EAA2B;AAAA,EAC3D;AAAA,IAAC;AAAA;AAAA,EAAuC,GAAA;AAAA,IAAC;AAAA;AAAA,EAA0B;AAAA,EACnE;AAAA,IAAC;AAAA;AAAA,EAAsC,GAAA;AAAA,IAAC;AAAA;AAAA,EAAyB;AACrE;AACA;AAAA,EAAiB;AAAA;AAA2B,IAAI;AAAA,EAC5C;AAAA,IAAC;AAAA;AAAA,EAAoC,GAAA;AAAA,IAAC;AAAA;AAAA,EAA2B;AAAA,EACjE;AAAA,IAAC;AAAA;AAAA,EAAgC,GAAA;AAAA,IAAC;AAAA,IAAyB;AAAA;AAAA,EAAsB;AAAA,EACjF;AAAA,IAAC;AAAA;AAAA,EAA+B,GAAA;AAAA,IAAC;AAAA,IAAyB;AAAA;AAAA,EAAsB;AACpF;AACA;AAAA,EAAiB;AAAA;AAAuB,IAAI;AAAA,EACxC;AAAA,IAAC;AAAA;AAAA,EAAgC,GAAA;AAAA,IAAC;AAAA,IAAyB;AAAA;AAAA,EAAsB;AAAA,EACjF;AAAA,IAAC;AAAA;AAAA,EAA+B,GAAA;AAAA,IAAC;AAAA,IAAyB;AAAA;AAAA,EAAsB;AAAA,EAChF;AAAA,IAAC;AAAA;AAAA,EAAoC,GAAA;AAAA,IAAC;AAAA,IAAwB;AAAA;AAAA,EAAoB;AAAA,EAClF;AAAA,IAAC;AAAA;AAAA,EAA8B,GAAA;AAAA,IAAC;AAAA,IAA6B;AAAA;AAAA,EAAoB;AAAA,EACjF;AAAA,IAAC;AAAA;AAAA,EAAuC,GAAA;AAAA,IAAC;AAAA,IAA4B;AAAA;AAAA,EAAoB;AAAA,EACzF;AAAA,IAAC;AAAA;AAAA,EAAsC,GAAA;AAAA,IAAC;AAAA,IAA2B;AAAA;AAAA,EAAoB;AAC3F;AACA;AAAA,EAAiB;AAAA;AAA0B,IAAI;AAAA,EAC3C;AAAA,IAAC;AAAA;AAAA,EAAuC,GAAA;AAAA,IAAC;AAAA,IAAgC;AAAA;AAAA,EAAsB;AAAA,EAC/F;AAAA,IAAC;AAAA;AAAA,EAAwC,GAAA;AAAA,IAAC;AAAA,IAAgC;AAAA;AAAA,EAAsB;AAAA,EAChG;AAAA,IAAC;AAAA;AAAA,EAAuC,GAAA;AAAA,IACpC;AAAA,IACA;AAAA;AAAA,EACJ;AAAA,EACA;AAAA,IAAC;AAAA;AAAA,EAAwC,GAAA;AAAA,IAAC;AAAA,IAAwB;AAAA;AAAA,EAA6B;AAAA,EAC/F;AAAA,IAAC;AAAA;AAAA,EAAA,GAAsC;AAAA,EACvC;AAAA,IAAC;AAAA;AAAA,EAA+B,GAAA;AAAA,IAAC;AAAA,IAA4B;AAAA;AAAA,EAAsB;AACvF;AACA;AAAA,EAAiB;AAAA;AAA8B,IAAI;AAAA,EAC/C;AAAA,IAAC;AAAA;AAAA,EAAuC,GAAA;AAAA,IAAC;AAAA,IAA4B;AAAA;AAAA,EAAsB;AAAA,EAC3F;AAAA,IAAC;AAAA;AAAA,EAAA,GAAsC;AAAA,EACvC;AAAA,IAAC;AAAA;AAAA,EAA+B,GAAA;AAAA,IAAC;AAAA,IAAgC;AAAA;AAAA,EAAsB;AAC3F;AACA;AAAA,EAAiB;AAAA;AAA8B,IAAI;AAAA,EAC/C;AAAA,IAAC;AAAA;AAAA,EAAwC,GAAA;AAAA,IAAC;AAAA,IAA4B;AAAA;AAAA,EAAsB;AAAA,EAC5F;AAAA,IAAC;AAAA;AAAA,EAAA,GAAsC;AAAA,EACvC;AAAA,IAAC;AAAA;AAAA,EAA+B,GAAA;AAAA,IAAC;AAAA,IAAgC;AAAA;AAAA,EAAsB;AAC3F;AAIA,MAAM,iBAAiB;AACvB,SAAS,UAAU,KAAK;AACb,SAAA,eAAe,KAAK,GAAG;AAClC;AAIA,SAAS,YAAY,KAAK;AAChB,QAAA,IAAI,IAAI,WAAW,CAAC;AAC1B,QAAM,IAAI,IAAI,WAAW,IAAI,SAAS,CAAC;AAChC,SAAA,MAAM,MAAM,MAAM,MAAQ,MAAM,MAAQ,IAAI,MAAM,GAAG,EAAE,IAAI;AACtE;AAIA,SAAS,gBAAgB,IAAI;AACrB,MAAA,OAAO,UAAa,OAAO,MAAM;AAC1B,WAAA;AAAA,EACX;AACMX,QAAAA,QAAO,GAAG,WAAW,CAAC;AAC5B,UAAQA,OAAM;AAAA,IACV,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACM,aAAA;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACM,aAAA;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACM,aAAA;AAAA,EACf;AACO,SAAA;AACX;AAMA,SAAS,cAAc,MAAM;AACnB,QAAA,UAAU,KAAK;AAEjB,MAAA,KAAK,OAAO,CAAC,MAAM,OAAO,MAAM,SAAS,IAAI,CAAC,GAAG;AAC1C,WAAA;AAAA,EACX;AACA,SAAO,UAAU,OAAO,IAClB,YAAY,OAAO,IACnB,MAAmC;AAC7C;AAIA,SAAS,MAAM,MAAM;AACjB,QAAM,OAAO,CAAA;AACb,MAAIZ,SAAQ;AACZ,MAAI,OAAO;AACX,MAAI,eAAe;AACf,MAAA;AACA,MAAA;AACA,MAAA;AACA,MAAAkB;AACA,MAAA;AACA,MAAA;AACA,MAAA;AACJ,QAAM,UAAU,CAAA;AAChB;AAAA,IAAQ;AAAA;AAAA,EAAA,IAA0B,MAAM;AACpC,QAAI,QAAQ,QAAW;AACb,YAAA;AAAA,IAAA,OAEL;AACM,aAAA;AAAA,IACX;AAAA,EAAA;AAEJ;AAAA,IAAQ;AAAA;AAAA,EAAA,IAAwB,MAAM;AAClC,QAAI,QAAQ,QAAW;AACnB,WAAK,KAAK,GAAG;AACP,YAAA;AAAA,IACV;AAAA,EAAA;AAEJ;AAAA,IAAQ;AAAA;AAAA,EAAA,IAAsC,MAAM;AAChD;AAAA,MAAQ;AAAA;AAAA,IAAA;AACR;AAAA,EAAA;AAEJ;AAAA,IAAQ;AAAA;AAAA,EAAA,IAAiC,MAAM;AAC3C,QAAI,eAAe,GAAG;AAClB;AACO,aAAA;AACP;AAAA,QAAQ;AAAA;AAAA,MAAA;IAAwB,OAE/B;AACc,qBAAA;AACf,UAAI,QAAQ,QAAW;AACZ,eAAA;AAAA,MACX;AACA,YAAM,cAAc,GAAG;AACvB,UAAI,QAAQ,OAAO;AACR,eAAA;AAAA,MAAA,OAEN;AACD;AAAA,UAAQ;AAAA;AAAA,QAAA;MACZ;AAAA,IACJ;AAAA,EAAA;AAEJ,WAAS,qBAAqB;AACpB,UAAA,WAAW,KAAKlB,SAAQ,CAAC;AAC/B,QAAK,SAAS,KACV,aAAa,OACZ,SAAS,KACN,aAAa,KAAwC;AACzD,MAAAA;AACA,gBAAU,OAAO;AACjB;AAAA,QAAQ;AAAA;AAAA,MAAA;AACD,aAAA;AAAA,IACX;AAAA,EACJ;AACA,SAAO,SAAS,MAAM;AAClB,IAAAA;AACA,QAAI,KAAKA,MAAK;AACV,QAAA,MAAM,QAAQ,sBAAsB;AACpC;AAAA,IACJ;AACA,IAAAkB,QAAO,gBAAgB,CAAC;AACxB,cAAU,iBAAiB,IAAI;AAClB,iBAAA,QAAQA,KAAI,KAAK;AAAA,MAAQ;AAAA;AAAA,IAAiC,KAAA;AAEvE,QAAI,eAAe,GAAsB;AACrC;AAAA,IACJ;AACA,WAAO,WAAW,CAAC;AACf,QAAA,WAAW,CAAC,MAAM,QAAW;AACpB,eAAA,QAAQ,WAAW,CAAC,CAAC;AAC9B,UAAI,QAAQ;AACE,kBAAA;AACN,YAAA,aAAa,OAAO;AACpB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,SAAS,GAA2B;AAC7B,aAAA;AAAA,IACX;AAAA,EACJ;AACJ;AAEA,MAAM,4BAAY;AAclB,SAAS,oBAAoB,KAAK,MAAM;AACpC,SAAO,SAAS,GAAG,IAAI,IAAI,IAAI,IAAI;AACvC;AAcA,SAAS,aAAa,KAAK,MAAM;AAEzB,MAAA,CAAC,SAAS,GAAG,GAAG;AACT,WAAA;AAAA,EACX;AAEI,MAAA,MAAM,MAAM,IAAI,IAAI;AACxB,MAAI,CAAC,KAAK;AACN,UAAM,MAAM,IAAI;AAChB,QAAI,KAAK;AACC,YAAA,IAAI,MAAM,GAAG;AAAA,IACvB;AAAA,EACJ;AAEA,MAAI,CAAC,KAAK;AACC,WAAA;AAAA,EACX;AAEA,QAAM,MAAM,IAAI;AAChB,MAAI,OAAO;AACX,MAAI,IAAI;AACR,SAAO,IAAI,KAAK;AACZ,UAAM,MAAM,KAAK,IAAI,CAAC,CAAC;AACvB,QAAI,QAAQ,QAAW;AACZ,aAAA;AAAA,IACX;AACI,QAAA,WAAW,IAAI,GAAG;AACX,aAAA;AAAA,IACX;AACO,WAAA;AACP;AAAA,EACJ;AACO,SAAA;AACX;AAEA,MAAM,mBAAmB,CAAC,QAAQ;AAClC,MAAM,kBAAkB,CAAC,QAAQ;AACjC,MAAM,4BAA4B;AAClC,MAAM,oBAAoB,CAAC,WAAW,OAAO,WAAW,IAAI,KAAK,KAAK,MAAM;AAC5E,MAAM,sBAAsB;AAC5B,SAAS,cAAc,QAAQ,eAAe;AACjC,WAAA,KAAK,IAAI,MAAM;AACxB,MAAI,kBAAkB,GAAG;AAErB,WAAO,SACD,SAAS,IACL,IACA,IACJ;AAAA,EACV;AACA,SAAO,SAAS,KAAK,IAAI,QAAQ,CAAC,IAAI;AAC1C;AACA,SAAS,eAAe,SAAS;AAE7B,QAAMlB,SAAQ,SAAS,QAAQ,WAAW,IACpC,QAAQ,cACR;AAEN,SAAO,QAAQ,UAAU,SAAS,QAAQ,MAAM,KAAK,KAAK,SAAS,QAAQ,MAAM,CAAC,KAC5E,SAAS,QAAQ,MAAM,KAAK,IACxB,QAAQ,MAAM,QACd,SAAS,QAAQ,MAAM,CAAC,IACpB,QAAQ,MAAM,IACdA,SACRA;AACV;AACA,SAAS,eAAe,aAAa,OAAO;AACpC,MAAA,CAAC,MAAM,OAAO;AACd,UAAM,QAAQ;AAAA,EAClB;AACI,MAAA,CAAC,MAAM,GAAG;AACV,UAAM,IAAI;AAAA,EACd;AACJ;AACA,SAAS,qBAAqB,UAAU,IAAI;AACxC,QAAM,SAAS,QAAQ;AACjB,QAAA,cAAc,eAAe,OAAO;AAC1C,QAAM,aAAa,SAAS,QAAQ,WAAW,KAC3C,SAAS,MAAM,KACf,WAAW,QAAQ,YAAY,MAAM,CAAC,IACpC,QAAQ,YAAY,MAAM,IAC1B;AACN,QAAM,gBAAgB,SAAS,QAAQ,WAAW,KAC9C,SAAS,MAAM,KACf,WAAW,QAAQ,YAAY,MAAM,CAAC,IACpC,gBACA;AACA,QAAA,SAAS,CAAC,aAAa;AACzB,WAAO,SAAS,WAAW,aAAa,SAAS,QAAQ,aAAa,CAAC;AAAA,EAAA;AAErE,QAAA,QAAQ,QAAQ,QAAQ;AAC9B,QAAM,OAAO,CAACA,WAAU,MAAMA,MAAK;AAE7B,QAAA,SAAS,QAAQ,SAAS;AAChC,WAAS,QAAQ,WAAW,KAAK,eAAe,aAAa,MAAM;AACnE,QAAM,QAAQ,CAAC,QAAQ,OAAO,GAAG;AACjC,WAAS,QAAQ,KAAK;AAElB,UAAM,MAAM,WAAW,QAAQ,QAAQ,IACjC,QAAQ,SAAS,GAAG,IACpB,SAAS,QAAQ,QAAQ,IACrB,QAAQ,SAAS,GAAG,IACpB;AACH,WAAA,CAAC,MACF,QAAQ,SACJ,QAAQ,OAAO,QAAQ,GAAG,IAC1B,kBACJ;AAAA,EACV;AACM,QAAA,YAAY,CAACjB,UAAS,QAAQ,YAC9B,QAAQ,UAAUA,KAAI,IACtB;AACN,QAAM,YAAY,cAAc,QAAQ,SAAS,KAAK,WAAW,QAAQ,UAAU,SAAS,IACtF,QAAQ,UAAU,YAClB;AACN,QAAM,cAAc,cAAc,QAAQ,SAAS,KAC/C,WAAW,QAAQ,UAAU,WAAW,IACtC,QAAQ,UAAU,cAClB;AACN,QAAMmC,QAAO,cAAc,QAAQ,SAAS,KAAK,SAAS,QAAQ,UAAU,IAAI,IAC1E,QAAQ,UAAU,OAClB;AACA,QAAA,SAAS,CAAC,QAAQ,SAAS;AACvB,UAAA,CAAC,MAAM,IAAI,IAAI;AACrB,QAAIA,SAAO;AACX,QAAI,WAAW;AACX,QAAA,KAAK,WAAW,GAAG;AACf,UAAA,SAAS,IAAI,GAAG;AAChB,mBAAW,KAAK,YAAY;AAC5BA,QAAAA,SAAO,KAAK,QAAQA;AAAAA,MAAA,WAEf,SAAS,IAAI,GAAG;AACrB,mBAAW,QAAQ;AAAA,MACvB;AAAA,IAAA,WAEK,KAAK,WAAW,GAAG;AACpB,UAAA,SAAS,IAAI,GAAG;AAChB,mBAAW,QAAQ;AAAA,MACvB;AACI,UAAA,SAAS,IAAI,GAAG;AAChBA,QAAAA,SAAO,QAAQA;AAAAA,MACnB;AAAA,IACJ;AACA,UAAM,MAAM,QAAQ,GAAG,EAAE,GAAG;AACtB,UAAA;AAAA;AAAA,MAENA,WAAS,WAAW,QAAQ,GAAG,KAAK,WAC9B,IAAI,CAAC,IACL;AAAA;AACN,WAAO,WAAW,UAAU,QAAQ,EAAE,KAAKA,MAAI,IAAI;AAAA,EAAA;AAEvD,QAAM,MAAM;AAAA,IACR;AAAA,MAAC;AAAA;AAAA,IAAA,GAAkC;AAAA,IACnC;AAAA,MAAC;AAAA;AAAA,IAAA,GAAoC;AAAA,IACrC;AAAA,MAAC;AAAA;AAAA,IAAA,GAAsC;AAAA,IACvC;AAAA,MAAC;AAAA;AAAA,IAAA,GAAsC;AAAA,IACvC;AAAA,MAAC;AAAA;AAAA,IAAA,GAAwC;AAAA,IACzC;AAAA,MAAC;AAAA;AAAA,IAAA,GAAkCA;AAAA,IACnC;AAAA,MAAC;AAAA;AAAA,IAAA,GAAgD;AAAA,IACjD;AAAA,MAAC;AAAA;AAAA,IAAA,GAA4C;AAAA,IAC7C;AAAA,MAAC;AAAA;AAAA,IAAA,GAAsC,OAAO,CAAA,GAAI,OAAO,MAAM;AAAA,EAAA;AAE5D,SAAA;AACX;AAEA,IAAI,WAAW;AACf,SAAS,gBAAgB,MAAM;AAChB,aAAA;AACf;AAIA,SAAS,iBAAiB,MAAM1B,UAAS,MAAM;AAGvC,cAAA,SAAS,KAAK,aAAiD;AAAA,IAC3D,WAAW,KAAK,IAAI;AAAA,IACpB;AAAA,IACA,SAAAA;AAAA,IACA;AAAA,EAAA,CACH;AACT;AACA,MAAM,oBAAmC;AAAA,EAAmB;AAAA;AAAiE;AAC7H,SAAS,mBAAmB,MAAM;AAC9B,SAAO,CAAC,aAAa,YAAY,SAAS,KAAK,MAAM,QAAQ;AACjE;AAEA,MAAMgC,WAAS,iBAAiB;AAChC,MAAMC,UAAQ,YAAYD,QAAM;AAChC,MAAM,gBAAgB;AAAA,EAClB,eAAeA;AAAAA;AAAAA,EACf,uBAAuBC,QAAM;AAAA;AAAA,EAC7B,sBAAsBA,QAAM;AAAA;AAAA,EAC5B,2BAA2BA,QAAM;AAAA;AAAA,EACjC,oBAAoBA,QAAM;AAAA;AAAA,EAC1B,yBAAyBA,QAAM;AAAA;AAAA,EAC/B,sCAAsCA,QAAM;AAAA;AAAA,EAC5C,kBAAkBA,QAAM;AAAA;AAC5B;AAEA,MAAMV,iBAAe;AAAA,EACjB,CAAC,cAAc,aAAa,GAAG;AAAA,EAC/B,CAAC,cAAc,qBAAqB,GAAG;AAAA,EACvC,CAAC,cAAc,oBAAoB,GAAG;AAAA,EACtC,CAAC,cAAc,yBAAyB,GAAG;AAAA,EAC3C,CAAC,cAAc,kBAAkB,GAAG;AAAA,EACpC,CAAC,cAAc,uBAAuB,GAAG;AAAA,EACzC,CAAC,cAAc,oCAAoC,GAAG;AAC1D;AACA,SAASW,iBAAed,UAAS,MAAM;AACnC,SAAO,SAASG,eAAaH,KAAI,GAAG,GAAG,IAAI;AAC/C;AAEA,MAAMA,SAAO,kBAAkB;AAC/B,MAAMe,QAAM,YAAYf,MAAI;AAC5B,MAAM,iBAAiB;AAAA,EACnB,kBAAkBA;AAAAA;AAAAA,EAClB,uBAAuBe,MAAI;AAAA;AAAA,EAC3B,2BAA2BA,MAAI;AAAA;AAAA,EAC/B,gCAAgCA,MAAI;AAAA;AAAA,EACpC,kCAAkCA,MAAI;AAAA;AAAA,EACtC,mCAAmCA,MAAI;AAAA;AAAA,EACvC,yBAAyBA,MAAI;AAAA;AAAA,EAC7B,kBAAkBA,MAAI;AAAA;AAC1B;AACA,SAAS,gBAAgBf,OAAM;AACpB,SAAA,mBAAmBA,OAAM,MAAO,QAAQ,IAAI,aAAa,eAAgB,EAAE,UAAUI,oBAAkB,MAAS;AAC3H;AAEA,MAAMA,kBAAgB;AAAA,EAClB,CAAC,eAAe,gBAAgB,GAAG;AAAA,EACnC,CAAC,eAAe,qBAAqB,GAAG;AAAA,EAExC,CAAC,eAAe,yBAAyB,GAAG;AAAA,EAC5C,CAAC,eAAe,8BAA8B,GAAG;AAAA,EACjD,CAAC,eAAe,gCAAgC,GAAG;AAAA,EACnD,CAAC,eAAe,iCAAiC,GAAG;AAAA,EACpD,CAAC,eAAe,uBAAuB,GAAG;AAC9C;AAGA,SAASY,YAAU,SAAS,SAAS;AAC1B,SAAA,QAAQ,UAAU,OACnB,cAAc,QAAQ,MAAM,IAC5B,cAAc,QAAQ,MAAM;AACtC;AACA,IAAI;AAEJ,SAAS,cAAc,QAAQ;AACvB,MAAA,SAAS,MAAM,GAAG;AACX,WAAA;AAAA,EAAA,OAEN;AACG,QAAA,WAAW,MAAM,GAAG;AAChB,UAAA,OAAO,gBAAgB,kBAAkB,MAAM;AACxC,eAAA;AAAA,MAEF,WAAA,OAAO,YAAY,SAAS,YAAY;AAC7C,cAAM1B,WAAU;AACZ,YAAA,UAAUA,QAAO,GAAG;AACd,gBAAA,gBAAgB,eAAe,gCAAgC;AAAA,QACzE;AACA,eAAQ,iBAAiBA;AAAA,MAAA,OAExB;AACK,cAAA,gBAAgB,eAAe,iCAAiC;AAAA,MAC1E;AAAA,IAAA,OAEC;AACK,YAAA,gBAAgB,eAAe,uBAAuB;AAAA,IAChE;AAAA,EACJ;AACJ;AAiBA,SAAS,mBAAmB,KAAK,UAAU,OACzC;AAES,SAAA,CAAC,GAAG,oBAAI,IAAI;AAAA,IACX;AAAA,IACA,GAAI,QAAQ,QAAQ,IACd,WACA,SAAS,QAAQ,IACb,OAAO,KAAK,QAAQ,IACpB,SAAS,QAAQ,IACb,CAAC,QAAQ,IACT,CAAC,KAAK;AAAA,EACvB,CAAA,CAAC;AACV;AAiBA,SAAS,wBAAwB,KAAK,UAAU,OAAO;AACnD,QAAM,cAAc,SAAS,KAAK,IAAI,QAAQ;AAC9C,QAAM,UAAU;AACZ,MAAA,CAAC,QAAQ,oBAAoB;AACrB,YAAA,yCAAyB;EACrC;AACA,MAAI,QAAQ,QAAQ,mBAAmB,IAAI,WAAW;AACtD,MAAI,CAAC,OAAO;AACR,YAAQ,CAAA;AAEJ,QAAA,QAAQ,CAAC,KAAK;AAEX,WAAA,QAAQ,KAAK,GAAG;AACX,cAAA,mBAAmB,OAAO,OAAO,QAAQ;AAAA,IACrD;AAGA,UAAM,WAAW,QAAQ,QAAQ,KAAK,CAAC,cAAc,QAAQ,IACvD,WACA,SAAS,SAAS,IACd,SAAS,SAAS,IAClB;AAEV,YAAQ,SAAS,QAAQ,IAAI,CAAC,QAAQ,IAAI;AACtC,QAAA,QAAQ,KAAK,GAAG;AACG,yBAAA,OAAO,OAAO,KAAK;AAAA,IAC1C;AACQ,YAAA,mBAAmB,IAAI,aAAa,KAAK;AAAA,EACrD;AACO,SAAA;AACX;AACA,SAAS,mBAAmB,OAAO,OAAO,QAAQ;AAC9C,MAAI,SAAS;AACJ,WAAA,IAAI,GAAG,IAAI,MAAM,UAAU,UAAU,MAAM,GAAG,KAAK;AAClD,UAAA,SAAS,MAAM,CAAC;AAClB,QAAA,SAAS,MAAM,GAAG;AAClB,eAAS,oBAAoB,OAAO,MAAM,CAAC,GAAG,MAAM;AAAA,IACxD;AAAA,EACJ;AACO,SAAA;AACX;AACA,SAAS,oBAAoB,OAAO,QAAQ,QAAQ;AAC5C,MAAA;AACE,QAAA,SAAS,OAAO,MAAM,GAAG;AAC5B,KAAA;AACO,UAAA,SAAS,OAAO,KAAK,GAAG;AACrB,aAAA,kBAAkB,OAAO,QAAQ,MAAM;AACzC,WAAA,OAAO,IAAI,CAAC;AAAA,EACvB,SAAS,OAAO,UAAU,WAAW;AAC9B,SAAA;AACX;AACA,SAAS,kBAAkB,OAAO,QAAQ,QAAQ;AAC9C,MAAI,SAAS;AACb,MAAI,CAAC,MAAM,SAAS,MAAM,GAAG;AAChB,aAAA;AACT,QAAI,QAAQ;AACR,eAAS,OAAO,OAAO,SAAS,CAAC,MAAM;AACvC,YAAM,SAAS,OAAO,QAAQ,MAAM,EAAE;AACtC,YAAM,KAAK,MAAM;AACZ,WAAA,QAAQ,MAAM,KAAK,cAAc,MAAM,MACxC,OAAO,MAAM,GACf;AAEE,iBAAS,OAAO,MAAM;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AACO,SAAA;AACX;AAOA,MAAM2B,YAAU;AAChB,MAAM,eAAe;AACrB,MAAM,iBAAiB;AACvB,MAAM,wBAAwB;AAC9B,MAAM,aAAa,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,EAAE,kBAAA,CAAmB,GAAG,IAAI,OAAO,CAAC,CAAC;AAChF,SAAS,4BAA4B;AAC1B,SAAA;AAAA,IACH,OAAO,CAAC,KAAKX,UAAS;AAElB,aAAOA,UAAS,UAAU,SAAS,GAAG,IAChC,IAAI,YACJ,IAAAA,UAAS,WAAW,SAAS,GAAG,KAAK,iBAAiB,MAClD,IAAI,SAAS,YACb,IAAA;AAAA,IACd;AAAA,IACA,OAAO,CAAC,KAAKA,UAAS;AAElB,aAAOA,UAAS,UAAU,SAAS,GAAG,IAChC,IAAI,YACJ,IAAAA,UAAS,WAAW,SAAS,GAAG,KAAK,iBAAiB,MAClD,IAAI,SAAS,YACb,IAAA;AAAA,IACd;AAAA,IACA,YAAY,CAAC,KAAKA,UAAS;AAEvB,aAAQA,UAAS,UAAU,SAAS,GAAG,IACjC,WAAW,GAAG,IACdA,UAAS,WAAW,SAAS,GAAG,KAAK,iBAAiB,MAClD,WAAW,IAAI,QAAQ,IACvB;AAAA,IACd;AAAA,EAAA;AAER;AACA,IAAI;AACJ,SAAS,wBAAwB,UAAU;AAC3B,cAAA;AAChB;AACA,IAAI;AAQJ,SAAS,wBAAwB,UAAU;AAC3B,cAAA;AAChB;AACA,IAAI;AAQJ,SAAS,yBAAyB,YAAY;AAC5B,gBAAA;AAClB;AAEA,IAAI,kBAAmB;AAEvB,MAAM,+CAAoB,CAAC,SAAS;AACd,oBAAA;AACtB;AAEA,MAAM,+CAAoB,MAAM;AAChC,IAAI,mBAAmB;AACvB,MAAM,qBAAqB,CAAC,YAAY;AACjB,qBAAA;AACvB;AACA,MAAM,qBAAqB,MAAM;AAEjC,IAAI,OAAO;AACX,SAAS,kBAAkB,UAAU,IAAI;AAErC,QAAM,SAAS,WAAW,QAAQ,MAAM,IAAI,QAAQ,SAAS;AAC7D,QAAM1B,WAAU,SAAS,QAAQ,OAAO,IAAI,QAAQ,UAAUqC;AACxD,QAAA,SAAS,SAAS,QAAQ,MAAM,KAAK,WAAW,QAAQ,MAAM,IAC9D,QAAQ,SACR;AACN,QAAM,UAAU,WAAW,MAAM,IAAI,iBAAiB;AACtD,QAAM,iBAAiB,QAAQ,QAAQ,cAAc,KACjD,cAAc,QAAQ,cAAc,KACpC,SAAS,QAAQ,cAAc,KAC/B,QAAQ,mBAAmB,QACzB,QAAQ,iBACR;AACN,QAAM,WAAW,cAAc,QAAQ,QAAQ,IACzC,QAAQ,WACR,EAAE,CAAC,OAAO,GAAG,CAAA;AACnB,QAAM,kBAAkB,cAAc,QAAQ,eAAe,IACnD,QAAQ,kBACR,EAAE,CAAC,OAAO,GAAG,CAAA;AAEvB,QAAM,gBAAgB,cAAc,QAAQ,aAAa,IAC/C,QAAQ,gBACR,EAAE,CAAC,OAAO,GAAG,CAAA;AAEjB,QAAA,YAAY,OAAO,IAAI,QAAQ,aAAa,CAAI,GAAA,0BAAA,CAA2B;AAC3E,QAAA,cAAc,QAAQ,eAAe;AAC3C,QAAM,UAAU,WAAW,QAAQ,OAAO,IAAI,QAAQ,UAAU;AAC1D,QAAA,cAAc,UAAU,QAAQ,WAAW,KAAK,SAAS,QAAQ,WAAW,IAC5E,QAAQ,cACR;AACA,QAAA,eAAe,UAAU,QAAQ,YAAY,KAAK,SAAS,QAAQ,YAAY,IAC/E,QAAQ,eACR;AACA,QAAA,iBAAiB,CAAC,CAAC,QAAQ;AAC3B,QAAA,cAAc,CAAC,CAAC,QAAQ;AAC9B,QAAM,kBAAkB,WAAW,QAAQ,eAAe,IACpD,QAAQ,kBACR;AACN,QAAM,YAAY,cAAc,QAAQ,SAAS,IAAI,QAAQ,YAAY;AACzE,QAAM,kBAAkB,UAAU,QAAQ,eAAe,IACnD,QAAQ,kBACR;AACA,QAAA,kBAAkB,CAAC,CAAC,QAAQ;AAClC,QAAM,kBAAkB,WAAW,QAAQ,eAAe,IACpD,QAAQ,kBACR;AACD,MAAA,QAAQ,IAAI,aAAa,gBAC1B,QACA,QACA,WAAW,QAAQ,eAAe,GAAG;AAC5B,aAAAH,iBAAe,cAAc,oCAAoC,CAAC;AAAA,EAC/E;AACA,QAAM,kBAAkB,WAAW,QAAQ,eAAe,IACpD,QAAQ,kBACR,aAAa;AACnB,QAAM,mBAAmB,WAAW,QAAQ,gBAAgB,IACtD,QAAQ,mBACR,eAAe;AACrB,QAAM,kBAAkB,SAAS,QAAQ,eAAe,IAClD,QAAQ,kBACR;AAEN,QAAM,kBAAkB;AAClB,QAAA,uBAAuB,SAAS,gBAAgB,oBAAoB,IAChE,gBAAgB,2CACZ;AAER,QAAA,qBAAqB,SAAS,gBAAgB,kBAAkB,IAC5D,gBAAgB,yCACZ;AAEd,QAAM,SAAS,SAAS,gBAAgB,MAAM,IAAI,gBAAgB,SAAS;AAC3E;AACA,QAAM,UAAU;AAAA,IACZ,SAAAlC;AAAA,IACA,KAAK;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;AACI,YAAQ,kBAAkB;AAC1B,YAAQ,gBAAgB;AACxB,YAAQ,uBAAuB;AAC/B,YAAQ,qBAAqB;AAAA,EACjC;AAEK,MAAA,QAAQ,IAAI,aAAa,cAAe;AACzC,YAAQ,cACJ,gBAAgB,eAAe,OACzB,gBAAgB,cAChB;AAAA,EACd;AAEA,MAAK,QAAQ,IAAI,aAAa,gBAAiB,2BAA2B;AACrD,qBAAA,SAASA,UAAS,MAAM;AAAA,EAC7C;AACO,SAAA;AACX;AAEA,SAAS,wBAAwB,UAAU,KAAK;AAC5C,SAAO,oBAAoB,SAAS,SAAS,KAAK,GAAG,IAAI;AAC7D;AAEA,SAAS,uBAAuB,SAAS,KAAK;AAC1C,SAAO,mBAAmB,SAAS,QAAQ,KAAK,GAAG,IAAI;AAC3D;AAEA,SAAS,cAAc,SAAS,KAAK,QAAQ,aAAa0B,OAAM;AACtD,QAAA,EAAE,SAAS,OAAW,IAAA;AAEvB,MAAA,QAAQ,IAAI,aAAa,cAAe;AACzC,UAAM,UAAU,QAAQ;AACxB,QAAI,SAAS;AACT,cAAQ,KAAK,WAAmD;AAAA,QAC5D;AAAA,QACA;AAAA,QACA,MAAAA;AAAA,QACA,SAAS,GAAGA,KAAI,IAAI,GAAG;AAAA,MAAA,CAC1B;AAAA,IACL;AAAA,EACJ;AACA,MAAI,YAAY,MAAM;AAClB,UAAM,MAAM,QAAQ,SAAS,QAAQ,KAAKA,KAAI;AACvC,WAAA,SAAS,GAAG,IAAI,MAAM;AAAA,EAAA,OAE5B;AACD,QAAK,QAAQ,IAAI,aAAa,gBAAiB,uBAAuB,aAAa,GAAG,GAAG;AACrF,aAAOQ,iBAAe,cAAc,eAAe,EAAE,KAAK,OAAQ,CAAA,CAAC;AAAA,IACvE;AACO,WAAA;AAAA,EACX;AACJ;AAEA,SAAS,qBAAqB,KAAK,QAAQ,UAAU;AACjD,QAAM,UAAU;AACR,UAAA,yCAAyB;AAC7B,MAAA,iBAAiB,KAAK,UAAU,MAAM;AAC9C;AAEA,SAAS,mBAAmB,QAAQ,eAAe;AAC/C,MAAI,WAAW;AACJ,WAAA;AACJ,SAAA,OAAO,MAAM,GAAG,EAAE,CAAC,MAAM,cAAc,MAAM,GAAG,EAAE,CAAC;AAC9D;AAEA,SAAS,mBAAmB,cAAc,SAAS;AACzC,QAAA1B,SAAQ,QAAQ,QAAQ,YAAY;AAC1C,MAAIA,WAAU,IAAI;AACP,WAAA;AAAA,EACX;AACA,WAAS,IAAIA,SAAQ,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAC7C,QAAI,mBAAmB,cAAc,QAAQ,CAAC,CAAC,GAAG;AACvC,aAAA;AAAA,IACX;AAAA,EACJ;AACO,SAAA;AACX;AAGA,SAAS,OAAO,KAAK;AACjB,QAAM,MAAM,CAAC,QAAQ,YAAY,KAAK,GAAG;AAClC,SAAA;AACX;AACA,SAAS,YAAY,KAAK,KAAK;AACrB,QAAA,OAAO,IAAI,KAAK,IAAI;AAC1B,OAAK,KAAK,KAAK,KAAK,UAAU,GAA0B;AACpD,UAAM,SAAS;AACT,UAAA,QAAQ,OAAO,KAAK,OAAO;AACjC,WAAO,IAAI,OAAO,MAAM,OAAO,CAAC,UAAU,MAAM;AAAA,MAC5C,GAAG;AAAA,MACH,mBAAmB,KAAK,CAAC;AAAA,IAAA,GAC1B,CAAA,CAAE,CAAC;AAAA,EAAA,OAEL;AACM,WAAA,mBAAmB,KAAK,IAAI;AAAA,EACvC;AACJ;AACA,SAAS,mBAAmB,KAAK,MAAM;AAC7B,QAAA,UAAU,KAAK,KAAK,KAAK;AAC/B,MAAI,SAAS;AACF,WAAA,IAAI,SAAS,SACd,UACA,IAAI,UAAU,CAAC,OAAO,CAAC;AAAA,EAAA,OAE5B;AACD,UAAM,YAAY,KAAK,KAAK,KAAK,OAAO,OAAO,CAAC,KAAK,MAAM,CAAC,GAAG,KAAK,kBAAkB,KAAK,CAAC,CAAC,GAAG,CAAA,CAAE;AAC3F,WAAA,IAAI,UAAU,QAAQ;AAAA,EACjC;AACJ;AACA,SAAS,kBAAkB,KAAK,MAAM;AAC5B,QAAAkB,QAAO,KAAK,KAAK,KAAK;AAC5B,UAAQA,OAAM;AAAA,IACV,KAAK,GAAwB;AACzB,YAAM,OAAO;AACL,aAAA,KAAK,KAAK,KAAK;AAAA,IAC3B;AAAA,IACA,KAAK,GAA2B;AAC5B,YAAM,UAAU;AACR,aAAA,QAAQ,KAAK,QAAQ;AAAA,IACjC;AAAA,IACA,KAAK,GAAyB;AAC1B,YAAM,QAAQ;AACP,aAAA,IAAI,YAAY,IAAI,MAAM,MAAM,KAAK,MAAM,GAAG,CAAC;AAAA,IAC1D;AAAA,IACA,KAAK,GAAwB;AACzB,YAAM,OAAO;AACN,aAAA,IAAI,YAAY,IAAI,KAAK,KAAK,KAAK,OAAO,KAAK,IAAI,KAAK,KAAK,CAAC;AAAA,IACzE;AAAA,IACA,KAAK,GAA0B;AAC3B,YAAM,SAAS;AACT,YAAA,WAAW,OAAO,KAAK,OAAO;AACpC,aAAO,IAAI,OAAO,kBAAkB,KAAK,OAAO,KAAK,OAAO,GAAG,GAAG,WAAW,kBAAkB,KAAK,QAAQ,IAAI,QAAW,IAAI,IAAI;AAAA,IACvI;AAAA,IACA,KAAK,GAA6B;AAC9B,YAAM,YAAY;AACV,aAAA,UAAU,KAAK,UAAU;AAAA,IACrC;AAAA,IACA,KAAK,GAAkC;AACnC,YAAM,iBAAiB;AACf,aAAA,eAAe,KAAK,eAAe;AAAA,IAC/C;AAAA,IACA;AACI,YAAM,IAAI,MAAM,+CAA+CA,KAAI,EAAE;AAAA,EAC7E;AACJ;AAEA,MAAM,eAAe;AACrB,SAAS,iBAAiB,QAAQ,iBAAiB;AAC3C,MAAA,mBAAmB,cAAc,MAAM,GAAG;AAC1C,SAAK,SAAS,cAAc,EAAE,OAAA,CAAQ,CAAC;AAAA,EAC3C;AACJ;AACA,MAAM,oBAAoB,CAAC,YAAY;AACvC,IAAI,eAAsB,uBAAA,OAAO,IAAI;AACrC,SAAS,cAAc,OAAO;AACtB,MAAA,MAAM,SAAS,iBAAiB,mBAAmB;AAC9C,SAAA;AAAA;AAAA,qCAGqC,MAAM,OAAO,GAAG;AAAA,EAC9D;AACJ;AAIA,MAAM,eAAe,CAAC,QAAQ,SAAS,GAAG,MACrC,IAAI,MAAM,KAAK,IAAI,SAAS,OAC5B,OAAO,OAAO,UAAU;AAC7B,SAAS,YAAY,SAAS,UAAU,IAAI;AAExC,MAAI,cAAc;AACZ,QAAA,UAAU,QAAQ,WAAW;AAC3B,UAAA,UAAU,CAAC,QAAQ;AACT,kBAAA;AACd,YAAQ,GAAG;AAAA,EAAA;AAGf,SAAO,EAAE,GAAG,cAAc,SAAS,OAAO,GAAG,YAAY;AAC7D;AAiCA,SAAS,QAAQ,SAAS,SAAS;AAE1B,MAAA,QAAQ,IAAI,aAAa,cAAe;AACzC,YAAQ,SAAS;AAAA,EACrB;AAEI,MAAA,SAAS,OAAO,GAAG;AAEnB,UAAM,kBAAkB,UAAU,QAAQ,eAAe,IACnD,QAAQ,kBACR;AACL,YAAQ,IAAI,aAAa,gBAAiB,iBAAiB,SAAS,eAAe;AAE9E,UAAA,aAAa,QAAQ,cAAc;AACnC,UAAA,WAAW,WAAW,OAAO;AAC7B,UAAA,SAAS,aAAa,QAAQ;AACpC,QAAI,QAAQ;AACD,aAAA;AAAA,IACX;AAEA,UAAM,EAAE,KAAK,gBAAgB,YAAY,SAAS;AAAA,MAC9C,GAAG;AAAA,MACH,UAAW,QAAQ,IAAI,aAAa;AAAA,MACpC,KAAK;AAAA,IAAA,CACR;AAEK,UAAA,MAAM,OAAO,GAAG;AAEtB,WAAO,CAAC,cACD,aAAa,QAAQ,IAAI,MAC1B;AAAA,EAAA,OAEL;AACD,QAAK,QAAQ,IAAI,aAAa,gBAAiB,CAAC,aAAa,OAAO,GAAG;AAC9D,WAAA,yCAAyC,QAAQ,GAAG,wCAAwC;AACjG,aAAQ,MAAM;AAAA,IAClB;AAEA,UAAM,WAAW,QAAQ;AACzB,QAAI,UAAU;AACJ,YAAA,SAAS,aAAa,QAAQ;AACpC,UAAI,QAAQ;AACD,eAAA;AAAA,MACX;AAEA,aAAQ,aAAa,QAAQ,IACzB,OAAO,OAAO;AAAA,IAAA,OAEjB;AACD,aAAO,OAAO,OAAO;AAAA,IACzB;AAAA,EACJ;AACJ;AAEA,MAAM,wBAAwB,MAAM;AACpC,MAAM,oBAAoB,CAAC,QAAQ,WAAW,GAAG;AAEjD,SAAS,UAAU,YAAY,MAAM;AACjC,QAAM,EAAE,gBAAgB,iBAAiB,aAAa,iBAAiB,gBAAgB,SAAa,IAAA;AACpG,QAAM,CAAC,KAAK,OAAO,IAAI,mBAAmB,GAAG,IAAI;AACjD,QAAM,cAAc,UAAU,QAAQ,WAAW,IAC3C,QAAQ,cACR,QAAQ;AACd,QAAM,eAAe,UAAU,QAAQ,YAAY,IAC7C,QAAQ,eACR,QAAQ;AACd,QAAM,kBAAkB,UAAU,QAAQ,eAAe,IACnD,QAAQ,kBACR,QAAQ;AACR,QAAA,kBAAkB,CAAC,CAAC,QAAQ;AAE5B,QAAA,kBAAkB,SAAS,QAAQ,OAAO,KAAK,UAAU,QAAQ,OAAO,IACxE,CAAC,UAAU,QAAQ,OAAO,IACtB,QAAQ,UACP,CAAC,kBAAkB,MAAM,MAAM,MACpC,iBACK,CAAC,kBAAkB,MAAM,MAAM,MAChC;AACJ,QAAA,mBAAmB,kBAAkB,oBAAoB;AACzD,QAAA,SAASU,YAAU,SAAS,OAAO;AAEzC,qBAAmB,aAAa,OAAO;AAGvC,MAAI,CAAC,aAAa,cAAc,OAAO,IAAI,CAAC,kBACtC,qBAAqB,SAAS,KAAK,QAAQ,gBAAgB,cAAc,WAAW,IACpF;AAAA,IACE;AAAA,IACA;AAAA,IACA,SAAS,MAAM,KAAK,CAAC;AAAA,EAAA;AAO7B,MAAIjB,UAAS;AAEb,MAAI,eAAe;AACf,MAAA,CAAC,mBACD,EAAE,SAASA,OAAM,KACb,aAAaA,OAAM,KACnB,kBAAkBA,OAAM,IAAI;AAChC,QAAI,kBAAkB;AAClBA,gBAAS;AACMA,qBAAAA;AAAAA,IACnB;AAAA,EACJ;AAEA,MAAI,CAAC,oBACA,EAAE,SAASA,OAAM,KACd,aAAaA,OAAM,KACnB,kBAAkBA,OAAM,MACxB,CAAC,SAAS,YAAY,IAAI;AAC9B,WAAO,cAAc,eAAe;AAAA,EACxC;AAEK,MAAA,QAAQ,IAAI,aAAa,gBAAiB,SAASA,OAAM,KAAK,QAAQ,mBAAmB,MAAM;AAC3F,SAAA,yLAGgC,GAAG,IAAI;AACrC,WAAA;AAAA,EACX;AAEA,MAAI,WAAW;AACf,QAAM,UAAU,MAAM;AACP,eAAA;AAAA,EAAA;AAGf,QAAM,MAAM,CAAC,kBAAkBA,OAAM,IAC/B,qBAAqB,SAAS,KAAK,cAAcA,SAAQ,cAAc,OAAO,IAC9EA;AAEN,MAAI,UAAU;AACHA,WAAAA;AAAAA,EACX;AAEA,QAAM,aAAa,yBAAyB,SAAS,cAAc,SAAS,OAAO;AAC7E,QAAA,aAAa,qBAAqB,UAAU;AAClD,QAAM,WAAW,gBAAgB,SAAS,KAAK,UAAU;AAEzD,QAAM,MAAM,kBACN,gBAAgB,UAAU,GAAG,IAC7B;AAEN,MAAK,QAAQ,IAAI,aAAa,gBAAiB,2BAA2B;AAEtE,UAAM,WAAW;AAAA,MACb,WAAW,KAAK,IAAI;AAAA,MACpB,KAAK,SAAS,GAAG,IACX,MACA,kBAAkBA,OAAM,IACpBA,QAAO,MACP;AAAA,MACV,QAAQ,iBAAiB,kBAAkBA,OAAM,IAC3CA,QAAO,SACP;AAAA,MACN,QAAQ,SAASA,OAAM,IACjBA,UACA,kBAAkBA,OAAM,IACpBA,QAAO,SACP;AAAA,MACV,SAAS;AAAA,IAAA;AAEJ,aAAA,OAAO,OAAO,CAAC,GAAG,QAAQ,QAAQ,uCAAuB,CAAA,CAAE;AACpE,sBAAkB,QAAQ;AAAA,EAC9B;AACO,SAAA;AACX;AACA,SAAS,aAAa,SAAS;AACvB,MAAA,QAAQ,QAAQ,IAAI,GAAG;AACf,YAAA,OAAO,QAAQ,KAAK,IAAI,CAAA,SAAQ,SAAS,IAAI,IAAI,WAAW,IAAI,IAAI,IAAI;AAAA,EAE3E,WAAA,SAAS,QAAQ,KAAK,GAAG;AAC9B,WAAO,KAAK,QAAQ,KAAK,EAAE,QAAQ,CAAO,QAAA;AACtC,UAAI,SAAS,QAAQ,MAAM,GAAG,CAAC,GAAG;AAC9B,gBAAQ,MAAM,GAAG,IAAI,WAAW,QAAQ,MAAM,GAAG,CAAC;AAAA,MACtD;AAAA,IAAA,CACH;AAAA,EACL;AACJ;AACA,SAAS,qBAAqB,SAAS,KAAK,QAAQ,gBAAgB,cAAc,aAAa;AAC3F,QAAM,EAAE,UAAU,QAAQ,iBAAiBmB,eAAc,iBAAqB,IAAA;AAC9E,QAAM,UAAU,iBAAiB,SAAS,gBAAgB,MAAM;AAChE,MAAI,UAAU,CAAA;AACV,MAAA;AACJ,MAAInB,UAAS;AACb,MAAI,OAAO;AACX,MAAI,KAAK;AACT,QAAMO,QAAO;AACb,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACtB,mBAAA,KAAK,QAAQ,CAAC;AAC7B,QAAK,QAAQ,IAAI,aAAa,gBAC1B,WAAW,gBACX,CAAC,mBAAmB,QAAQ,YAAY,KACxC,wBAAwB,cAAc,GAAG,GAAG;AACrC,aAAAQ,iBAAe,cAAc,uBAAuB;AAAA,QACvD;AAAA,QACA,QAAQ;AAAA,MACX,CAAA,CAAC;AAAA,IACN;AAEA,QAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW,cAAc;AACpE,YAAM,UAAU,QAAQ;AACxB,UAAI,SAAS;AACT,gBAAQ,KAAK,YAAoD;AAAA,UAC7D,MAAAR;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,GAAGA,KAAI,IAAI,GAAG;AAAA,QAAA,CAC1B;AAAA,MACL;AAAA,IACJ;AAEI,cAAA,SAAS,YAAY,KAAK;AAE9B,QAAI,QAAQ;AACR,QAAA;AACA,QAAA;AACJ,QAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW;AAC9C,cAAA,SAAO,YAAY,IAAI;AACpB,iBAAA;AACF,eAAA;AAAA,IAEb;AACA,SAAKP,UAASmB,cAAa,SAAS,GAAG,OAAO,MAAM;AAEhDnB,gBAAS,QAAQ,GAAG;AAAA,IACxB;AAEA,QAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW;AAChD,YAAA,MAAa,SAAA,YAAY,IAAI;AACnC,YAAM,UAAU,QAAQ;AACpB,UAAA,WAAW,SAASA,SAAQ;AAC5B,gBAAQ,KAAK,mBAAmE;AAAA,UAC5E,MAAM;AAAA,UACN;AAAA,UACA,SAASA;AAAAA,UACT,MAAM,MAAM;AAAA,UACZ,SAAS,GAAGO,KAAI,IAAI,GAAG;AAAA,QAAA,CAC1B;AAAA,MACL;AACI,UAAA,YAAY,UAAU,QAAQ,SAAS;AACvC,aAAK,MAAM;AACH,gBAAA,2BAA2B,UAAU,MAAM;AAAA,MACvD;AAAA,IACJ;AACI,QAAA,SAASP,OAAM,KAAK,aAAaA,OAAM,KAAK,kBAAkBA,OAAM,GAAG;AACvE;AAAA,IACJ;AACA,QAAI,CAAC,mBAAmB,cAAc,OAAO,GAAG;AAC5C,YAAM,aAAa;AAAA,QAAc;AAAA;AAAA,QACjC;AAAA,QAAK;AAAA,QAAc;AAAA,QAAaO;AAAA,MAAA;AAChC,UAAI,eAAe,KAAK;AACpBP,kBAAS;AAAA,MACb;AAAA,IACJ;AACO,WAAA;AAAA,EACX;AACO,SAAA,CAACA,SAAQ,cAAc,OAAO;AACzC;AACA,SAAS,qBAAqB,SAAS,KAAK,cAAcA,SAAQ,cAAc,SAAS;AAC/E,QAAA,EAAE,iBAAiB,gBAAoB,IAAA;AACzC,MAAA,kBAAkBA,OAAM,GAAG;AAC3B,UAAMoB,OAAMpB;AACZoB,SAAI,SAASA,KAAI,UAAU;AAC3BA,SAAI,MAAMA,KAAI,OAAO;AACdA,WAAAA;AAAAA,EACX;AACA,MAAI,mBAAmB,MAAM;AACzB,UAAMA,OAAO,MAAMpB;AACnBoB,SAAI,SAAS;AACbA,SAAI,MAAM;AACHA,WAAAA;AAAAA,EACX;AAEA,MAAI,QAAQ;AACR,MAAA;AACA,MAAA;AACJ,MAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW;AAC9C,YAAA,SAAO,YAAY,IAAI;AACpB,eAAA;AACF,aAAA;AAAA,EAEb;AACM,QAAA,MAAM,gBAAgBpB,SAAQ,kBAAkB,SAAS,cAAc,cAAcA,SAAQ,iBAAiB,OAAO,CAAC;AAE5H,MAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW;AAChD,UAAA,MAAa,SAAA,YAAY,IAAI;AACnC,UAAM,UAAU,QAAQ;AACxB,QAAI,WAAW,OAAO;AAClB,cAAQ,KAAK,uBAA2E;AAAA,QACpF,MAAM;AAAA,QACN,SAASA;AAAAA,QACT,MAAM,MAAM;AAAA,QACZ,SAAS,GAAG,WAAW,IAAI,GAAG;AAAA,MAAA,CACjC;AAAA,IACL;AACI,QAAA,YAAY,UAAU,QAAQ,SAAS;AACvC,WAAK,MAAM;AACH,cAAA,+BAA+B,UAAU,MAAM;AAAA,IAC3D;AAAA,EACJ;AACA,MAAI,SAAS;AACb,MAAI,MAAM;AACV,MAAI,SAASA;AACN,SAAA;AACX;AACA,SAAS,gBAAgB,SAAS,KAAK,QAAQ;AAE3C,MAAI,QAAQ;AACR,MAAA;AACA,MAAA;AACJ,MAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW;AAC9C,YAAA,SAAO,YAAY,IAAI;AACpB,eAAA;AACF,aAAA;AAAA,EAEb;AACM,QAAA,WAAW,IAAI,MAAM;AAE3B,MAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW;AAChD,UAAA,MAAa,SAAA,YAAY,IAAI;AACnC,UAAM,UAAU,QAAQ;AACxB,QAAI,WAAW,OAAO;AAClB,cAAQ,KAAK,sBAAyE;AAAA,QAClF,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM,MAAM;AAAA,QACZ,SAAS,GAAG,WAAW,IAAI,IAAI,GAAG;AAAA,MAAA,CACrC;AAAA,IACL;AACI,QAAA,YAAY,UAAU,QAAQ,SAAS;AACvC,WAAK,MAAM;AACH,cAAA,8BAA8B,UAAU,MAAM;AAAA,IAC1D;AAAA,EACJ;AACO,SAAA;AACX;AAEA,SAAS,sBAAsB,MAAM;AACjC,QAAM,CAAC,MAAM,MAAM,IAAI,IAAI;AAC3B,QAAM,UAAU,CAAA;AAChB,MAAI,CAAC,SAAS,IAAI,KACd,CAAC,SAAS,IAAI,KACd,CAAC,kBAAkB,IAAI,KACvB,CAAC,aAAa,IAAI,GAAG;AACf,UAAA,gBAAgB,eAAe,gBAAgB;AAAA,EACzD;AAEM,QAAA,MAAM,SAAS,IAAI,IACnB,OAAO,IAAI,IACX,kBAAkB,IAAI,IAClB,OACA;AACN,MAAA,SAAS,IAAI,GAAG;AAChB,YAAQ,SAAS;AAAA,EAAA,WAEZ,SAAS,IAAI,GAAG;AACrB,YAAQ,UAAU;AAAA,EAAA,WAEb,cAAc,IAAI,KAAK,CAAC,cAAc,IAAI,GAAG;AAClD,YAAQ,QAAQ;AAAA,EAAA,WAEX,QAAQ,IAAI,GAAG;AACpB,YAAQ,OAAO;AAAA,EACnB;AACI,MAAA,SAAS,IAAI,GAAG;AAChB,YAAQ,SAAS;AAAA,EAAA,WAEZ,SAAS,IAAI,GAAG;AACrB,YAAQ,UAAU;AAAA,EAAA,WAEb,cAAc,IAAI,GAAG;AAC1B,WAAO,SAAS,IAAI;AAAA,EACxB;AACO,SAAA,CAAC,KAAK,OAAO;AACxB;AACA,SAAS,kBAAkB,SAAS,QAAQ,KAAK,QAAQ,iBAAiB,SAAS;AACxE,SAAA;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS,CAAC,QAAQ;AACd,iBAAW,QAAQ,GAAG;AACjB,UAAA,QAAQ,IAAI,aAAa,cAAe;AACnC,cAAA,UAAU,sBAAsB,MAAM;AACtC,cAAA,UAAU,8BAA8B,IAAI,OAAO;AACzD,cAAM,YAAY,IAAI,YAClB,WACA,kBAAkB,SAAS,IAAI,SAAS,MAAM,QAAQ,IAAI,SAAS,IAAI,MAAM;AACjF,cAAM,UAAU,QAAQ;AACxB,YAAI,WAAW,SAAS;AACpB,kBAAQ,KAAK,iBAA+D;AAAA,YACxE,SAAS;AAAA,YACT,OAAO,IAAI;AAAA,YACX,OAAO,IAAI,YAAY,IAAI,SAAS,MAAM;AAAA,YAC1C,KAAK,IAAI,YAAY,IAAI,SAAS,IAAI;AAAA,YACtC,SAAS,GAAG,WAAW,IAAI,GAAG;AAAA,UAAA,CACjC;AAAA,QACL;AACQ,gBAAA,MAAM,YAAY,GAAG,OAAO;AAAA,EAAK,SAAS,KAAK,OAAO;AAAA,MAAA,OAE7D;AACK,cAAA;AAAA,MACV;AAAA,IACJ;AAAA,IACA,YAAY,CAACqB,YAAW,uBAAuB,QAAQ,KAAKA,OAAM;AAAA,EAAA;AAE1E;AACA,SAAS,sBAAsB,QAAQ;AAC/B,MAAA,SAAS,MAAM,GAAG;AACX,WAAA;AAAA,EAAA,OAEN;AACD,QAAI,OAAO,OAAO,OAAO,IAAI,QAAQ;AACjC,aAAO,OAAO,IAAI;AAAA,IACtB;AAAA,EACJ;AACJ;AACA,SAAS,yBAAyB,SAAS,QAAQ,SAAS,SAAS;AAC3D,QAAA,EAAE,WAAW,aAAa,iBAAiBF,eAAc,gBAAgB,cAAc,aAAa,gBAAoB,IAAA;AACxH,QAAA,iBAAiB,CAAC,QAAQ;AACxB,QAAA,MAAMA,cAAa,SAAS,GAAG;AAE/B,QAAA,OAAO,QAAQ,iBAAiB;AAC1B,YAAA,CAAKG,EAAAA,EAAAA,QAAO,IAAI,qBAAqB,iBAAiB,KAAK,QAAQ,gBAAgB,cAAc,WAAW;AAC5GH,YAAAA,cAAaG,UAAS,GAAG;AAAA,IACnC;AACA,QAAI,SAAS,GAAG,KAAK,aAAa,GAAG,GAAG;AACpC,UAAI,WAAW;AACf,YAAM,UAAU,MAAM;AACP,mBAAA;AAAA,MAAA;AAEf,YAAM,MAAM,qBAAqB,SAAS,KAAK,QAAQ,KAAK,KAAK,OAAO;AACjE,aAAA,CAAC,WACF,MACA;AAAA,IAAA,WAED,kBAAkB,GAAG,GAAG;AACtB,aAAA;AAAA,IAAA,OAEN;AAEM,aAAA;AAAA,IACX;AAAA,EAAA;AAEJ,QAAM,aAAa;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,EAAA;AAEd,MAAI,QAAQ,WAAW;AACnB,eAAW,YAAY,QAAQ;AAAA,EACnC;AACA,MAAI,QAAQ,MAAM;AACd,eAAW,OAAO,QAAQ;AAAA,EAC9B;AACA,MAAI,QAAQ,OAAO;AACf,eAAW,QAAQ,QAAQ;AAAA,EAC/B;AACI,MAAA,SAAS,QAAQ,MAAM,GAAG;AAC1B,eAAW,cAAc,QAAQ;AAAA,EACrC;AACO,SAAA;AACX;AAEA,MAAM,cAAc,OAAO,SAAS;AACpC,MAAM,iBAAiB;AAAA,EACnB,gBAAgB,eAAe,OAAO,KAAK,mBAAmB;AAAA,EAC9D,cAAc,eAAe,OAAO,KAAK,iBAAiB;AAC9D;AAGA,SAAS,SAAS,YAAY,MAAM;AAChC,QAAM,EAAE,iBAAiB,aAAa,gBAAgB,QAAQ,iBAAqB,IAAA;AAC7E,QAAA,EAAE,qBAAyB,IAAA;AACjC,MAAK,QAAQ,IAAI,aAAa,gBAAiB,CAAC,eAAe,gBAAgB;AACpE,WAAAP,iBAAe,cAAc,kBAAkB,CAAC;AAChD,WAAA;AAAA,EACX;AACM,QAAA,CAAC,KAAK,OAAO,SAAS,SAAS,IAAI,kBAAkB,GAAG,IAAI;AAClE,QAAM,cAAc,UAAU,QAAQ,WAAW,IAC3C,QAAQ,cACR,QAAQ;AACd,QAAM,eAAe,UAAU,QAAQ,YAAY,IAC7C,QAAQ,eACR,QAAQ;AACR,QAAA,OAAO,CAAC,CAAC,QAAQ;AACjB,QAAA,SAASE,YAAU,SAAS,OAAO;AACzC,QAAM,UAAU;AAAA,IAAiB;AAAA;AAAA,IACjC;AAAA,IAAgB;AAAA,EAAA;AAChB,MAAI,CAAC,SAAS,GAAG,KAAK,QAAQ,IAAI;AAC9B,WAAO,IAAI,KAAK,eAAe,QAAQ,SAAS,EAAE,OAAO,KAAK;AAAA,EAClE;AAEA,MAAI,iBAAiB,CAAA;AACjB,MAAA;AACJ,MAAIjB,UAAS;AACb,MAAI,OAAO;AACX,MAAI,KAAK;AACT,QAAMO,QAAO;AACb,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACtB,mBAAA,KAAK,QAAQ,CAAC;AACxB,QAAA,QAAQ,IAAI,aAAa,gBAC1B,WAAW,gBACX,wBAAwB,cAAc,GAAG,GAAG;AACrC,aAAAQ,iBAAe,cAAc,yBAAyB;AAAA,QACzD;AAAA,QACA,QAAQ;AAAA,MACX,CAAA,CAAC;AAAA,IACN;AAEA,QAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW,cAAc;AACpE,YAAM,UAAU,QAAQ;AACxB,UAAI,SAAS;AACT,gBAAQ,KAAK,YAAoD;AAAA,UAC7D,MAAAR;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,GAAGA,KAAI,IAAI,GAAG;AAAA,QAAA,CAC1B;AAAA,MACL;AAAA,IACJ;AAEI,qBAAA,gBAAgB,YAAY,KAAK;AACrCP,cAAS,eAAe,GAAG;AAC3B,QAAI,cAAcA,OAAM;AACpB;AACJ,kBAAc,SAAS,KAAK,cAAc,aAAaO,KAAI;AACpD,WAAA;AAAA,EACX;AAEA,MAAI,CAAC,cAAcP,OAAM,KAAK,CAAC,SAAS,YAAY,GAAG;AACnD,WAAO,cAAc,eAAe;AAAA,EACxC;AACA,MAAI,KAAK,GAAG,YAAY,KAAK,GAAG;AAC5B,MAAA,CAAC,cAAc,SAAS,GAAG;AAC3B,SAAK,GAAG,EAAE,KAAK,KAAK,UAAU,SAAS,CAAC;AAAA,EAC5C;AACI,MAAA,YAAY,qBAAqB,IAAI,EAAE;AAC3C,MAAI,CAAC,WAAW;AACA,gBAAA,IAAI,KAAK,eAAe,cAAc,OAAO,IAAIA,SAAQ,SAAS,CAAC;AAC1D,yBAAA,IAAI,IAAI,SAAS;AAAA,EAC1C;AACO,SAAA,CAAC,OAAO,UAAU,OAAO,KAAK,IAAI,UAAU,cAAc,KAAK;AAC1E;AAEA,MAAM,+BAA+B;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEA,SAAS,qBAAqB,MAAM;AAChC,QAAM,CAAC,MAAM,MAAM,MAAM,IAAI,IAAI;AACjC,QAAM,UAAU,CAAA;AAChB,MAAI,YAAY,CAAA;AACZ,MAAA;AACA,MAAA,SAAS,IAAI,GAAG;AAGV,UAAA,UAAU,KAAK,MAAM,gCAAgC;AAC3D,QAAI,CAAC,SAAS;AACJ,YAAA,gBAAgB,eAAe,yBAAyB;AAAA,IAClE;AAGA,UAAM,WAAW,QAAQ,CAAC,IACpB,QAAQ,CAAC,EAAE,KAAK,EAAE,WAAW,GAAG,IAC5B,GAAG,QAAQ,CAAC,EAAE,KAAA,CAAM,GAAG,QAAQ,CAAC,EAAE,MAAM,KACxC,GAAG,QAAQ,CAAC,EAAE,KAAK,CAAC,IAAI,QAAQ,CAAC,EAAE,MAAM,KAC7C,QAAQ,CAAC,EAAE;AACT,YAAA,IAAI,KAAK,QAAQ;AACrB,QAAA;AAEA,YAAM,YAAY;AAAA,aAEf,GAAG;AACA,YAAA,gBAAgB,eAAe,yBAAyB;AAAA,IAClE;AAAA,EAAA,WAEK,OAAO,IAAI,GAAG;AACnB,QAAI,MAAM,KAAK,QAAQ,CAAC,GAAG;AACjB,YAAA,gBAAgB,eAAe,qBAAqB;AAAA,IAC9D;AACQ,YAAA;AAAA,EAAA,WAEH,SAAS,IAAI,GAAG;AACb,YAAA;AAAA,EAAA,OAEP;AACK,UAAA,gBAAgB,eAAe,gBAAgB;AAAA,EACzD;AACI,MAAA,SAAS,IAAI,GAAG;AAChB,YAAQ,MAAM;AAAA,EAAA,WAET,cAAc,IAAI,GAAG;AAC1B,WAAO,KAAK,IAAI,EAAE,QAAQ,CAAO,QAAA;AACzB,UAAA,6BAA6B,SAAS,GAAG,GAAG;AAClC,kBAAA,GAAG,IAAI,KAAK,GAAG;AAAA,MAAA,OAExB;AACO,gBAAA,GAAG,IAAI,KAAK,GAAG;AAAA,MAC3B;AAAA,IAAA,CACH;AAAA,EACL;AACI,MAAA,SAAS,IAAI,GAAG;AAChB,YAAQ,SAAS;AAAA,EAAA,WAEZ,cAAc,IAAI,GAAG;AACd,gBAAA;AAAA,EAChB;AACI,MAAA,cAAc,IAAI,GAAG;AACT,gBAAA;AAAA,EAChB;AACA,SAAO,CAAC,QAAQ,OAAO,IAAI,OAAO,SAAS,SAAS;AACxD;AAEA,SAAS,oBAAoB,KAAK,QAAQA,SAAQ;AAC9C,QAAM,UAAU;AAChB,aAAW,OAAOA,SAAQ;AACtB,UAAM,KAAK,GAAG,MAAM,KAAK,GAAG;AAC5B,QAAI,CAAC,QAAQ,qBAAqB,IAAI,EAAE,GAAG;AACvC;AAAA,IACJ;AACQ,YAAA,qBAAqB,OAAO,EAAE;AAAA,EAC1C;AACJ;AAGA,SAAS,OAAO,YAAY,MAAM;AAC9B,QAAM,EAAE,eAAe,aAAa,gBAAgB,QAAQ,iBAAqB,IAAA;AAC3E,QAAA,EAAE,mBAAuB,IAAA;AAC/B,MAAK,QAAQ,IAAI,aAAa,gBAAiB,CAAC,eAAe,cAAc;AAClE,WAAAe,iBAAe,cAAc,oBAAoB,CAAC;AAClD,WAAA;AAAA,EACX;AACM,QAAA,CAAC,KAAK,OAAO,SAAS,SAAS,IAAI,gBAAgB,GAAG,IAAI;AAChE,QAAM,cAAc,UAAU,QAAQ,WAAW,IAC3C,QAAQ,cACR,QAAQ;AACd,QAAM,eAAe,UAAU,QAAQ,YAAY,IAC7C,QAAQ,eACR,QAAQ;AACR,QAAA,OAAO,CAAC,CAAC,QAAQ;AACjB,QAAA,SAASE,YAAU,SAAS,OAAO;AACzC,QAAM,UAAU;AAAA,IAAiB;AAAA;AAAA,IACjC;AAAA,IAAgB;AAAA,EAAA;AAChB,MAAI,CAAC,SAAS,GAAG,KAAK,QAAQ,IAAI;AAC9B,WAAO,IAAI,KAAK,aAAa,QAAQ,SAAS,EAAE,OAAO,KAAK;AAAA,EAChE;AAEA,MAAI,eAAe,CAAA;AACf,MAAA;AACJ,MAAIjB,UAAS;AACb,MAAI,OAAO;AACX,MAAI,KAAK;AACT,QAAMO,QAAO;AACb,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACtB,mBAAA,KAAK,QAAQ,CAAC;AACxB,QAAA,QAAQ,IAAI,aAAa,gBAC1B,WAAW,gBACX,wBAAwB,cAAc,GAAG,GAAG;AACrC,aAAAQ,iBAAe,cAAc,2BAA2B;AAAA,QAC3D;AAAA,QACA,QAAQ;AAAA,MACX,CAAA,CAAC;AAAA,IACN;AAEA,QAAK,QAAQ,IAAI,aAAa,gBAAiB,WAAW,cAAc;AACpE,YAAM,UAAU,QAAQ;AACxB,UAAI,SAAS;AACT,gBAAQ,KAAK,YAAoD;AAAA,UAC7D,MAAAR;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,GAAGA,KAAI,IAAI,GAAG;AAAA,QAAA,CAC1B;AAAA,MACL;AAAA,IACJ;AAEI,mBAAA,cAAc,YAAY,KAAK;AACnCP,cAAS,aAAa,GAAG;AACzB,QAAI,cAAcA,OAAM;AACpB;AACJ,kBAAc,SAAS,KAAK,cAAc,aAAaO,KAAI;AACpD,WAAA;AAAA,EACX;AAEA,MAAI,CAAC,cAAcP,OAAM,KAAK,CAAC,SAAS,YAAY,GAAG;AACnD,WAAO,cAAc,eAAe;AAAA,EACxC;AACA,MAAI,KAAK,GAAG,YAAY,KAAK,GAAG;AAC5B,MAAA,CAAC,cAAc,SAAS,GAAG;AAC3B,SAAK,GAAG,EAAE,KAAK,KAAK,UAAU,SAAS,CAAC;AAAA,EAC5C;AACI,MAAA,YAAY,mBAAmB,IAAI,EAAE;AACzC,MAAI,CAAC,WAAW;AACA,gBAAA,IAAI,KAAK,aAAa,cAAc,OAAO,IAAIA,SAAQ,SAAS,CAAC;AAC1D,uBAAA,IAAI,IAAI,SAAS;AAAA,EACxC;AACO,SAAA,CAAC,OAAO,UAAU,OAAO,KAAK,IAAI,UAAU,cAAc,KAAK;AAC1E;AAEA,MAAM,6BAA6B;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEA,SAAS,mBAAmB,MAAM;AAC9B,QAAM,CAAC,MAAM,MAAM,MAAM,IAAI,IAAI;AACjC,QAAM,UAAU,CAAA;AAChB,MAAI,YAAY,CAAA;AACZ,MAAA,CAAC,SAAS,IAAI,GAAG;AACX,UAAA,gBAAgB,eAAe,gBAAgB;AAAA,EACzD;AACA,QAAM,QAAQ;AACV,MAAA,SAAS,IAAI,GAAG;AAChB,YAAQ,MAAM;AAAA,EAAA,WAET,cAAc,IAAI,GAAG;AAC1B,WAAO,KAAK,IAAI,EAAE,QAAQ,CAAO,QAAA;AACzB,UAAA,2BAA2B,SAAS,GAAG,GAAG;AAChC,kBAAA,GAAG,IAAI,KAAK,GAAG;AAAA,MAAA,OAExB;AACO,gBAAA,GAAG,IAAI,KAAK,GAAG;AAAA,MAC3B;AAAA,IAAA,CACH;AAAA,EACL;AACI,MAAA,SAAS,IAAI,GAAG;AAChB,YAAQ,SAAS;AAAA,EAAA,WAEZ,cAAc,IAAI,GAAG;AACd,gBAAA;AAAA,EAChB;AACI,MAAA,cAAc,IAAI,GAAG;AACT,gBAAA;AAAA,EAChB;AACA,SAAO,CAAC,QAAQ,OAAO,IAAI,OAAO,SAAS,SAAS;AACxD;AAEA,SAAS,kBAAkB,KAAK,QAAQA,SAAQ;AAC5C,QAAM,UAAU;AAChB,aAAW,OAAOA,SAAQ;AACtB,UAAM,KAAK,GAAG,MAAM,KAAK,GAAG;AAC5B,QAAI,CAAC,QAAQ,mBAAmB,IAAI,EAAE,GAAG;AACrC;AAAA,IACJ;AACQ,YAAA,mBAAmB,OAAO,EAAE;AAAA,EACxC;AACJ;AAEA;AACqBY;AACrB;ACxyDA;AAAA;AAAA;AAAA;AAAA;AAkBA,MAAM,UAAU;AAKhB,SAAS,mBAAmB;AAapB,MAAA,OAAO,8BAA8B,WAAW;AAChD,oBAAgB,4BAA4B;AAAA,EAChD;AACJ;AAEA,MAAM,SAAS,cAAc;AAC7B,MAAM,QAAQ,YAAY,MAAM;AAChC,MAAM,gBAAgB;AAAA,EAClB,kBAAkB;AAAA;AAAA,EAClB,wBAAwB,MAAM;AAAA;AAAA,EAC9B,yBAAyB,MAAM;AAAA;AAAA,EAC/B,kCAAkC,MAAM;AAAA;AAAA,EACxC,gCAAgC,MAAM;AAAA;AAAA,EACtC,kCAAkC,MAAM;AAAA;AAAA,EACxC,wBAAwB,MAAM;AAAA;AAAA,EAC9B,oBAAoB,MAAM;AAAA;AAAA,EAC1B,+BAA+B,MAAM;AAAA;AAAA,EACrC,6CAA6C,MAAM;AAAA;AACvD;AACA,MAAM,eAAe;AAAA,EACjB,CAAC,cAAc,gBAAgB,GAAG;AAAA,EAClC,CAAC,cAAc,sBAAsB,GAAG;AAAA,EACxC,CAAC,cAAc,uBAAuB,GAAG;AAAA,EACzC,CAAC,cAAc,gCAAgC,GAAG;AAAA,EAClD,CAAC,cAAc,8BAA8B,GAAG;AAAA,EAChD,CAAC,cAAc,gCAAgC,GAAG;AAAA,EAClD,CAAC,cAAc,sBAAsB,GAAG;AAAA,EACxC,CAAC,cAAc,kBAAkB,GAAG;AAAA,EACpC,CAAC,cAAc,6BAA6B,GAAG;AAAA,EAC/C,CAAC,cAAc,2CAA2C,GAAG;AACjE;AACA,SAAS,eAAeX,UAAS,MAAM;AACnC,SAAOD,SAAO,aAAaC,KAAI,GAAG,GAAG,IAAI;AAC7C;AAEA,MAAM,OAAO,eAAe;AAC5B,MAAM,MAAM,YAAY,IAAI;AAC5B,MAAM,iBAAiB;AAAA;AAAA,EAEnB,wBAAwB;AAAA;AAAA;AAAA,EAExB,kBAAkB,IAAI;AAAA;AAAA;AAAA,EAEtB,wBAAwB,IAAI;AAAA;AAAA,EAC5B,eAAe,IAAI;AAAA;AAAA,EACnB,8BAA8B,IAAI;AAAA;AAAA;AAAA,EAElC,gBAAgB,IAAI;AAAA;AAAA,EACpB,eAAe,IAAI;AAAA;AAAA;AAAA,EAEnB,kCAAkC,IAAI;AAAA;AAAA,EACtC,4BAA4B,IAAI;AAAA;AAAA;AAAA,EAEhC,kBAAkB,IAAI;AAAA;AAAA;AAAA,EAEtB,gCAAgC,IAAI;AAAA;AAAA;AAAA,EAEpC,2BAA2B,IAAI;AAAA;AAAA;AAAA,EAE/B,8CAA8C,IAAI;AAAA;AAAA;AAAA,EAElD,qCAAqC,IAAI;AAAA;AAAA;AAAA,EAEzC,kBAAkB,IAAI;AAAA;AAC1B;AACA,SAAS,gBAAgBA,UAAS,MAAM;AACpC,SAAO,mBAAmBA,OAAM,MAAO,QAAQ,IAAI,aAAa,eAAgB,EAAE,UAAU,eAAe,KAAK,IAAI,MAAS;AACjI;AACA,MAAM,gBAAgB;AAAA,EAClB,CAAC,eAAe,sBAAsB,GAAG;AAAA,EACzC,CAAC,eAAe,gBAAgB,GAAG;AAAA,EACnC,CAAC,eAAe,sBAAsB,GAAG;AAAA,EACzC,CAAC,eAAe,aAAa,GAAG;AAAA,EAChC,CAAC,eAAe,gBAAgB,GAAG;AAAA,EACnC,CAAC,eAAe,4BAA4B,GAAG;AAAA,EAC/C,CAAC,eAAe,cAAc,GAAG;AAAA,EACjC,CAAC,eAAe,aAAa,GAAG;AAAA,EAChC,CAAC,eAAe,gCAAgC,GAAG;AAAA,EACnD,CAAC,eAAe,0BAA0B,GAAG;AAAA,EAC7C,CAAC,eAAe,8BAA8B,GAAG;AAAA,EACjD,CAAC,eAAe,yBAAyB,GAAG;AAAA,EAC5C,CAAC,eAAe,4CAA4C,GAAG;AAAA,EAC/D,CAAC,eAAe,mCAAmC,GAAG;AAC1D;AAEA,MAAM,kDACoB,kBAAkB;AAC5C,MAAM,iDAAgD,iBAAiB;AACvE,MAAM,+CAA8C,eAAe;AACnE,MAAM,2CAA0C,iBAAiB;AACjE,MAAM,4CAA2C,kBAAkB;AACnE,MAAM,uBAAuB,WAAW,kBAAkB;AAE1D,MAAM,oDACoB,oBAAoB;AAC9C,MAAM,2CAA0C,WAAW;AAO3D,SAAS,eAAe,KAAK;AAErB,MAAA,CAAC,SAAS,GAAG,GAAG;AACT,WAAA;AAAA,EACX;AACA,aAAW,OAAO,KAAK;AAEnB,QAAI,CAAC,OAAO,KAAK,GAAG,GAAG;AACnB;AAAA,IACJ;AAEA,QAAI,CAAC,IAAI,SAAS,GAAG,GAAG;AAEpB,UAAI,SAAS,IAAI,GAAG,CAAC,GAAG;AACL,uBAAA,IAAI,GAAG,CAAC;AAAA,MAC3B;AAAA,IAAA,OAGC;AAEK,YAAA,UAAU,IAAI,MAAM,GAAG;AACvB,YAAA,YAAY,QAAQ,SAAS;AACnC,UAAI,aAAa;AACjB,UAAI,iBAAiB;AACrB,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,YAAI,EAAE,QAAQ,CAAC,KAAK,aAAa;AAC7B,qBAAW,QAAQ,CAAC,CAAC,IAAI,CAAA;AAAA,QAC7B;AACA,YAAI,CAAC,SAAS,WAAW,QAAQ,CAAC,CAAC,CAAC,GAAG;AAClC,kBAAQ,IAAI,aAAa,gBACtB,KAAK,eAAe,cAAc,oBAAoB;AAAA,YAClD,KAAK,QAAQ,CAAC;AAAA,UACjB,CAAA,CAAC;AACW,2BAAA;AACjB;AAAA,QACJ;AACa,qBAAA,WAAW,QAAQ,CAAC,CAAC;AAAA,MACtC;AAEA,UAAI,CAAC,gBAAgB;AACjB,mBAAW,QAAQ,SAAS,CAAC,IAAI,IAAI,GAAG;AACxC,eAAO,IAAI,GAAG;AAAA,MAClB;AAEA,UAAI,SAAS,WAAW,QAAQ,SAAS,CAAC,CAAC,GAAG;AAC1C,uBAAe,WAAW,QAAQ,SAAS,CAAC,CAAC;AAAA,MACjD;AAAA,IACJ;AAAA,EACJ;AACO,SAAA;AACX;AACA,SAAS,kBAAkB,QAAQ,SAAS;AACxC,QAAM,EAAE,UAAU,QAAQ,iBAAiB,aAAa;AAExD,QAAM,MAAO,cAAc,QAAQ,IAC7B,WACA,QAAQ,MAAM,IACV,CAAA,IACA,EAAE,CAAC,MAAM,GAAG,CAAG,EAAA;AAErB,MAAA,QAAQ,MAAM,GAAG;AACjB,WAAO,QAAQ,CAAU,WAAA;AACjB,UAAA,YAAY,UAAU,cAAc,QAAQ;AAC5C,cAAM,EAAE,QAAAsB,SAAQ,UAAAb,UAAA,IAAa;AAC7B,YAAIa,SAAQ;AACR,cAAIA,OAAM,IAAI,IAAIA,OAAM,KAAK,CAAA;AACpB,mBAAAb,WAAU,IAAIa,OAAM,CAAC;AAAA,QAAA,OAE7B;AACD,mBAASb,WAAU,GAAG;AAAA,QAC1B;AAAA,MAAA,OAEC;AACD,iBAAS,MAAM,KAAK,SAAS,KAAK,MAAM,MAAM,GAAG,GAAG;AAAA,MACxD;AAAA,IAAA,CACH;AAAA,EACL;AAEI,MAAA,mBAAmB,QAAQ,UAAU;AACrC,eAAW,OAAO,KAAK;AACf,UAAA,OAAO,KAAK,GAAG,GAAG;AACH,uBAAA,IAAI,GAAG,CAAC;AAAA,MAC3B;AAAA,IACJ;AAAA,EACJ;AACO,SAAA;AACX;AAEA,SAAS,oBAAoB,UAAU;AACnC,SAAO,SAAS;AACpB;AACA,SAAS,oBAAoB,IAAI,SAAS,kBACxC;AACE,MAAI,WAAW,SAAS,QAAQ,QAAQ,IAAI,QAAQ,WAAW;AAC/D,MAAI,kBAAkB,kBAAkB;AACzB,eAAA,kBAAkB,GAAG,OAAO,OAAO;AAAA,MAC1C;AAAA,MACA,QAAQ,iBAAiB;AAAA,IAAA,CAC5B;AAAA,EACL;AAEM,QAAA,UAAU,OAAO,KAAK,QAAQ;AACpC,MAAI,QAAQ,QAAQ;AAChB,YAAQ,QAAQ,CAAU,WAAA;AACtB,SAAG,mBAAmB,QAAQ,SAAS,MAAM,CAAC;AAAA,IAAA,CACjD;AAAA,EACL;AACA;AAEQ,QAAA,SAAS,QAAQ,eAAe,GAAG;AACnC,YAAMc,WAAU,OAAO,KAAK,QAAQ,eAAe;AACnD,UAAIA,SAAQ,QAAQ;AAChBA,iBAAQ,QAAQ,CAAU,WAAA;AACtB,aAAG,oBAAoB,QAAQ,QAAQ,gBAAgB,MAAM,CAAC;AAAA,QAAA,CACjE;AAAA,MACL;AAAA,IACJ;AAEI,QAAA,SAAS,QAAQ,aAAa,GAAG;AACjC,YAAMA,WAAU,OAAO,KAAK,QAAQ,aAAa;AACjD,UAAIA,SAAQ,QAAQ;AAChBA,iBAAQ,QAAQ,CAAU,WAAA;AACtB,aAAG,kBAAkB,QAAQ,QAAQ,cAAc,MAAM,CAAC;AAAA,QAAA,CAC7D;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,SAAS,eAAe,KAAK;AACzB,SAAO,YAAY,MAAM,MAAM,KAAK,CAAC;AAEzC;AAKA,MAAM,gBAAgB;AACtB,MAAM,oBAAoB,MAAM,CAAA;AAChC,MAAM,oBAAoB,MAAM;AAChC,IAAI,aAAa;AACjB,SAAS,yBAAyB,SAAS;AACvC,SAAQ,CAAC,KAAK,QAAQ,KAAKjB,UAAS;AAChC,WAAO,QAAQ,QAAQ,KAAK,mBAAmB,KAAK,QAAWA,KAAI;AAAA,EAAA;AAE3E;AAGA,MAAM,yCAAc,MAAM;AACtB,QAAM,WAAW;AACjB,MAAI,OAAO;AACX,SAAO,aAAa,OAAO,oBAAoB,QAAQ,EAAE,aAAa,KAChE,EAAE,CAAC,aAAa,GAAG,KAAA,IACnB;AACV;AAOA,SAAS,eAAe,UAAU,CAAC,GAAG,eAAe;AAC3C,QAAA,EAAE,QAAQ,mBAAuB,IAAA;AACvC,QAAM,YAAY,WAAW;AAC7B,QAAM,WAAW,QAAQ;AACnB,QAAA,OAAyB;AACzB,QAAA,2BAA2B,CAAC,CAAC,QAAQ;AACtC,MAAA,QAAQ,IAAI,aAAa,cAAe;AACzC,QAAI,4BAA4B,MAAQ;AAC3B,eAAA,eAAe,cAAc,2CAA2C,CAAC;AAAA,IACtF;AAAA,EACJ;AACA,MAAI,iBAAiB,UAAU,QAAQ,aAAa,IAC9C,QAAQ,gBACR;AACN,QAAM,UAAU;AAAA;AAAA,IAEhB,UAAU,iBACJ,OAAO,OAAO,QACd,SAAS,QAAQ,MAAM,IACnB,QAAQ,SACR;AAAA,EAAA;AACV,QAAM,kBAAkB;AAAA;AAAA,IAExB,UAAU,iBACJ,OAAO,eAAe,QACtB,SAAS,QAAQ,cAAc,KAC7B,QAAQ,QAAQ,cAAc,KAC9B,cAAc,QAAQ,cAAc,KACpC,QAAQ,mBAAmB,QACzB,QAAQ,iBACR,QAAQ;AAAA,EAAA;AAClB,QAAM,YAAY,KAAK,kBAAkB,QAAQ,OAAO,OAAO,CAAC;AAEhE,QAAM,mBAAmB,KAAK,cAAc,QAAQ,eAAe,IACzD,QAAQ,kBACR,EAAE,CAAC,QAAQ,KAAK,GAAG,CAAA,EAAI,CAAA;AAGjC,QAAM,iBAAiB,KAAK,cAAc,QAAQ,aAAa,IACrD,QAAQ,gBACR,EAAE,CAAC,QAAQ,KAAK,GAAG,CAAA,EAAI,CAAA;AAIjC,MAAI,eAAe,SACb,OAAO,cACP,UAAU,QAAQ,WAAW,KAAK,SAAS,QAAQ,WAAW,IAC1D,QAAQ,cACR;AAEV,MAAI,gBAAgB,SACd,OAAO,eACP,UAAU,QAAQ,YAAY,KAAK,SAAS,QAAQ,YAAY,IAC5D,QAAQ,eACR;AAEN,MAAA,gBAAgB,SACd,OAAO,eACP,UAAU,QAAQ,YAAY,IAC1B,QAAQ,eACR;AAEN,MAAA,kBAAkB,CAAC,CAAC,QAAQ;AAEhC,MAAI,WAAW,WAAW,QAAQ,OAAO,IAAI,QAAQ,UAAU;AAC3D,MAAA,kBAAkB,WAAW,QAAQ,OAAO,IAC1C,yBAAyB,QAAQ,OAAO,IACxC;AAEN,MAAI,mBAAmB,WAAW,QAAQ,eAAe,IACnD,QAAQ,kBACR;AAEF,MAAA,mBAAmB,SACjB,OAAO,kBACP,UAAU,QAAQ,eAAe,IAC7B,QAAQ,kBACR;AACN,MAAA,mBAAmB,CAAC,CAAC,QAAQ;AAG3B,QAAA,aAAa,SACb,OAAO,YACP,cAAc,QAAQ,SAAS,IAC3B,QAAQ,YACR,CAAA;AAEV,MAAI,eAAe,QAAQ,eAAgB,UAAU,OAAO;AAGxD,MAAA;AACJ,QAAM,iBAAiB,MAAM;AACzB,iBAAa,mBAAmB,IAAI;AACpC,UAAM,aAAa;AAAA,MACf,SAAS;AAAA,MACT,QAAQ,QAAQ;AAAA,MAChB,gBAAgB,gBAAgB;AAAA,MAChC,UAAU,UAAU;AAAA,MACpB,WAAW;AAAA,MACX,aAAa;AAAA,MACb,SAAS,oBAAoB,OAAO,SAAY;AAAA,MAChD,aAAa;AAAA,MACb,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,iBAAiB,qBAAqB,OAAO,SAAY;AAAA,MACzD,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB,QAAQ;AAAA,MACzB,iBAAiB,QAAQ;AAAA,MACzB,QAAQ,EAAE,WAAW,MAAM;AAAA,IAAA;AAE/B;AACI,iBAAW,kBAAkB,iBAAiB;AAC9C,iBAAW,gBAAgB,eAAe;AAC1C,iBAAW,uBAAuB,cAAc,QAAQ,IAClD,SAAS,uBACT;AACN,iBAAW,qBAAqB,cAAc,QAAQ,IAChD,SAAS,qBACT;AAAA,IACV;AACK,QAAA,QAAQ,IAAI,aAAa,cAAe;AACzC,iBAAW,cAAc,cAAc,QAAQ,IACzC,SAAS,cACT;AAAA,IACV;AACM,UAAA,MAAM,kBAAkB,UAAU;AACxC,iBAAa,mBAAmB,GAAG;AAC5B,WAAA;AAAA,EAAA;AAEX,aAAW,eAAe;AAC1B,uBAAqB,UAAU,QAAQ,OAAO,gBAAgB,KAAK;AAEnE,WAAS,wBAAwB;AACtB,WAAA;AAAA,MACC,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,eAAe;AAAA,IAAA;AAAA,EAG3B;AAEA,QAAM,SAAS,SAAS;AAAA,IACpB,KAAK,MAAM,QAAQ;AAAA,IACnB,KAAK,CAAO,QAAA;AACR,cAAQ,QAAQ;AAChB,eAAS,SAAS,QAAQ;AAAA,IAC9B;AAAA,EAAA,CACH;AAED,QAAM,iBAAiB,SAAS;AAAA,IAC5B,KAAK,MAAM,gBAAgB;AAAA,IAC3B,KAAK,CAAO,QAAA;AACR,sBAAgB,QAAQ;AACxB,eAAS,iBAAiB,gBAAgB;AACrB,2BAAA,UAAU,QAAQ,OAAO,GAAG;AAAA,IACrD;AAAA,EAAA,CACH;AAED,QAAM,WAAW,SAAS,MAAM,UAAU,KAAK;AAE/C,QAAM,kBAAiC,yBAAS,MAAM,iBAAiB,KAAK;AAE5E,QAAM,gBAA+B,yBAAS,MAAM,eAAe,KAAK;AAExE,WAAS,4BAA4B;AAC1B,WAAA,WAAW,gBAAgB,IAAI,mBAAmB;AAAA,EAC7D;AAEA,WAAS,0BAA0B,SAAS;AACrB,uBAAA;AACnB,aAAS,kBAAkB;AAAA,EAC/B;AAEA,WAAS,oBAAoB;AAClB,WAAA;AAAA,EACX;AAEA,WAAS,kBAAkB,SAAS;AAChC,QAAI,YAAY,MAAM;AAClB,wBAAkB,yBAAyB,OAAO;AAAA,IACtD;AACW,eAAA;AACX,aAAS,UAAU;AAAA,EACvB;AACS,WAAA,2BAA2BA,OAAM,KACxC;AACS,WAAAA,UAAS,eAAe,CAAC,IAAI;AAAA,EACxC;AACA,QAAM,eAAe,CAAC,IAAI,gBAAgB,UAAU,iBAAiB,cAAc,qBAAqB;AAC9E;AAElB,QAAA;AACA,QAAA;AACA,UAAK,QAAQ,IAAI,aAAa,gBAAiB,2BAA2B;AACtE,uEAA+B;AAAA,MACnC;AACA,UAAI,CAAC,WAAW;AACH,iBAAA,kBAAkB,SACrB,mBACA,IAAA;AAAA,MACV;AACA,YAAM,GAAG,QAAQ;AAAA,IAAA,UAErB;AACI,UAAK,QAAQ,IAAI,aAAa,gBAAiB,0BAA2B;AAG1E,UAAI,CAAC,WAAW;AACZ,iBAAS,kBAAkB;AAAA,MAC/B;AAAA,IACJ;AACA,QAAK,aAAa;AAAA,IACd,SAAS,GAAG,KACZ,QAAQ,gBACP,aAAa,sBAAsB,CAAC,KACvC;AACE,YAAM,CAAC,KAAK,IAAI,IAAI,eAAe;AAC9B,UAAA,QAAQ,IAAI,aAAa,gBAC1B,UACA,SAAS,GAAG,KACZ,2BAA2B,UAAU,IAAI,GAAG;AACxC,YAAA,kBACC,wBAAwB,eAAe,GAAG,KACvC,uBAAuB,cAAc,GAAG,IAAI;AAC3C,eAAA,eAAe,cAAc,kBAAkB;AAAA,YAChD;AAAA,YACA,MAAM;AAAA,UACT,CAAA,CAAC;AAAA,QACN;AAEK,YAAA,QAAQ,IAAI,aAAa,cAAe;AACnC,gBAAA,EAAE,aAAa,QAAY,IAAA;AACjC,cAAI,WAAW,eAAe;AAC1B,oBAAQ,KAAK,YAAoD;AAAA,cAC7D,MAAM;AAAA,cACN;AAAA,cACA,IAAI;AAAA,cACJ,SAAS,GAAG,QAAQ,IAAI,GAAG;AAAA,YAAA,CAC9B;AAAA,UACL;AAAA,QACJ;AAAA,MACJ;AACA,aAAO,UAAU,gBACX,gBAAgB,MAAM,IACtB,aAAa,GAAG;AAAA,IAAA,WAEjB,iBAAiB,GAAG,GAAG;AACrB,aAAA;AAAA,IAAA,OAEN;AAEK,YAAA,gBAAgB,eAAe,sBAAsB;AAAA,IAC/D;AAAA,EAAA;AAGJ,WAAS,KAAK,MAAM;AAChB,WAAO,aAAa,CAAA,YAAW,QAAQ,MAAM,WAAW,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,MAAM,mBAAmB,GAAG,IAAI,GAAG,aAAa,CAAA,SAAQ,QAAQ,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAO,QAAA,KAAK,CAAO,QAAA,SAAS,GAAG,CAAC;AAAA,EACvN;AAEA,WAAS,MAAM,MAAM;AACjB,UAAM,CAAC,MAAM,MAAM,IAAI,IAAI;AAC3B,QAAI,QAAQ,CAAC,SAAS,IAAI,GAAG;AACnB,YAAA,gBAAgB,eAAe,gBAAgB;AAAA,IACzD;AACA,WAAO,EAAE,GAAG,CAAC,MAAM,MAAM,OAAO,EAAE,iBAAiB,KAAA,GAAQ,QAAQ,CAAE,CAAA,CAAC,CAAC;AAAA,EAC3E;AAEA,WAAS,KAAK,MAAM;AAChB,WAAO,aAAa,CAAA,YAAW,QAAQ,MAAM,UAAU,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,MAAM,kBAAkB,GAAG,IAAI,GAAG,mBAAmB,CAAA,SAAQ,QAAQ,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,uBAAuB,CAAO,QAAA,SAAS,GAAG,CAAC;AAAA,EAC5O;AAEA,WAAS,KAAK,MAAM;AAChB,WAAO,aAAa,CAAA,YAAW,QAAQ,MAAM,QAAQ,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,MAAM,gBAAgB,GAAG,IAAI,GAAG,iBAAiB,CAAA,SAAQ,QAAQ,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,uBAAuB,CAAO,QAAA,SAAS,GAAG,CAAC;AAAA,EACtO;AAEA,WAAS,UAAU,QAAQ;AACvB,WAAO,OAAO,IAAI,CAAA,QAAO,SAAS,GAAG,KAAK,SAAS,GAAG,KAAK,UAAU,GAAG,IAClE,eAAe,OAAO,GAAG,CAAC,IAC1B,GAAG;AAAA,EACb;AACM,QAAA,cAAc,CAAC,QAAQ;AAC7B,QAAM,YAAY;AAAA,IACd;AAAA,IACA;AAAA,IACA,MAAM;AAAA,EAAA;AAGV,WAAS,kBAAkB,MAAM;AACtB,WAAA;AAAA,MAAa,CAAW,YAAA;AACvB,YAAA;AACJ,cAAMkB,YAAW;AACb,YAAA;AACAA,oBAAS,YAAY;AACf,gBAAA,QAAQ,MAAM,WAAW,MAAM,CAACA,WAAU,GAAG,IAAI,CAAC;AAAA,QAAA,UAE5D;AACIA,oBAAS,YAAY;AAAA,QACzB;AACO,eAAA;AAAA,MACX;AAAA,MAAG,MAAM,mBAAmB,GAAG,IAAI;AAAA,MAAG;AAAA;AAAA,MAEtC,CAAQ,SAAA,KAAK,oBAAoB,EAAE,GAAG,IAAI;AAAA,MAAG,CAAO,QAAA,CAAC,eAAe,GAAG,CAAC;AAAA,MAAG,CAAA,QAAO,QAAQ,GAAG;AAAA,IAAA;AAAA,EACjG;AAEA,WAAS,eAAe,MAAM;AACnB,WAAA;AAAA,MAAa,CAAA,YAAW,QAAQ,MAAM,QAAQ,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;AAAA,MAAG,MAAM,gBAAgB,GAAG,IAAI;AAAA,MAAG;AAAA;AAAA,MAEhH,CAAQ,SAAA,KAAK,iBAAiB,EAAE,GAAG,IAAI;AAAA,MAAG;AAAA,MAAmB,CAAO,QAAA,SAAS,GAAG,KAAK,QAAQ,GAAG;AAAA,IAAA;AAAA,EACpG;AAEA,WAAS,iBAAiB,MAAM;AACrB,WAAA;AAAA,MAAa,CAAA,YAAW,QAAQ,MAAM,UAAU,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;AAAA,MAAG,MAAM,kBAAkB,GAAG,IAAI;AAAA,MAAG;AAAA;AAAA,MAEpH,CAAQ,SAAA,KAAK,mBAAmB,EAAE,GAAG,IAAI;AAAA,MAAG;AAAA,MAAmB,CAAO,QAAA,SAAS,GAAG,KAAK,QAAQ,GAAG;AAAA,IAAA;AAAA,EACtG;AACA,WAAS,eAAe,OAAO;AACZ,mBAAA;AACf,aAAS,cAAc;AAAA,EAC3B;AAES,WAAA,GAAG,KAAKF,SAAQ;AACrB,WAAO,aAAa,MAAM;AACtB,UAAI,CAAC,KAAK;AACC,eAAA;AAAA,MACX;AACA,YAAM,eAAe,SAASA,OAAM,IAAIA,UAAS,QAAQ;AACnD,YAAA,UAAU,iBAAiB,YAAY;AAC7C,YAAM,WAAW,SAAS,gBAAgB,SAAS,GAAG;AAC/C,aAAA,CAAC,2BACF,aAAa,QAAQ,KACnB,kBAAkB,QAAQ,KAC1B,SAAS,QAAQ,IACnB,YAAY;AAAA,OACnB,MAAM,CAAC,GAAG,GAAG,oBAAoB,CAAQ,SAAA;AACjC,aAAA,QAAQ,MAAM,KAAK,IAAI,MAAM,CAAC,KAAKA,OAAM,CAAC;AAAA,IAClD,GAAA,mBAAmB,CAAO,QAAA,UAAU,GAAG,CAAC;AAAA,EAC/C;AACA,WAAS,gBAAgB,KAAK;AAC1B,QAAIG,YAAW;AACf,UAAM,UAAU,wBAAwB,UAAU,gBAAgB,OAAO,QAAQ,KAAK;AACtF,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,YAAM,uBAAuB,UAAU,MAAM,QAAQ,CAAC,CAAC,KAAK;AAC5D,YAAM,eAAe,SAAS,gBAAgB,sBAAsB,GAAG;AACvE,UAAI,gBAAgB,MAAM;AACtBA,oBAAW;AACX;AAAA,MACJ;AAAA,IACJ;AACOA,WAAAA;AAAAA,EACX;AAEA,WAAS,GAAG,KAAK;AACPA,UAAAA,YAAW,gBAAgB,GAAG;AAE7BA,WAAAA,aAAY,OACbA,YACA,SACI,OAAO,GAAG,GAAG,KAAK,CAAC,IACnB;EACd;AAEA,WAAS,iBAAiBH,SAAQ;AAC9B,WAAQ,UAAU,MAAMA,OAAM,KAAK,CAAA;AAAA,EACvC;AAES,WAAA,iBAAiBA,SAAQ,SAAS;AACvC,QAAI,UAAU;AACV,YAAM,WAAW,EAAE,CAACA,OAAM,GAAG,QAAQ;AACrC,iBAAW,OAAO,UAAU;AACpB,YAAA,OAAO,UAAU,GAAG,GAAG;AACR,yBAAA,SAAS,GAAG,CAAC;AAAA,QAChC;AAAA,MACJ;AACA,gBAAU,SAASA,OAAM;AAAA,IAC7B;AACU,cAAA,MAAMA,OAAM,IAAI;AAC1B,aAAS,WAAW,UAAU;AAAA,EAClC;AAES,WAAAI,oBAAmBJ,SAAQ,SAAS;AACzC,cAAU,MAAMA,OAAM,IAAI,UAAU,MAAMA,OAAM,KAAK;AACrD,UAAM,WAAW,EAAE,CAACA,OAAM,GAAG,QAAQ;AACrC,QAAI,UAAU;AACV,iBAAW,OAAO,UAAU;AACpB,YAAA,OAAO,UAAU,GAAG,GAAG;AACR,yBAAA,SAAS,GAAG,CAAC;AAAA,QAChC;AAAA,MACJ;AAAA,IACJ;AACA,cAAU,SAASA,OAAM;AACzB,aAAS,SAAS,UAAU,MAAMA,OAAM,CAAC;AACzC,aAAS,WAAW,UAAU;AAAA,EAClC;AAEA,WAAS,kBAAkBA,SAAQ;AAC/B,WAAO,iBAAiB,MAAMA,OAAM,KAAK,CAAA;AAAA,EAC7C;AAES,WAAA,kBAAkBA,SAAQvB,SAAQ;AACtB,qBAAA,MAAMuB,OAAM,IAAIvB;AACjC,aAAS,kBAAkB,iBAAiB;AACxB,wBAAA,UAAUuB,SAAQvB,OAAM;AAAA,EAChD;AAES,WAAA,oBAAoBuB,SAAQvB,SAAQ;AACxB,qBAAA,MAAMuB,OAAM,IAAI,OAAO,iBAAiB,MAAMA,OAAM,KAAK,IAAIvB,OAAM;AACpF,aAAS,kBAAkB,iBAAiB;AACxB,wBAAA,UAAUuB,SAAQvB,OAAM;AAAA,EAChD;AAEA,WAAS,gBAAgBuB,SAAQ;AAC7B,WAAO,eAAe,MAAMA,OAAM,KAAK,CAAA;AAAA,EAC3C;AAES,WAAA,gBAAgBA,SAAQvB,SAAQ;AACtB,mBAAA,MAAMuB,OAAM,IAAIvB;AAC/B,aAAS,gBAAgB,eAAe;AACtB,sBAAA,UAAUuB,SAAQvB,OAAM;AAAA,EAC9C;AAES,WAAA,kBAAkBuB,SAAQvB,SAAQ;AACxB,mBAAA,MAAMuB,OAAM,IAAI,OAAO,eAAe,MAAMA,OAAM,KAAK,IAAIvB,OAAM;AAChF,aAAS,gBAAgB,eAAe;AACtB,sBAAA,UAAUuB,SAAQvB,OAAM;AAAA,EAC9C;AAEA;AAEA,MAAI,UAAU,WAAW;AACf,UAAA,OAAO,QAAQ,CAAC,QAAQ;AAC1B,UAAI,gBAAgB;AAChB,gBAAQ,QAAQ;AAChB,iBAAS,SAAS;AAClB,6BAAqB,UAAU,QAAQ,OAAO,gBAAgB,KAAK;AAAA,MACvE;AAAA,IAAA,CACH;AACK,UAAA,OAAO,gBAAgB,CAAC,QAAQ;AAClC,UAAI,gBAAgB;AAChB,wBAAgB,QAAQ;AACxB,iBAAS,iBAAiB;AAC1B,6BAAqB,UAAU,QAAQ,OAAO,gBAAgB,KAAK;AAAA,MACvE;AAAA,IAAA,CACH;AAAA,EACL;AAEA,QAAM,WAAW;AAAA,IACb,IAAI;AAAA,IACJ;AAAA,IACA;AAAA,IACA,IAAI,gBAAgB;AACT,aAAA;AAAA,IACX;AAAA,IACA,IAAI,cAAc,KAAK;AACF,uBAAA;AACjB,UAAI,OAAO,QAAQ;AACP,gBAAA,QAAQ,OAAO,OAAO;AACd,wBAAA,QAAQ,OAAO,eAAe;AAC9C,6BAAqB,UAAU,QAAQ,OAAO,gBAAgB,KAAK;AAAA,MACvE;AAAA,IACJ;AAAA,IACA,IAAI,mBAAmB;AACnB,aAAO,OAAO,KAAK,UAAU,KAAK,EAAE,KAAK;AAAA,IAC7C;AAAA,IACA;AAAA,IACA,IAAI,YAAY;AACL,aAAA;AAAA,IACX;AAAA,IACA,IAAI,cAAc;AACd,aAAO,gBAAgB,CAAA;AAAA,IAC3B;AAAA,IACA,IAAI,WAAW;AACJ,aAAA;AAAA,IACX;AAAA,IACA,IAAI,cAAc;AACP,aAAA;AAAA,IACX;AAAA,IACA,IAAI,YAAY,KAAK;AACF,qBAAA;AACf,eAAS,cAAc;AAAA,IAC3B;AAAA,IACA,IAAI,eAAe;AACR,aAAA;AAAA,IACX;AAAA,IACA,IAAI,aAAa,KAAK;AACF,sBAAA;AAChB,eAAS,eAAe;AAAA,IAC5B;AAAA,IACA,IAAI,eAAe;AACR,aAAA;AAAA,IACX;AAAA,IACA,IAAI,aAAa,KAAK;AACF,sBAAA;AAAA,IACpB;AAAA,IACA,IAAI,iBAAiB;AACV,aAAA;AAAA,IACX;AAAA,IACA,IAAI,eAAe,KAAK;AACF,wBAAA;AAClB,eAAS,iBAAiB;AAAA,IAC9B;AAAA,IACA,IAAI,kBAAkB;AACX,aAAA;AAAA,IACX;AAAA,IACA,IAAI,gBAAgB,KAAK;AACF,yBAAA;AACnB,eAAS,kBAAkB;AAAA,IAC/B;AAAA,IACA,IAAI,kBAAkB;AACX,aAAA;AAAA,IACX;AAAA,IACA,IAAI,gBAAgB,KAAK;AACF,yBAAA;AACnB,eAAS,kBAAkB;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,oBAAA2B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,CAAC,oBAAoB,GAAG;AAAA,EAAA;AAE5B;AACI,aAAS,kBAAkB;AAC3B,aAAS,gBAAgB;AACzB,aAAS,KAAK;AACd,aAAS,KAAK;AACd,aAAS,KAAK;AACd,aAAS,IAAI;AACb,aAAS,IAAI;AACb,aAAS,oBAAoB;AAC7B,aAAS,oBAAoB;AAC7B,aAAS,sBAAsB;AAC/B,aAAS,kBAAkB;AAC3B,aAAS,kBAAkB;AAC3B,aAAS,oBAAoB;AAC7B,aAAS,sBAAsB,IAAI;AACnC,aAAS,oBAAoB,IAAI;AACjC,aAAS,mBAAmB,IAAI;AAChC,aAAS,iBAAiB,IAAI;AAAA,EAClC;AAEK,MAAA,QAAQ,IAAI,aAAa,cAAe;AAChC,aAAA,aAAa,IAAI,CAAC,YAAY;AACnC,eAAS,cAAc;AAAA,IAAA;AAElB,aAAA,cAAc,IAAI,MAAM;AAC7B,eAAS,cAAc;AAAA,IAAA;AAAA,EAE/B;AACO,SAAA;AACX;AAsXA,MAAM,kBAAkB;AAAA,EACpB,KAAK;AAAA,IACD,MAAM,CAAC,QAAQ,MAAM;AAAA,EACzB;AAAA,EACA,QAAQ;AAAA,IACJ,MAAM;AAAA,EACV;AAAA,EACA,OAAO;AAAA,IACH,MAAM;AAAA;AAAA,IAEN,WAAW,CAAC,QAAiC,QAAQ,YAAY,QAAQ;AAAA,IACzE,SAAS;AAAA;AAAA,EACb;AAAA,EACA,MAAM;AAAA,IACF,MAAM;AAAA,EACV;AACJ;AAEA,SAAS,kBAET,EAAE,MAAM,GACR,MAAM;AACF,MAAI,KAAK,WAAW,KAAK,KAAK,CAAC,MAAM,WAAW;AAE5C,UAAM,MAAM,MAAM,UAAU,MAAM,YAAY;AAE9C,WAAO,IAAI,OAAO,CAAC,MAAM,YAAY;AAC1B,aAAA;AAAA,QACH,GAAG;AAAA;AAAA,QAEH,GAAI,QAAQ,SAAS,WAAW,QAAQ,WAAW,CAAC,OAAO;AAAA,MAAA;AAAA,IAGnE,GAAG,CAAE,CAAA;AAAA,EAAA,OAEJ;AAED,WAAO,KAAK,OAAO,CAAC,KAAK,QAAQ;AACvB,YAAA,OAAO,MAAM,GAAG;AACtB,UAAI,MAAM;AACF,YAAA,GAAG,IAAI;MACf;AACO,aAAA;AAAA,IACX,GAAG,CAAE,CAAA;AAAA,EACT;AACJ;AAEA,SAAS,mBAAmB,KAAK;AACtB,SAAA;AACX;AAEA,MAAM,kBAAgD,gCAAA;AAAA;AAAA,EAElD,MAAM;AAAA,EACN,OAAO,OAAO;AAAA,IACV,SAAS;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM,CAAC,QAAQ,MAAM;AAAA;AAAA,MAErB,WAAW,CAAC,QAAQ,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG;AAAA,IACnD;AAAA,KACD,eAAe;AAAA;AAAA;AAAA,EAGlB,MAAM,OAAO,SAAS;AACZ,UAAA,EAAE,OAAO,MAAU,IAAA;AAEnB,UAAA,OAAO,MAAM,QACf,QAAQ;AAAA,MACJ,UAAU,MAAM;AAAA,MAChB,gBAAgB;AAAA,IAAA,CACnB;AACL,WAAO,MAAM;AACH,YAAA,OAAO,OAAO,KAAK,KAAK,EAAE,OAAO,CAAA,QAAO,QAAQ,GAAG;AACzD,YAAM,UAAU,CAAA;AAChB,UAAI,MAAM,QAAQ;AACd,gBAAQ,SAAS,MAAM;AAAA,MAC3B;AACI,UAAA,MAAM,WAAW,QAAW;AACpB,gBAAA,SAAS,SAAS,MAAM,MAAM,IAAI,CAAC,MAAM,SAAS,MAAM;AAAA,MACpE;AACM,YAAA,MAAM,kBAAkB,SAAS,IAAI;AAE3C,YAAM,WAAW,KAAK,oBAAoB,EAAE,MAAM,SAAS,KAAK,OAAO;AACvE,YAAM,gBAAgB,OAAO,CAAC,GAAG,KAAK;AAChC,YAAA,MAAM,SAAS,MAAM,GAAG,KAAK,SAAS,MAAM,GAAG,IAC/C,MAAM,MACN,mBAAmB;AAClB,aAAA,EAAE,KAAK,eAAe,QAAQ;AAAA,IAAA;AAAA,EAE7C;AACJ,CAAC;AAsDD,MAAM,cAAc;AAGpB,SAAS,QAAQ,QAAQ;AACrB,SAAO,QAAQ,MAAM,KAAK,CAAC,SAAS,OAAO,CAAC,CAAC;AACjD;AACA,SAAS,gBAAgB,OAAO,SAAS,UAAU,eAAe;AACxD,QAAA,EAAE,OAAO,MAAU,IAAA;AACzB,SAAO,MAAM;AACH,UAAA,UAAU,EAAE,MAAM;AACxB,QAAI,YAAY,CAAA;AAChB,QAAI,MAAM,QAAQ;AACd,cAAQ,SAAS,MAAM;AAAA,IAC3B;AACI,QAAA,SAAS,MAAM,MAAM,GAAG;AACxB,cAAQ,MAAM,MAAM;AAAA,IAEf,WAAA,SAAS,MAAM,MAAM,GAAG;AAE7B,UAAI,SAAS,MAAM,OAAO,GAAG,GAAG;AAEpB,gBAAA,MAAM,MAAM,OAAO;AAAA,MAC/B;AAEY,kBAAA,OAAO,KAAK,MAAM,MAAM,EAAE,OAAO,CAACC,UAAS,SAAS;AAC5D,eAAO,SAAS,SAAS,IAAI,IACvB,OAAO,CAAIA,GAAAA,UAAS,EAAE,CAAC,IAAI,GAAG,MAAM,OAAO,IAAI,EAAG,CAAA,IAClDA;AAAAA,MACV,GAAG,CAAE,CAAA;AAAA,IACT;AACM,UAAA,QAAQ,cAAc,GAAG,CAAC,MAAM,OAAO,SAAS,SAAS,CAAC;AAC5D,QAAA,WAAW,CAAC,QAAQ,GAAG;AACvB,QAAA,QAAQ,KAAK,GAAG;AAChB,iBAAW,MAAM,IAAI,CAAC,MAAMvC,WAAU;AAC5B,cAAA,OAAO,MAAM,KAAK,IAAI;AAC5B,cAAM,OAAO,OACP,KAAK,EAAE,CAAC,KAAK,IAAI,GAAG,KAAK,OAAO,OAAAA,QAAO,MAAO,CAAA,IAC9C,CAAC,KAAK,KAAK;AACb,YAAA,QAAQ,IAAI,GAAG;AACf,eAAK,CAAC,EAAE,MAAM,GAAG,KAAK,IAAI,IAAIA,MAAK;AAAA,QACvC;AACO,eAAA;AAAA,MAAA,CACV;AAAA,IAAA,WAEI,SAAS,KAAK,GAAG;AACtB,iBAAW,CAAC,KAAK;AAAA,IACrB;AACA,UAAM,gBAAgB,OAAO,CAAC,GAAG,KAAK;AAChC,UAAA,MAAM,SAAS,MAAM,GAAG,KAAK,SAAS,MAAM,GAAG,IAC/C,MAAM,MACN,mBAAmB;AAClB,WAAA,EAAE,KAAK,eAAe,QAAQ;AAAA,EAAA;AAE7C;AAEA,MAAM,mBAAiD,gCAAA;AAAA;AAAA,EAEnD,MAAM;AAAA,EACN,OAAO,OAAO;AAAA,IACV,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM,CAAC,QAAQ,MAAM;AAAA,IACzB;AAAA,KACD,eAAe;AAAA;AAAA;AAAA,EAGlB,MAAM,OAAO,SAAS;AACZ,UAAA,OAAO,MAAM,QACf,QAAQ;AAAA,MACJ,UAAU,MAAM;AAAA,MAChB,gBAAgB;AAAA,IAAA,CACnB;AACL,WAAO,gBAAgB,OAAO,SAAS,4BAA4B,IAAI;AAAA;AAAA,MAEvE,KAAK,iBAAiB,EAAE,GAAG,IAAI;AAAA,KAAC;AAAA,EACpC;AACJ,CAAC;AAsBD,MAAM,eAAe;AAGrB,MAAM,qBAAoD,gCAAA;AAAA;AAAA,EAEtD,MAAM;AAAA,EACN,OAAO,OAAO;AAAA,IACV,OAAO;AAAA,MACH,MAAM,CAAC,QAAQ,IAAI;AAAA,MACnB,UAAU;AAAA,IACd;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM,CAAC,QAAQ,MAAM;AAAA,IACzB;AAAA,KACD,eAAe;AAAA;AAAA;AAAA,EAGlB,MAAM,OAAO,SAAS;AACZ,UAAA,OAAO,MAAM,QACf,QAAQ;AAAA,MACJ,UAAU,MAAM;AAAA,MAChB,gBAAgB;AAAA,IAAA,CACnB;AACL,WAAO,gBAAgB,OAAO,SAAS,8BAA8B,IAAI;AAAA;AAAA,MAEzE,KAAK,mBAAmB,EAAE,GAAG,IAAI;AAAA,KAAC;AAAA,EACtC;AACJ,CAAC;AAkBD,MAAM,iBAAiB;AAGvB,SAAS,cAAc,MAAM,UAAU;AACnC,QAAM,eAAe;AACjB,MAAA,KAAK,SAAS,eAAe;AAC7B,WAAQ,aAAa,cAAc,QAAQ,KAAK,KAAK;AAAA,EAAA,OAEpD;AACK,UAAA,UAAU,aAAa,cAAc,QAAQ;AACnD,WAAO,WAAW,OACZ,QAAQ,aACR,KAAK,OAAO;AAAA,EACtB;AACJ;AACA,SAAS,YAAY,MAAM;AACjB,QAAA,WAAW,CAAC,YAAY;AAC1B,UAAM,EAAE,UAAU,WAAW,MAAA,IAAU;AAEvC,QAAI,CAAC,YAAY,CAAC,SAAS,GAAG;AACpB,YAAA,gBAAgB,eAAe,gBAAgB;AAAA,IACzD;AACA,UAAM,WAAW,cAAc,MAAM,SAAS,CAAC;AAC/C,QAAK,QAAQ,IAAI,aAAa,gBAAiB,UAAU,UAAU;AAC1D,WAAA,eAAe,cAAc,sBAAsB,CAAC;AAAA,IAC7D;AACM,UAAA,cAAc,WAAW,KAAK;AAC7B,WAAA;AAAA,MACH,QAAQ,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,WAAW,WAAW,CAAC,CAAC;AAAA,MAChE;AAAA,IAAA;AAAA,EACJ;AAEE,QAAA,WAAW,CAAC,IAAI,YAAY;AAC9B,UAAM,CAAC,aAAa,QAAQ,IAAI,SAAS,OAAO;AAOhD,OAAG,aAAa;AAChB,OAAG,cAAc;AAAA,EAAA;AAEf,QAAA,aAAa,CAAC,OAAO;AAMvB,QAAI,GAAG,YAAY;AACf,SAAG,aAAa;AAChB,aAAO,GAAG;AAAA,IACd;AAAA,EAAA;AAEJ,QAAM,SAAS,CAAC,IAAI,EAAE,YAAY;AAC9B,QAAI,GAAG,YAAY;AACf,YAAM,WAAW,GAAG;AACd,YAAA,cAAc,WAAW,KAAK;AACpC,SAAG,cAAc,QAAQ,MAAM,SAAS,GAAG,UAAU;AAAA,QACjD,GAAG,WAAW,WAAW;AAAA,MAAA,CAC5B;AAAA,IACL;AAAA,EAAA;AAEE,QAAA,cAAc,CAAC,YAAY;AAC7B,UAAM,CAAC,WAAW,IAAI,SAAS,OAAO;AACtC,WAAO,EAAE,YAAY;AAAA,EAAA;AAElB,SAAA;AAAA,IACH,SAAS;AAAA,IACT,WAAW;AAAA,IACX,cAAc;AAAA,IACd;AAAA,EAAA;AAER;AACA,SAAS,WAAW,OAAO;AACnB,MAAA,SAAS,KAAK,GAAG;AACV,WAAA,EAAE,MAAM;EAAM,WAEhB,cAAc,KAAK,GAAG;AACvB,QAAA,EAAE,UAAU,QAAQ;AACd,YAAA,gBAAgB,eAAe,gBAAgB,MAAM;AAAA,IAC/D;AACO,WAAA;AAAA,EAAA,OAEN;AACK,UAAA,gBAAgB,eAAe,aAAa;AAAA,EACtD;AACJ;AACA,SAAS,WAAW,OAAO;AACvB,QAAM,EAAE,MAAM,QAAQ,MAAM,QAAQ,OAAW,IAAA;AAC/C,QAAM,UAAU,CAAA;AACV,QAAA,QAAQ,QAAQ;AAClB,MAAA,SAAS,MAAM,GAAG;AAClB,YAAQ,SAAS;AAAA,EACrB;AACI,MAAA,SAAS,MAAM,GAAG;AAClB,YAAQ,SAAS;AAAA,EACrB;AACI,MAAA,SAAS,MAAM,GAAG;AAClB,YAAQ,SAAS;AAAA,EACrB;AACO,SAAA,CAAC,MAAM,OAAO,OAAO;AAChC;AAEA,SAAS,MAAM,KAAK,SAAS,SAAS;AAC5B,QAAA,gBAAgB,cAAc,QAAQ,CAAC,CAAC,IACxC,QAAQ,CAAC,IACT;AACA,QAAA,uBAAuB,CAAC,CAAC,cAAc;AAC7C,QAAM,gBAAgB,UAAU,cAAc,aAAa,IACrD,cAAc,gBACd;AACN,MAAK,QAAQ,IAAI,aAAa,gBAAiB,iBAAiB,sBAAsB;AAC7E,SAAA,eAAe,cAAc,kCAAkC;AAAA,MAChE,MAAM,YAAY;AAAA,IACrB,CAAA,CAAC;AAAA,EACN;AACA,MAAI,eAAe;AACf,KAAC,CAAC,uBAAuB,YAAY,OAAO,QAAQ,OAAO,EAAE,QAAQ,CAAQjB,UAAA,IAAI,UAAUA,OAAM,WAAW,CAAC;AAC5G,KAAA,aAAa,MAAM,OAAO,EAAE,QAAQ,WAAQ,IAAI,UAAUA,OAAM,YAAY,CAAC;AAC7E,KAAA,eAAe,MAAM,OAAO,EAAE,QAAQ,WAAQ,IAAI,UAAUA,OAAM,cAAc,CAAC;AAAA,EACtF;AAEA;AACI,QAAI,UAAU,KAAK,YAAY,IAAI,CAAC;AAAA,EACxC;AACJ;AAEA,MAAM,oBAAoB;AAAA,EACtB;AAAA,IAAC;AAAA;AAAA,EAAA,GAA6D;AAAA,EAC9D;AAAA,IAAC;AAAA;AAAA,EAAA,GAAsE;AAAA,EACvE;AAAA,IAAC;AAAA;AAAA,EAAA,GAAoD;AACzD;AACA,MAAM,0BAA0B;AAAA,EAC5B;AAAA,IAAC;AAAA;AAAA,EAAA,GAAsE;AAC3E;AACA,MAAM,4BAA4B;AAAA,EAC9B;AAAA,IAAC;AAAA;AAAA,EAAA,GAAoD;AACzD;AAEA,MAAM,2BAA2B;AACjC,IAAI;AACJ,eAAe,eAAe,KAAK,MAAM;AACrC,SAAO,IAAI,QAAQ,CAACmB,UAAS,WAAW;AAChC,QAAA;AACoB,0BAAA;AAAA,QAChB,IAAI;AAAA,QACJ,OAAO;AAAA,UAAkB;AAAA;AAAA,QAA0D;AAAA,QACnF,aAAa;AAAA,QACb,UAAU;AAAA,QACV,MAAM;AAAA,QACN,qBAAqB,CAAC,wBAAwB;AAAA,QAC9C;AAAA;AAAA,SACD,CAAO,QAAA;AACQ,sBAAA;AACd,YAAI,GAAG,mBAAmB,CAAC,EAAE,mBAAmB,eAAe;AACnC,kCAAA,mBAAmB,UAAU,IAAI;AAAA,QAAA,CAC5D;AACD,YAAI,GAAG,iBAAiB,CAAC,EAAE,mBAAmB,mBAAmB;AAC7D,cAAI,kBAAkB,MAAM,MACxB,kBAAkB,MAAM,GAAG,gBAC3B,cAAc;AACV,gBAAA,KAAK,SAAS,UAAU;AAExB,kBAAI,kBAAkB,MAAM,GAAG,iBAC3B,KAAK,OAAO,YAAY;AACxB,gCAAgB,cAAc,kBAAkB,MAAM,GAAG,YAAY;AAAA,cACzE;AAAA,YAAA,OAEC;AACD,8BAAgB,cAAc,kBAAkB,MAAM,GAAG,YAAY;AAAA,YACzE;AAAA,UACJ;AAAA,QAAA,CACH;AACD,YAAI,aAAa;AAAA,UACb,IAAI;AAAA,UACJ,OAAO;AAAA,YAAkB;AAAA;AAAA,UAAmE;AAAA,UAC5F,MAAM;AAAA,UACN,uBAAuB;AAAA,YAAwB;AAAA;AAAA,UAAmE;AAAA,QAAA,CACrH;AACG,YAAA,GAAG,iBAAiB,CAAW,YAAA;AAC/B,cAAI,QAAQ,QAAQ,OAChB,QAAQ,gBAAgB,+BAAqE;AAC7F,0BAAc,SAAS,IAAI;AAAA,UAC/B;AAAA,QAAA,CACH;AACK,cAAA,4BAAY;AACd,YAAA,GAAG,kBAAkB,OAAO,YAAY;AACxC,cAAI,QAAQ,QAAQ,OAChB,QAAQ,gBAAgB,+BAAqE;AAC7F,gBAAI,mBAAmB;AACvB,yBAAa,SAAS,IAAI;AACtB,gBAAA,QAAQ,WAAW,UAAU;AAC7B,kBAAI,CAAC,MAAM,IAAI,QAAQ,GAAG,GAAG;AACzB,sBAAM,CAAC,IAAI,IAAI,MAAM,IAAI,sBAAsB,QAAQ,GAAG;AACpD,sBAAA,IAAI,QAAQ,KAAK,IAAI;AAAA,cAC/B;AACA,kBAAI,iBAAiB,MAAM,IAAI,QAAQ,GAAG,CAAC;AAAA,YAAA,OAE1C;AACD,oBAAM,WAAW,qBAAqB,QAAQ,QAAQ,IAAI;AAC9C,0BAAA,IAAI,iBAAiB,QAAQ;AAAA,YAC7C;AAAA,UACJ;AAAA,QAAA,CACH;AACG,YAAA,GAAG,mBAAmB,CAAW,YAAA;AACjC,cAAI,QAAQ,QAAQ,OAChB,QAAQ,gBAAgB,+BAAqE;AAC7F,sBAAU,SAAS,IAAI;AAAA,UAC3B;AAAA,QAAA,CACH;AACD,YAAI,iBAAiB;AAAA,UACjB,IAAI;AAAA,UACJ,OAAO;AAAA,YAAkB;AAAA;AAAA,UAAiD;AAAA,UAC1E,OAAO;AAAA,YAA0B;AAAA;AAAA,UAAiD;AAAA,QAAA,CACrF;AACD,QAAAA,SAAQ,IAAI;AAAA,MAAA,CACf;AAAA,aAEE,GAAG;AACN,cAAQ,MAAM,CAAC;AACf,aAAO,KAAK;AAAA,IAChB;AAAA,EAAA,CACH;AACL;AAEA,SAAS,kBAAkB,UAAU;AACzB,SAAA,SAAS,KAAK,QAClB,SAAS,KAAK,eACd,SAAS,KAAK,UACd;AACR;AACA,SAAS,wBAAwB,UACjC,UAAU,MAAM;AAEZ,QAAMZ,UAAS,KAAK,SAAS,gBACvB,KAAK,SACL,KAAK,OAAO;AAClB,MAAI,YAAY,SAAS,MAAM,MAAM,SAAS,MAAM,GAAG,cAAc;AAEjE,QAAI,SAAS,MAAM,GAAG,iBAAiBA,SAAQ;AAC3C,YAAM,MAAM;AAAA,QACR,OAAO,SAAS,kBAAkB,QAAQ,CAAC;AAAA,QAC3C,WAAW;AAAA,QACX,iBAAiB;AAAA,MAAA;AAEZ,eAAA,KAAK,KAAK,GAAG;AAAA,IAC1B;AAAA,EACJ;AACJ;AACA,SAAS,gBAAgB,cAAc,UAAU;AAC7C,QAAM4B,QAAO;AACb,eAAa,MAAM,KAAK;AAAA,IACpB,MAAAA;AAAA,IACA,KAAK;AAAA,IACL,UAAU;AAAA,IACV,OAAO,SAAS,OAAO;AAAA,EAAA,CAC1B;AACD,eAAa,MAAM,KAAK;AAAA,IACpB,MAAAA;AAAA,IACA,KAAK;AAAA,IACL,UAAU;AAAA,IACV,OAAO,SAAS;AAAA,EAAA,CACnB;AACD,eAAa,MAAM,KAAK;AAAA,IACpB,MAAAA;AAAA,IACA,KAAK;AAAA,IACL,UAAU;AAAA,IACV,OAAO,SAAS,eAAe;AAAA,EAAA,CAClC;AACD,eAAa,MAAM,KAAK;AAAA,IACpB,MAAAA;AAAA,IACA,KAAK;AAAA,IACL,UAAU;AAAA,IACV,OAAO,SAAS;AAAA,EAAA,CACnB;AACD,eAAa,MAAM,KAAK;AAAA,IACpB,MAAAA;AAAA,IACA,KAAK;AAAA,IACL,UAAU;AAAA,IACV,OAAO,sBAAsB,SAAS,SAAS,KAAK;AAAA,EAAA,CACvD;AACD;AACI,iBAAa,MAAM,KAAK;AAAA,MACpB,MAAAA;AAAA,MACA,KAAK;AAAA,MACL,UAAU;AAAA,MACV,OAAO,SAAS,gBAAgB;AAAA,IAAA,CACnC;AACD,iBAAa,MAAM,KAAK;AAAA,MACpB,MAAAA;AAAA,MACA,KAAK;AAAA,MACL,UAAU;AAAA,MACV,OAAO,SAAS,cAAc;AAAA,IAAA,CACjC;AAAA,EACL;AACJ;AAEA,SAAS,sBAAsB,UAAU;AACrC,QAAM,QAAQ,CAAA;AACd,SAAO,KAAK,QAAQ,EAAE,QAAQ,CAAC,QAAQ;AAC7B,UAAA,IAAI,SAAS,GAAG;AACtB,QAAI,WAAW,CAAC,KAAK,YAAY,GAAG;AAC1B,YAAA,GAAG,IAAI,0BAA0B,CAAC;AAAA,IAAA,WAEnC,aAAa,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,QAAQ;AACzC,YAAA,GAAG,IAAI,EAAE,IAAI;AAAA,IAAA,WAEd,SAAS,CAAC,GAAG;AACZ,YAAA,GAAG,IAAI,sBAAsB,CAAC;AAAA,IAAA,OAEnC;AACD,YAAM,GAAG,IAAI;AAAA,IACjB;AAAA,EAAA,CACH;AACM,SAAA;AACX;AACA,MAAM,MAAM;AAAA,EACR,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACT;AACA,SAAS,OAAO,GAAG;AACR,SAAA,EAAE,QAAQ,WAAW,UAAU;AAC1C;AACA,SAAS,WAAW,GAAG;AACZ,SAAA,IAAI,CAAC,KAAK;AACrB;AAEA,SAAS,0BAA0B,MAAM;AAC/B,QAAA,YAAY,KAAK,SAAS,KAAK,OAAO,KAAK,MAAM,CAAC,OAAO;AACxD,SAAA;AAAA,IACH,SAAS;AAAA,MACL,MAAM;AAAA,MACN,SAAS,kBAAkB,SAAS;AAAA,IACxC;AAAA,EAAA;AAER;AACA,SAAS,cAAc,SAAS,MAAM;AAClC,UAAQ,UAAU,KAAK;AAAA,IACnB,IAAI;AAAA,IACJ,OAAO;AAAA,EAAA,CACV;AAED,QAAM5B,UAAS,KAAK,SAAS,gBACvB,KAAK,SACL,KAAK,OAAO;AAClB,aAAW,CAAC,aAAa,QAAQ,KAAK,KAAK,aAAa;AAEpD,UAAM,WAAW,KAAK,SAAS,gBACzB,WACA,SAAS;AACf,QAAIA,YAAW,UAAU;AACrB;AAAA,IACJ;AACA,YAAQ,UAAU,KAAK;AAAA,MACnB,IAAI,SAAS,GAAG,SAAS;AAAA,MACzB,OAAO,GAAG,kBAAkB,WAAW,CAAC;AAAA,IAAA,CAC3C;AAAA,EACL;AACJ;AACA,SAAS,qBAAqB,QAAQ,MAAM;AACxC,MAAI,WAAW;AACf,MAAI,WAAW,UAAU;AACrB,eAAW,CAAC,WAAW,QAAQ,KAAK,KAAK,YAAY,WAAW;AAC5D,UAAI,SAAS,GAAG,SAAS,MAAM,QAAQ;AACxB,mBAAA;AACX;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACO,SAAA;AACX;AACA,SAAS,cAAc,QAAQ,MAAM;AACjC,MAAI,WAAW,UAAU;AACrB,WAAO,KAAK,SAAS,gBACf,KAAK,SACL,KAAK,OAAO;AAAA,EAAA,OAEjB;AACD,UAAM,WAAW,MAAM,KAAK,KAAK,YAAY,OAAQ,CAAA,EAAE,KAAK,CAAQ,SAAA,KAAK,GAAG,SAAA,MAAe,MAAM;AACjG,QAAI,UAAU;AACV,aAAO,KAAK,SAAS,gBACf,WACA,SAAS;AAAA,IAAA,OAEd;AACM,aAAA;AAAA,IACX;AAAA,EACJ;AACJ;AACA,SAAS,aAAa,SAAS,MAE7B;AACE,QAAM,WAAW,cAAc,QAAQ,QAAQ,IAAI;AACnD,MAAI,UAAU;AAGF,YAAA,QAAQ,sBAAsB,QAAQ;AAAA,EAClD;AACO,SAAA;AACX;AACA,SAAS,sBAAsB,UAAU;AACrC,QAAM,QAAQ,CAAA;AACd,QAAM,aAAa;AACnB,QAAM,eAAe;AAAA,IACjB;AAAA,MACI,MAAM;AAAA,MACN,KAAK;AAAA,MACL,UAAU;AAAA,MACV,OAAO,SAAS,OAAO;AAAA,IAC3B;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,KAAK;AAAA,MACL,UAAU;AAAA,MACV,OAAO,SAAS,eAAe;AAAA,IACnC;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,KAAK;AAAA,MACL,UAAU;AAAA,MACV,OAAO,SAAS;AAAA,IACpB;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,KAAK;AAAA,MACL,UAAU;AAAA,MACV,OAAO,SAAS;AAAA,IACpB;AAAA,EAAA;AAEJ,QAAM,UAAU,IAAI;AACpB,QAAM,qBAAqB;AAC3B,QAAM,uBAAuB;AAAA,IACzB;AAAA,MACI,MAAM;AAAA,MACN,KAAK;AAAA,MACL,UAAU;AAAA,MACV,OAAO,sBAAsB,SAAS,SAAS,KAAK;AAAA,IACxD;AAAA,EAAA;AAEJ,QAAM,kBAAkB,IAAI;AAC5B;AACI,UAAM,sBAAsB;AAC5B,UAAM,wBAAwB;AAAA,MAC1B;AAAA,QACI,MAAM;AAAA,QACN,KAAK;AAAA,QACL,UAAU;AAAA,QACV,OAAO,SAAS,gBAAgB;AAAA,MACpC;AAAA,IAAA;AAEJ,UAAM,mBAAmB,IAAI;AAC7B,UAAM,oBAAoB;AAC1B,UAAM,sBAAsB;AAAA,MACxB;AAAA,QACI,MAAM;AAAA,QACN,KAAK;AAAA,QACL,UAAU;AAAA,QACV,OAAO,SAAS,cAAc;AAAA,MAClC;AAAA,IAAA;AAEJ,UAAM,iBAAiB,IAAI;AAAA,EAC/B;AACO,SAAA;AACX;AACA,SAAS,iBAAiB,OAAO,SAAS;AACtC,MAAI,aAAa;AACT,QAAA;AACA,QAAA,WAAW,aAAa,SAAS;AACjC,gBAAU,QAAQ;AAClB,aAAO,QAAQ;AAAA,IACnB;AACA,gBAAY,iBAAiB;AAAA,MACzB,SAAS;AAAA,MACT,OAAO;AAAA,QACH,OAAO;AAAA,QACP;AAAA,QACA,MAAM,KAAK,IAAI;AAAA,QACf,MAAM,CAAC;AAAA,QACP,MAAM,WAAW,CAAC;AAAA,QAClB,SAAS,UAAU,kBACb,UACA,UAAU,cACR,UAAU,YACR,YACA;AAAA,MACd;AAAA,IAAA,CACH;AAAA,EACL;AACJ;AACA,SAAS,UAAU,SAAS,MAAM;AAC9B,QAAM,WAAW,cAAc,QAAQ,QAAQ,IAAI;AACnD,MAAI,UAAU;AACJ,UAAA,CAAC,KAAK,IAAI,QAAQ;AACxB,QAAI,UAAU,YAAY,SAAS,QAAQ,MAAM,KAAK,GAAG;AAC5C,eAAA,OAAO,QAAQ,QAAQ,MAAM;AAAA,IAAA,WAEjC,UAAU,qBACd,SAAS,QAAQ,MAAM,KAAK,KACzB,QAAQ,QAAQ,MAAM,KAAK,KAC3B,SAAS,QAAQ,MAAM,KAAK,IAAI;AAC3B,eAAA,eAAe,QAAQ,QAAQ,MAAM;AAAA,IAAA,WAEzC,UAAU,mBAAmB,UAAU,QAAQ,MAAM,KAAK,GAAG;AACzD,eAAA,gBAAgB,QAAQ,MAAM;AAAA,IAC3C;AAAA,EACJ;AACJ;AAmKA,MAAM,8CACoB,iBAAiB;AAE3C,SAAS,WAAW,UAAU,CAAC,GAAG,eAAe;AAM7C,QAAM,oBAAoB,UAAU,QAAQ,eAAe,IACrD,QAAQ,kBACR;AAEN,QAAM,qBAEI;AACJ,QAAA,kCAAkB;AACxB,QAAM,CAAC,aAAa,QAAQ,IAAI,aAAa,OAAqB;AAClE,QAAM,SAAoC,2BAAA,QAAQ,IAAI,aAAa,eAAgB,aAAa,EAAE;AAC7F,MAAA,QAAQ,IAAI,aAAa,aAAe;AAK7C,WAAS,cAAc,WAAW;AACvB,WAAA,YAAY,IAAI,SAAS,KAAK;AAAA,EACzC;AACS,WAAA,cAAc,WAAW,UAAU;AAC5B,gBAAA,IAAI,WAAW,QAAQ;AAAA,EACvC;AACA,WAAS,iBAAiB,WAAW;AACjC,gBAAY,OAAO,SAAS;AAAA,EAChC;AACA;AACI,UAAM,OAAO;AAAA;AAAA,MAET,IAAI,OAAO;AACP,eAEM;AAAA,MACV;AAAA;AAAA,MAEA,IAAI,mBAAmB;AACZ,eAAA;AAAA,MACX;AAAA;AAAA,MAEA,MAAM,QAAQ,QAAQiD,UAAS;AAC3B,aAAM,QAAQ,IAAI,aAAa,gBAAiB,UAC5C,MAAQ;AACR,cAAI,eAAe;AAAA,QACvB;AAEA,YAAI,sBAAsB;AACtB,YAAA,QAAQ,IAAI,qBAAqB,IAAI;AAEzC,YAAI,cAAcA,SAAQ,CAAC,CAAC,GAAG;AACrB,gBAAA,OAAOA,SAAQ,CAAC;AACtB,eAAK,mBACD,KAAK;AACT,eAAK,kBACD,KAAK;AAAA,QACb;AAEA,YAAI,uBAAuB;AACvB,YAAiB,mBAAmB;AACb,iCAAA,mBAAmB,KAAK,KAAK,MAAM;AAAA,QAC9D;AAE+B;AACrB,gBAAA,KAAK,MAAM,GAAGA,QAAO;AAAA,QAC/B;AAMA,cAAM,aAAa,IAAI;AACvB,YAAI,UAAU,MAAM;AAChB,kCAAwB,qBAAqB;AAC7C,eAAK,QAAQ;AACF;QAAA;AAGf,aAAM,QAAQ,IAAI,aAAa,gBAAiB,UAA0B,MAAQ;AAC9E,gBAAM,MAAM,MAAM,eAAe,KAAK,IAAI;AAC1C,cAAI,CAAC,KAAK;AACA,kBAAA,gBAAgB,eAAe,gCAAgC;AAAA,UACzE;AACA,gBAAM,UAAU;AAKX;AAED,kBAAM,YAAY;AAClB,sBAAU,aAAa,KAAK,UAAU,aAAa,EAAE,OAAO;AAAA,UAChE;AACQ,kBAAA,GAAG,KAAK,gBAAgB;AAAA,QACpC;AAAA,MACJ;AAAA;AAAA,MAEA,IAAI,SAAS;AACF,eAAA;AAAA,MACX;AAAA,MACA,UAAU;AACN,oBAAY,KAAK;AAAA,MACrB;AAAA;AAAA,MAEA;AAAA;AAAA,MAEA;AAAA;AAAA,MAEA;AAAA;AAAA,MAEA;AAAA,IAAA;AAEG,WAAA;AAAA,EACX;AACJ;AAEA,SAAS,QAAQ,UAAU,IAAI;AAC3B,QAAM,WAAW;AACjB,MAAI,YAAY,MAAM;AACZ,UAAA,gBAAgB,eAAe,sBAAsB;AAAA,EAC/D;AACI,MAAA,CAAC,SAAS,QACV,SAAS,WAAW,OAAO,QAC3B,CAAC,SAAS,WAAW,IAAI,qBAAqB;AACxC,UAAA,gBAAgB,eAAe,aAAa;AAAA,EACtD;AACM,QAAA,OAAO,gBAAgB,QAAQ;AAC/B,QAAA,KAAK,kBAAkB,IAAI;AAC3B,QAAA,mBAAmB,oBAAoB,QAAQ;AAC/C,QAAA,QAAQ,SAAS,SAAS,gBAAgB;AAUhD,MAAI,UAAU,UAAU;AACA,wBAAA,IAAI,SAAS,gBAAgB;AAC1C,WAAA;AAAA,EACX;AACA,MAAI,UAAU,UAAU;AAEpB,QAAIC,YAAWC,cAAY,MAAM,UAAU,QAAQ,cAAc;AACjE,QAAID,aAAY,MAAM;AACb,UAAA,QAAQ,IAAI,aAAa,cAAe;AACpC,aAAA,eAAe,cAAc,sBAAsB,CAAC;AAAA,MAC7D;AACAA,kBAAW;AAAA,IACf;AACOA,WAAAA;AAAAA,EACX;AACA,QAAM,eAAe;AACjB,MAAA,WAAW,aAAa,cAAc,QAAQ;AAClD,MAAI,YAAY,MAAM;AAClB,UAAM,kBAAkB,OAAO,CAAC,GAAG,OAAO;AAC1C,QAAI,YAAY,kBAAkB;AAC9B,sBAAgB,SAAS,iBAAiB;AAAA,IAC9C;AACA,QAAI,IAAI;AACJ,sBAAgB,SAAS;AAAA,IAC7B;AACA,eAAW,eAAe,eAAe;AACzC,QAAI,aAAa,kBAAkB;AAC/B,eAAS,aAAa,IAClB,aAAa,iBAAiB,QAAQ;AAAA,IAC9C;AAEa,iBAAA,cAAc,UAAU,QAAQ;AAAA,EACjD;AACO,SAAA;AACX;AA0BA,SAAS,aAAa,SAAS,YAAY,eACzC;AACE,QAAM,QAAQ;AACd;AACI,UAAM,MAEA,MAAM,IAAI,MAAM,eAAe,OAAO,CAAC;AAC7C,QAAI,OAAO,MAAM;AACP,YAAA,gBAAgB,eAAe,gBAAgB;AAAA,IACzD;AACO,WAAA,CAAC,OAAO,GAAG;AAAA,EACtB;AACJ;AACA,SAAS,gBAAgB,UAAU;AAC/B;AACU,UAAA,OAAO,OAAO,CAAC,SAAS,OACxB,SAAS,WAAW,IAAI,sBACxB,gBAAgB;AAEtB,QAAI,CAAC,MAAM;AACP,YAAM,gBAAgB,CAAC,SAAS,OAC1B,eAAe,mBACf,eAAe,0BAA0B;AAAA,IACnD;AACO,WAAA;AAAA,EACX;AACJ;AAEA,SAAS,SAAS,SAAS,kBAAkB;AAElC,SAAA,cAAc,OAAO,IACrB,YAAY,mBACT,UACA,WACJ,CAAC,QAAQ,WACL,UACA,QAAQ;AACtB;AACA,SAAS,kBAAkB,MAAM;AAE7B,SAAO,KAAK,SAAS,gBACX,KAAK,SACL,KAAK,OAAO;AAE1B;AACA,SAASC,cAAY,MAAM,QAAQ,eAAe,OAAO;AACrD,MAAI,WAAW;AACf,QAAM,OAAO,OAAO;AAChB,MAAA,UAAU,2BAA2B,QAAQ,YAAY;AAC7D,SAAO,WAAW,MAAM;AACpB,UAAM,eAAe;AACjB,QAAA,KAAK,SAAS,eAAe;AAClB,iBAAA,aAAa,cAAc,OAAO;AAAA,IAgBjD;AACA,QAAI,YAAY,MAAM;AAClB;AAAA,IACJ;AACA,QAAI,SAAS,SAAS;AAClB;AAAA,IACJ;AACA,cAAU,QAAQ;AAAA,EACtB;AACO,SAAA;AACX;AACA,SAAS,2BAA2B,QAAQ,eAAe,OAAO;AAC9D,MAAI,UAAU,MAAM;AACT,WAAA;AAAA,EACX;AACA;AAEI,WAAO,CAAC,eACF,OAAO,SACP,OAAO,MAAM,OAAO,OAAO;AAAA,EACrC;AACJ;AA+YA,MAAM,oBAAoB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACJ;AACA,MAAM,sBAAsB,CAAC,KAAK,MAAM,KAAK,KAAK,MAAM,IAAI;AAE5D,SAAS,mBAAmB,KAAK,UAAU;AACjC,QAAA,OAAc,uBAAA,OAAO,IAAI;AAC/B,oBAAkB,QAAQ,CAAQ,SAAA;AAC9B,UAAM,OAAO,OAAO,yBAAyB,UAAU,IAAI;AAC3D,QAAI,CAAC,MAAM;AACD,YAAA,gBAAgB,eAAe,gBAAgB;AAAA,IACzD;AACA,UAAM,OAAO,MAAM,KAAK,KAAK,IACvB;AAAA,MACE,MAAM;AACF,eAAO,KAAK,MAAM;AAAA,MACtB;AAAA;AAAA,MAEA,IAAI,KAAK;AACL,aAAK,MAAM,QAAQ;AAAA,MACvB;AAAA,IAAA,IAEF;AAAA,MACE,MAAM;AACK,eAAA,KAAK,OAAO,KAAK,IAAI;AAAA,MAChC;AAAA,IAAA;AAED,WAAA,eAAe,MAAM,MAAM,IAAI;AAAA,EAAA,CACzC;AACG,MAAA,OAAO,iBAAiB,QAAQ;AACpC,sBAAoB,QAAQ,CAAU,WAAA;AAClC,UAAM,OAAO,OAAO,yBAAyB,UAAU,MAAM;AAC7D,QAAI,CAAC,QAAQ,CAAC,KAAK,OAAO;AAChB,YAAA,gBAAgB,eAAe,gBAAgB;AAAA,IACzD;AACA,WAAO,eAAe,IAAI,OAAO,kBAAkB,IAAI,MAAM,IAAI,IAAI;AAAA,EAAA,CACxE;AACD,QAAM,UAAU,MAAM;AAEX,WAAA,IAAI,OAAO,iBAAiB;AACnC,wBAAoB,QAAQ,CAAU,WAAA;AAElC,aAAO,IAAI,OAAO,iBAAiB,IAAI,MAAM,EAAE;AAAA,IAAA,CAClD;AAAA,EAAA;AAEE,SAAA;AACX;AAEA;AACqB;AACrB;AAEiC;AAC7B,0BAAwB,OAAO;AACnC;AAKA,wBAAwB,YAAY;AAEpC,yBAAyB,uBAAuB;AAEhD,IAAK,QAAQ,IAAI,aAAa,gBAAiB,2BAA2B;AACtE,QAAM,SAAS;AACf,SAAO,cAAc;AACrB,kBAAgB,OAAO,gCAAgC;AAC3D;AACA,IAAK,QAAQ,IAAI,aAAa,aAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACn4FtC,MAAM,cAAe;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEO,MAAM,gBAAgB;AAAA,EAC3B,SAAS,CAAC,EAAE,KAAK,0CAA0C,MAAM,MAAM,QAAQ,QAAQC,UAA8F,GAAG,OAAO,KAAI,CAAE;AAAA,EACrM,SAAS,CAAC,EAAE,KAAK,0CAA0C,MAAM,MAAM,QAAQ,QAAQC,UAA8F,GAAG,OAAO,KAAI,CAAE;AAAA,EACrM,SAAS,CAAC,EAAE,KAAK,0CAA0C,MAAM,MAAM,QAAQ,QAAQC,UAA8F,GAAG,OAAO,KAAI,CAAE;AAAA,EACrM,SAAS,CAAC,EAAE,KAAK,0CAA0C,MAAM,MAAM,QAAQ,QAAQC,UAA8F,GAAG,OAAO,KAAI,CAAE;AAAA,EACrM,SAAS,CAAC,EAAE,KAAK,0CAA0C,MAAM,MAAM,QAAQ,QAAQC,UAA8F,GAAG,OAAO,KAAI,CAAE;AAAA,EACrM,SAAS,CAAC,EAAE,KAAK,0CAA0C,MAAM,MAAM,QAAQ,QAAQC,QAA8F,GAAG,OAAO,KAAI,CAAE;AACvM;AAEO,MAAM,iBAAiB,CAE9B;AAkGO,MAAM,oBAAosBAAsB;AAC5B,MAAM,iBAAiB;AAGvB,MAAM,6BAA6B;AACnC,MAAM,qBAAqB;AAC3B,MAAM,qCAAqC;AC9LlD,MAAM,oCAAoC;AACpB,eAAA,mBAAmBC,iBAAgB,MAAM;AAC7D,QAAM,iBAAiB,EAAE,UAAU,CAAA;AACnC,aAAW,cAAcA,iBAAgB;AACvC,UAAM,EAAE,SAAS,aAAa,MAAM,WAAW;AACzC,UAAA,WAAW,OAAO,aAAa,aAAa,MAAM,KAAK,eAAe,YAAY,MAAM,UAAU,IAAI;AAC5G,aAAS,UAAU,cAAc;AAAA,EACnC;AACO,SAAA;AACT;AACgB,SAAA,wBAAwB,UAAU,SAAS;AACzD,MAAI,kBAAkB,CAAA;AAClB,MAAA,QAAQ,QAAQ,GAAG;AACH,sBAAA;AAAA,EAAA,WACT,SAAS,QAAQ,GAAG;AAC7B,UAAM,UAAU,CAAC,GAAG,SAAS,SAAS;AACtC,eAAW,UAAU,SAAS;AACxB,UAAA,SAAS,MAAM,GAAG;AACF,0BAAA,CAAC,GAAG,iBAAiB,GAAG,SAAS,MAAM,EAAE,OAAO,OAAO,CAAC;AAAA,MAC5E;AAAA,IACF;AAAA,EAAA,WACS,SAAS,QAAQ,KAAK,QAAQ,MAAM,CAAC,WAAW,WAAW,QAAQ,GAAG;AAC/E,oBAAgB,KAAK,QAAQ;AAAA,EAC/B;AACO,SAAA;AACT;AACsB,eAAA,oBAAoB,UAAUC,gBAAe,SAAS;AAC1E,QAAM,EAAE,eAAe,eAAe,aAAAC,cAAa,gBAAgB,KAAS,IAAA;AAC5E,MAAI,QAAQ,gBAAgB;AAC1B,UAAM,kBAAkB,wBAAwB,gBAAgB,CAAC,eAAe,aAAa,CAAC;AACxF,UAAA,QAAQ,IAAI,gBAAgB,IAAI,CAAC,WAAW,yBAAyB,QAAQD,gBAAe,QAAQ,CAAC,CAAC;AAAA,EAC9G;AACA,QAAM,UAAU,OAAO,CAAC,IAAwB,oBAAA,IAAO,GAAA,IAAI,aAAa,EAAE,IAAI,aAAa,CAAC,IAAIC;AAC1F,QAAA,QAAQ,IAAI,QAAQ,IAAI,CAAC,WAAW,yBAAyB,QAAQD,gBAAe,QAAQ,CAAC,CAAC;AAC7F,SAAA;AACT;AACA,eAAe,YAAY,QAAQ,EAAE,KAAK,QAAQ;AAChD,MAAI,UAAU;AACV,MAAA;AAEI,UAAA,SAAS,MAAM,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;AAClD,QAAA,WAAW,MAAM,GAAG;AACZ,gBAAA,MAAM,OAAO,MAAM;AAAA,IAAA,OAExB;AACK,gBAAA;AACN,UAAA,WAAW,QAAQ,eAAe;AACtB,sBAAA,IAAI,KAAK,OAAO;AAAA,MAChC;AAAA,IAEF;AAAA,WACO,GAAG;AACF,YAAA,MAAM,4BAA4B,EAAE,OAAO;AAAA,EACrD;AACO,SAAA;AACT;AACsB,eAAA,WAAW,QAAQA,gBAAe,QAAQ;AACxD,QAAA,UAAUA,eAAc,MAAM;AACpC,MAAI,WAAW,MAAM;AACX,YAAA,KAAK,8CAA8C,MAAM;AACjE;AAAA,EACF;AACA,QAAM,gBAAgB,CAAA;AACtB,aAAW,UAAU,SAAS;AAC5B,QAAI,UAAU;AACd,QAAI,iBAAiB,cAAc,IAAI,OAAO,GAAG,KAAK,OAAO,OAAO;AAExD,gBAAA,cAAc,IAAI,OAAO,GAAG;AAAA,IAAA,OACjC;AAGK,gBAAA,MAAM,YAAY,QAAQ,MAAM;AAAA,IAC5C;AACA,QAAI,WAAW,MAAM;AACnB,eAAS,SAAS,aAAa;AAAA,IACjC;AAAA,EACF;AACA,SAAO,QAAQ,aAAa;AAC9B;AACsB,eAAA,yBAAyB,QAAQA,gBAAe,UAAU;AACxE,QAAA,SAAS,CAAC,SAAS,YAAY;AACnC,UAAM,OAAO,SAAS,OAAO,KAAK,CAAA;AAClC,aAAS,SAAS,IAAI;AACtB,aAAS,OAAO,IAAI;AAAA,EAAA;AAEhB,QAAA,WAAW,QAAQA,gBAAe,MAAM;AAChD;ACvFO,SAAS,QAAQ,OAAO;AAC7B,SAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAC9C;ACGgB,SAAA,gBAAgB,UAAU,cAAc;;AACtD,UAAO,aAAQ,eAAR,mBAAoB;AAC7B;AACO,SAAS,kBAAkB,SAAS;AAIzC,QAAM,QAAQ;AACd,QAAM,WAAW,QAAQ,kBAAkB,KAAK,IAAI,CAAA;AAChD,MAAA,CAAC,WAAW,CAAC,OAAO;AACf,WAAA;AAAA,EACT;AACM,QAAA,UAAiC,uBAAA,OAAO,IAAI;AAClD,aAAW,QAAQ,SAAS;AACpB,UAAA,MAAM,KAAK;AACX,UAAA,SAAS,SAAS,GAAG;AAC3B,QAAI,QAAQ;AACV,cAAQ,GAAG,IAAI;AAAA,IACjB;AAAA,EACF;AACO,SAAA;AACT;AA0BO,SAAS,gBAAgB,MAAM;AACT,MAAA,CAAC,YAAY,WAAW;AACjD;AAAA,EACF;AACM,QAAA,QAAQ,QAAQ,IAAI;AAC1B,eAAa,gBAAgB,GAAG,qBAAqB,MAAM,IAAI,CAAC,MAAM,mBAAmB,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC;AACzG;ACjDA,MAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ,CAAC,QAAQ,MAAM,mBAAmB,GAAG,CAAC;AAAA,EAC9C,QAAQ,CAAC,QAAQ,mBAAmB,OAAO,QAAQ,WAAW,MAAM,KAAK,UAAU,GAAG,CAAC;AACzF;AAEgB,SAAA,UAAUlE,OAAM,OAAO;;AACrC,QAAM,OAAO,EAAE,GAAG,gBAAgB,GAAG,MAAM;AAC3C,QAAM,UAAU,eAAe,IAAI,KAAK,CAAA;AACpC,MAAA;AACA,MAAA,KAAK,WAAW,QAAQ;AAC1B,YAAQ,KAAK,SAAS;AAAA,EAAA,WACb,KAAK,SAAS;AACvB,YAAQ,KAAK,QAAQ,QAAQ,IAAI,KAAK;EACxC;AACM,QAAA,aAAa,UAAU,UAAU,SAAS;AAC1C,QAAA,cAAc,MAAM,aAAa,SAAS,QAAQA,KAAI,OAAK,UAAK,YAAL,8BAAgB;AACjF,QAAM,SAA8H,IAAI,WAAW;AAkEpH;AAC7B,UAAM,UAAU;AAChB,UAAM,wBAAwB,MAAM;AAC9B,UAAA,KAAK,YAAYoE,UAAQ,OAAO,OAAO,QAAQpE,KAAI,CAAC,GAAG;AACzD;AAAA,MACF;AACA,cAAQ,aAAR,QAAQ,WAAa;AACjB,UAAAA,SAAQ,QAAQ,UAAU;AAC5B,YAAIoE,UAAQ,OAAO,OAAO,QAAQ,SAASpE,KAAI,CAAC,GAAG;AACjD;AAAA,QACF;AAAA,MAIF;AACQ,cAAA,SAASA,KAAI,IAAI,OAAO;AAChC,wBAAkB,gBAAgB,OAAO,GAAGA,OAAM,OAAO,OAAO,IAAI;AAAA,IAAA;AAEtE,UAAM,SAAS,QAAQ,MAAM,SAAS,gBAAgB,qBAAqB;AACnE,YAAA,MAAM,SAAS,aAAa,MAAM;AACjC;AACP,aAAO,sBAAsB;AAAA,IAAA,CAC9B;AAAA,EACH;AACO,SAAA;AACT;AAOA,SAAS,eAAe,OAAO,IAAI;AACT;AACtB,WAAOqC,QAAM,iBAAiB,gBAAA,GAAmB,QAAQ,KAAK,IAAI,IAAI;AAAA,EAGxE;AACF;AAYA,SAAS,kBAAkB,OAAOrC,OAAM,OAAO,OAAO,CAAA,GAAI;AACxD,MAAI,OAAO;AACL,QAAA,UAAU,QAAQ,UAAU,QAAQ;AACtC,aAAO,UAAU,OAAOA,OAAM,OAAO,IAAI;AAAA,IAC3C;AACA,QAAI,UAAU,OAAOA,KAAI,MAAM,QAAQ;AAC9B,aAAA,aAAa,OAAOA,OAAM,IAAI;AAAA,IACvC;AAAA,EACF;AACF;ACxJA,SAAS,QAAQ,KAAK,aAAa,MAAM;AACvC,QAAM,mBAAmB,cAAc,IAAI,UAAU,IAAI,QAAQ,mBAAmB,IAAI;AACxF,QAAM,aAAa,OAAO,qBAAqB,WAAW,iBAAiB,SAAS,OAAO,IAAI;AAC/F,MAAI,YAAY;AACd,WAAO;AAAA,EACR;AACD,QAAM,aAAa,IAAI,aAAa,IAAI,WAAW,YAAY;AAC/D,QAAM,iBAAiB,eAAe,SAAS,eAAe,OAAO;AACrE,MAAI,gBAAgB;AAClB,WAAO;AAAA,EACR;AACD,MAAI,eAAe,UAAU,mBAAmB,QAAQ;AACtD,WAAO;AAAA,EACR;AACD,SAAO;AACT;ACZO,SAAS,qBAAqB,SAAS;AAC5C,YAAU,WAAW;AACrB,QAAM,aAAa,CAAA;AACnB,aAAW,UAAU,SAAS;AACxB,QAAA,SAAS,MAAM,GAAG;AACpB,iBAAW,KAAK,EAAE,MAAM,OAAQ,CAAA;AAAA,IAAA,OAC3B;AACL,iBAAW,KAAK,MAAM;AAAA,IACxB;AAAA,EACF;AACO,SAAA;AACT;AACA,SAAS,eAAe,MAAM;AAC5B,SAAO,QAAQ,QAAQ,YAAY,QAAQ,UAAU;AACvD;AACA,SAAS,WAAW,QAAQ;AACnB,SAAA,UAAU,QAAQ,EAAE,gBAAgB,WAAW,YAAY,UAAU,MAAM,OAAO,MAAM;AACjG;AACO,SAAS,UAAU,QAAQ;AACzB,SAAA,UAAU,QAAQ,gBAAgB;AAC3C;AACO,SAAS,cAAc,MAAM;AAClC,SAAO,eAAe,IAAI,IAAI,KAAK,SAAS;AAC9C;AACO,SAAS,YAAY,MAAM;AAC1B,QAAA,SAAS,cAAc,IAAI;AACjC,MAAI,WAAW,MAAM;AACZ,WAAA;AACT,MAAI,UAAU,MAAM;AAClB,WAAO,OAAO;AACT,SAAA;AACT;AACO,SAAS,UAAU,MAAM;AAC9B,SAAO,MAAM,cAAc,IAAI,EAAE,MAAM;AACzC;AACO,SAAS,WAAW,MAAM;AAC/B,SAAO,MAAM,cAAc,IAAI,EAAE,OAAO;AAC1C;AACO,SAAS,eAAe,MAAM;AACnC,SAAO,MAAM,cAAc,IAAI,EAAE,WAAW;AAC9C;AACgB,SAAA,UAAU,MAAM,QAAQ;AAChC,QAAA,SAAS,cAAc,IAAI;AAC7B,MAAA,MAAM,OAAO,MAAM,GAAG;AACxB,WAAO,OAAO,QAAQ;AAAA,EAAA,OACjB;AACL,WAAO,SAAS;AAAA,EAClB;AACF;AAIO,SAAS,aAAa,WAAW;AACtC,MAAI,SAAS,SAAS;AACb,WAAA;AACT,MAAI,SAAS,SAAS;AACpB,WAAO,UAAU;AACZ,SAAA;AACT;AACgB,SAAA,mBAAmB,WAAW,QAAQ;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,MAAIA,QAAO,aAAa,SAAS,KAAK,aAAa,cAAc,KAAK,sBAAsB;AACxF,MAAA,WAAW,iBAAiB,aAAa,sBAAsB;AACjE,IAAAA,SAAQ,sBAAsB;AAAA,EAChC;AACO,SAAAA;AACT;AACgB,SAAA,eAAe,SAAS,SAAS;AAC3C,MAAA,WAAW,OAAO,GAAG;AACvB,WAAO,QAAQ,OAAO;AAAA,EACxB;AACO,SAAA;AACT;AACA,SAAS,mBAAmB,SAAS,gBAAgB;AACnD,QAAM,iBAAiB,CAAA;AACvB,aAAW,CAACiB,QAAO,WAAW,KAAK,eAAe,WAAW;AACrD,UAAA,gBAAgB,QAAQ,KAAK,CAAC,MAAM,EAAE,IAAI,YAAY,MAAM,YAAY,YAAa,CAAA;AAC3F,QAAI,eAAe;AACF,qBAAA,KAAK,EAAE,MAAM,cAAc,MAAM,OAAO,IAAIA,SAAQ,eAAe,OAAQ,CAAA;AAC1F;AAAA,IACF;AAAA,EACF;AACA,aAAW,CAACA,QAAO,WAAW,KAAK,eAAe,WAAW;AAC3D,UAAM,eAAe,YAAY,MAAM,GAAG,EAAE,CAAC,EAAE;AAC/C,UAAM,gBAAgB,QAAQ,KAAK,CAAC,MAAM,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC,EAAE,kBAAkB,YAAY;AAC5F,QAAI,eAAe;AACF,qBAAA,KAAK,EAAE,MAAM,cAAc,MAAM,OAAO,QAAQA,SAAQ,eAAe,OAAQ,CAAA;AAC9F;AAAA,IACF;AAAA,EACF;AACO,SAAA;AACT;AACO,MAAM,8BAA8B;AAC3C,SAAS,qBAAqB,GAAG,GAAG;AAC9B,MAAA,EAAE,UAAU,EAAE,OAAO;AACvB,WAAO,EAAE,KAAK,SAAS,EAAE,KAAK;AAAA,EAChC;AACO,SAAA,EAAE,QAAQ,EAAE;AACrB;AACO,MAAM,8BAA8B;AAC3B,SAAA,kBAAkB,SAAS,gBAAgB,EAAE,UAAU,6BAA6B,WAAW,4BAAgC,IAAA,IAAI;AACjJ,QAAMoD,qBAAoB,CAAA;AAC1B,aAAW,KAAK,SAAS;AACjB,UAAA,EAAE,MAAAxC,MAAS,IAAA;AACX,UAAA,MAAM,EAAE,OAAOA;AACrB,IAAAwC,mBAAkB,KAAK,EAAE,MAAAxC,OAAM,IAAK,CAAA;AAAA,EACtC;AACM,QAAA,iBAAiB,QAAQwC,oBAAmB,cAAc;AAC5D,MAAA,eAAe,SAAS,GAAG;AAC7B,mBAAe,KAAK,QAAQ;AAAA,EAC9B;AACA,SAAO,eAAe,SAAS,eAAe,CAAC,EAAE,OAAO;AAC1D;AACO,SAAS,gBAAgBF,cAAa;AACpC,SAAA,IAAI,OAAO,MAAMA,aAAY,KAAK,GAAG,CAAC,YAAY,GAAG;AAC9D;ACvHA,MAAM,oBAAoB;AACnB,SAAS,YAAY,MAAM;AAChC,QAAM,UAAU,OAAO,KAAK,KAAK,SAAS,CAAC,MAAM,WAAW,KAAK,IAAK,IAAG;AACzE,MAAI,OAAO,KAAK,CAAC,MAAM,UAAU;AAC/B,SAAK,QAAQ,OAAO;AAAA,EACrB;AACD,QAAM,CAAC,MAAM,IAAI,IAAI;AACrB,MAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;AACrC,UAAM,IAAI,UAAU,6CAA6C,IAAI;AAAA,EACtE;AACD,MAAI,SAAS,UAAU,OAAO,SAAS,YAAY;AACjD,UAAM,IAAI,MAAM,gDAAgD,IAAI;AAAA,EACrE;AACD,QAAM,MAAM,oBAAoB;AAChC,QAAM,UAAU;AAChB,QAAM,QAAQ,MAAM,QAAQ,QAAQ,OAAO,GAAG;AAC9C,MAAI,MAAM,UAAU,UAAU,MAAM;AAClC,UAAM,eAAe;AACrB,QAAI,MAAM,YAAY,GAAG;AACvB,cAAQ,QAAQ,MAAM,GAAG,IAAI;AAC7B,aAAO;AAAA,IACR;AACD,UAAM,QAAQ;AAAA,EACf;AACD,SAAO;AACT;AC3BA,SAAS,MAAM,KAAKlD,QAAO;AACzB,QAAM,SAAS,CAAC,IAAI,MAAM,GAAGA,MAAK,GAAG,IAAI,MAAMA,MAAK,CAAC;AACrD,SAAO;AACT;AACO,SAAS,cAAc,OAAO;AACnC,QAAM,EAAE,UAAU,OAAO,MAAAX,OAAM,MAAAN,OAAM,MAAM,QAAQ,MAAM,gBAAgB,QAAO,IAAK;AACrF,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAAM;AAAA,IACA,MAAAN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACA;AACO,SAAS,QAAQ,EAAE,OAAM,GAAI,OAAO,UAAU,QAAQ;;AAC3D,MAAI,aAAa,UAAU;AACzB,WAAO,OAAO,QAAQ,KAAK;AAAA,EAC5B;AACD,QAAM,CAAC,WAAW,QAAQ,IAAI,MAAM,MAAM,MAAM,CAAC;AACjD,QAAM,aAAa,GAAG,SAAS,GAAG,MAAM,GAAG,aAAa,KAAK,WAAW,IAAI,QAAQ,EAAE;AACtF,QAAM,UAAS,kBAAO,YAAP,mBAAgB,WAAhB,mBAAwB,KAAK,CAAC,MAAM,EAAE,SAAS;AAC9D,MAAI,UAAU,MAAM;AAClB,WAAO;AAAA,EACR;AACD,QAAM,mBAAmB,OAAO,CAAE,GAAE,OAAO,MAAM;AACjD,mBAAiB,OAAO;AACxB,SAAO,OAAO,QAAQ,gBAAgB;AACxC;ACzBA,MAAM,oBAAoC,oBAAI,IAAI,CAAC,sBAAsB,uBAAuB,CAAC;AACjG,SAAS,WAAW,SAAS;AAC3B,QAAM,EAAE,eAAe,eAAe,SAAQ,IAAK;AACnD,QAAM,kBAAkB,kBAAkB;AAC1C,SAAO,EAAE,mBAAmB,kBAAkB,IAAI,QAAQ;AAAA,EAC1D,EAAE,aAAa;AACjB;AACO,MAAM,oBAAoB;AAC1B,SAAS,iBAAiB,QAAQ,YAAY;AACnD,QAAM,EAAE,oBAAmB,IAAK,OAAO,cAAc,OAAO;AAC5D,QAAM,QAAQ,MAAM,UAAU;AAC9B,MAAI,SAAS,QAAQ,CAAC,MAAM,MAAM;AAChC;AAAA,EACD;AACD,QAAMA,QAAO,aAAa,MAAM,IAAI;AACpC,SAAOA,MAAK,MAAM,mBAAmB,EAAE,CAAC;AAC1C;AACO,SAAS,WAAW,QAAQ,OAAO,QAAQ;;AAChD,MAAI,OAAO,UAAU,YAAY,YAAY,OAAO,EAAE,gBAAgB,KAAI,CAAE,GAAG;AAC7E,WAAO;AAAA,EACR;AACD,QAAM,iBAAiB,aAAa,QAAQ,OAAO,MAAM;AACzD,SAAO,kBAAkB,OAAO,OAAK,oBAAe,mBAAf,mBAA+B,aAAY,eAAe;AACjG;AACO,SAAS,YAAY,QAAQ,OAAO,QAAQ;AACjD,QAAM,WAAW,aAAa,QAAQ,OAAO,MAAM;AACnD,SAAO,YAAY;AACrB;AACO,SAAS,eAAe,QAAQ,OAAO,QAAQ;AACpD,QAAM,WAAW,aAAa,QAAQ,OAAO,MAAM;AACnD,SAAO,YAAY;AACrB;AACO,SAAS,aAAa,QAAQ,OAAO,QAAQ;AAClD,QAAM,EAAE,QAAQ,KAAM,IAAG;AACzB,QAAM,UAAU,UAAU,UAAU,IAAI;AACxC,QAAM,EAAE,qBAAqB,eAAe,8BAA8B,UAAU,cAAe,IAAG,OAAO,cAAc,OAAO;AAClI,QAAM,cAAc,iBAAiB,OAAO,aAAa;AACzD,MAAI;AACJ,MAAI,SAAS,KAAK,GAAG;AACnB,QAAI,MAAM,CAAC,MAAM,KAAK;AACpB,YAAM,EAAE,UAAU,MAAM,QAAQ,MAAAM,UAAS,UAAU,KAAK;AACxD,YAAM,QAAQ,WAAW,MAAM;AAC/B,eAAS,EAAE,MAAM,OAAO,MAAAA,MAAI;AAAA,IAClC,OAAW;AACL,eAAS,EAAE,MAAM;IAClB;AAAA,EACL,OAAS;AACL,aAAS;AAAA,EACV;AACD,MAAI,iBAAiB,OAAO,CAAE,GAAE,MAAM;AACtC,QAAM,yBAAyB,CAAC,QAAQ,UAAU,OAAO,CAAC,CAAC,IAAI,QAAQ,EAAE,UAAU;AACnF,MAAI,uBAAuB,cAAc,GAAG;AAC1C,UAAM,gBAAgB,QAAQ,QAAQ,gBAAgB,UAAU,OAAO;AACvE,UAAM,oBAAoB,iBAAiB,QAAQ,aAAa;AAChE,QAAI,SAAS,iBAAiB,GAAG;AAC/B,uBAAiB;AAAA,QACf,MAAM,mBAAmB,mBAAmB,SAAS;AAAA,UACnD;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACV,CAAS;AAAA;AAAA,QAED,QAAQ,cAAc;AAAA,QACtB,OAAO,cAAc;AAAA,QACrB,MAAM,cAAc;AAAA,MAC5B;AACM,qBAAe,QAAQ,cAAc;AAAA,IAC3C,OAAW;AACL,UAAI,YAAY,EAAE,eAAe,SAAS,eAAe,SAAQ,CAAE,GAAG;AACpE,uBAAe,OAAO,IAAI,OAAO,GAAG,eAAe,IAAI;AAAA,MACxD;AACD,qBAAe,OAAO,gBAAgB,kBAAkB,eAAe,MAAM,IAAI,IAAI,qBAAqB,eAAe,MAAM,IAAI;AAAA,IACpI;AAAA,EACL,OAAS;AACL,QAAI,CAAC,eAAe,QAAQ,EAAE,UAAU,iBAAiB;AACvD,qBAAe,OAAO,iBAAiB,QAAQ,OAAO,aAAa,KAAK;AAAA,IACzE;AACD,mBAAe,OAAO,mBAAmB,eAAe,MAAM,SAAS;AAAA,MACrE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACN,CAAK;AAAA,EACF;AACD,MAAI;AACF,UAAM,gBAAgB,OAAO,QAAQ,cAAc;AACnD,QAAI,cAAc,MAAM;AACtB,aAAO;AAAA,IACR;AACD,WAAO,OAAO,QAAQ,KAAK;AAAA,EAC5B,SAAQ,GAAG;AACV,QAAI,OAAO,MAAM,YAAY,UAAU,KAAK,EAAE,SAAS,GAAG;AACxD,aAAO;AAAA,IACR;AAAA,EACF;AACH;AACO,MAAM,qCAAqC,CAAC,SAAS;AAC5D,SAAS,oCAAoC,QAAQ,OAAO;;AAC1D,MAAI,OAAO,cAAc,OAAO,KAAK,aAAa,yBAAyB;AACzE,WAAO,MAAM,OAAO,UAAU,KAAK;AAAA,EACpC;AACD,QAAM,OAAO,MAAM,QAAQ;AAC3B,WAAO,WAAM,IAAI,MAAV,mBAAc,gCAA+B,CAAA;AACtD;AACO,SAAS,iBAAiB,QAAQ,QAAQ,QAAQ;AACvD,QAAM,QAAQ,UAAU,OAAO,OAAO,aAAa;AACnD,QAAMN,QAAO,iBAAiB,QAAQ,KAAK;AAC3C,MAAI,CAACA,OAAM;AACT,WAAO;AAAA,EACR;AACD,QAAM,8BAA8B,kCAAkC,OAAO,aAAa;AAC1F,QAAM,YAAY,cAAc,KAAK;AACrC,QAAM,iBAAiB,oCAAoC,QAAQ,KAAK,EAAE,MAAM;AAChF,QAAM,YAAY,EAAE,GAAG,WAAW,MAAAA,OAAM,QAAQ,EAAE,GAAG,UAAU,QAAQ,GAAG,eAAgB,EAAA;AAC1F,QAAM,OAAO,WAAW,QAAQ,WAAW,MAAM;AACjD,SAAO,4BAA4B,MAAM,MAAM;AACjD;ACvHO,SAAS,WAAW,QAAQ;AAAA,EACjC,kBAAkB;AAAA,EAClB,kBAAkB,gBAAgB;AAAA,EAClC,qBAAqB,cAAc;AACrC,GAAG;AACD,QAAM,EAAE,iBAAkB,KAAG,iCAAgB,GAAG,OAAO;AACvD,QAAM,OAAO,YAAY,OAAO,IAAI;AACpC,QAAM,aAAa;AAAA,IACjB,WAAW,CAAE;AAAA,IACb,MAAM,CAAE;AAAA,IACR,MAAM,CAAE;AAAA,EACZ;AACE,MAAI,MAAM,KAAK,OAAO,KAAK,QAAQ,MAAM,KAAK,OAAO,KAAK,MAAM;AAC9D,WAAO;AAAA,EACR;AACD,QAAM,SAAS,UAAU,OAAO,IAAI;AACpC,QAAM,UAAU,WAAW,OAAO,IAAI;AACtC,QAAM,gBAAgB,qBAAqB,OAAO,EAAE,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM,KAAK;AAAA,IACpF,MAAM;AAAA,EACV;AACE,QAAM,aAAa,cAAc;AACjC,QAAM,aAAa,cAAc,OAAO;AACxC,MAAI,iBAAiB;AACnB,eAAW,UAAU,MAAM;AAAA,EAC5B;AACD,MAAI,iBAAiB,UAAU,MAAM,KAAK,OAAO,GAAG;AAClD,QAAI,YAAY;AACd,iBAAW,UAAU,OAAO;AAAA,IAC7B;AACD,eAAW,KAAK;AAAA,MACd,GAAG,iBAAiB,QAAQ,MAAM,OAAO,GAAG,WAAW;AAAA,MACvD,GAAG,iBAAiB,QAAQ,aAAa,aAAa;AAAA,IAC5D;AACI,eAAW,KAAK;AAAA,MACd,GAAG,SAAS,QAAQ,aAAa,aAAa;AAAA,MAC9C,GAAG,mBAAmB,eAAe,YAAY,WAAW;AAAA,MAC5D,GAAG,sBAAsB,MAAM,OAAO,GAAG,YAAY,WAAW;AAAA,IACtE;AAAA,EACG;AACD,SAAO;AACT;AACA,SAAS,aAAa;AACpB,QAAM,UAAU;AAChB,QAAM,OAAO,YAAY,QAAQ,KAAK;AACtC,SAAO,QAAQ,MAAM,KAAK,OAAO,GAAG,QAAQ,QAAQ,IAAI,OAAO;AACjE;AACO,SAAS,iBAAiB,QAAQ,SAAS,aAAa;AAC7D,QAAM,UAAU;AAChB,QAAM,EAAE,eAAe,SAAQ,KAAK,iCAAkB,GAAC,OAAO;AAC9D,QAAM,QAAQ,CAAA;AACd,MAAI,aAAa;AACf,WAAO;AACT,QAAM,YAA4B,oBAAI;AACtC,aAAW,UAAU,SAAS;AAC5B,UAAM,YAAY,OAAO;AACzB,QAAI,CAAC,WAAW;AACd,cAAQ,KAAK,wDAAwD;AACrE;AAAA,IACD;AACD,UAAM,CAAC,UAAU,MAAM,IAAI,UAAU,MAAM,GAAG;AAC9C,QAAI,YAAY,WAAW,OAAO,oBAAoB,CAAC,UAAU,IAAI,QAAQ,IAAI;AAC/E,gBAAU,IAAI,UAAU,MAAM;AAAA,IAC/B;AACD,cAAU,IAAI,WAAW,MAAM;AAAA,EAChC;AACD,aAAW,CAAC,KAAK,SAAS,KAAK,UAAU,QAAO,GAAI;AAClD,UAAMsE,cAAa,iBAAiB,QAAQ,UAAU,IAAI;AAC1D,QAAIA,aAAY;AACd,YAAM,KAAK;AAAA,QACT,CAAC,WAAW,GAAG,YAAY,GAAG;AAAA,QAC9B,KAAK;AAAA,QACL,MAAM,cAAcA,aAAY,OAAO;AAAA,QACvC,UAAU;AAAA,MAClB,CAAO;AAAA,IACF;AAAA,EACF;AACD,MAAI,eAAe;AACjB,UAAMA,cAAa,iBAAiB,QAAQ,aAAa;AACzD,QAAIA,aAAY;AACd,YAAM,KAAK;AAAA,QACT,CAAC,WAAW,GAAG;AAAA,QACf,KAAK;AAAA,QACL,MAAM,cAAcA,aAAY,OAAO;AAAA,QACvC,UAAU;AAAA,MAClB,CAAO;AAAA,IACF;AAAA,EACF;AACD,SAAO;AACT;AACO,SAAS,gBAAgB,QAAQ,SAAS,eAAe;AAC9D,QAAM,QAAQ,OAAO,OAAO,aAAa;AACzC,QAAM,eAAe,YAAY,QAAQ;AAAA,IACvC,GAAG;AAAA,IACH,MAAM;AAAA,IACN,MAAM,iBAAiB,QAAQ,KAAK;AAAA,EACxC,CAAG;AACD,MAAI,CAAC;AACH,WAAO;AACT,MAAI,OAAO,cAAc,aAAa,MAAM,OAAO;AACnD,QAAM,mBAAmB,SAAS,aAAa,KAAK,cAAc,oBAAoB;AACtF,QAAM,0BAA0B,aAAa;AAC7C,QAAM,SAAS,IAAI;AACnB,aAAW,kBAAkB,kBAAkB;AAC7C,QAAI,kBAAkB,yBAAyB;AAC7C,YAAM,kBAAkB,wBAAwB,cAAc;AAC9D,UAAI,QAAQ,eAAe,GAAG;AAC5B,wBAAgB,QAAQ,CAAC,MAAM,OAAO,OAAO,gBAAgB,KAAK,EAAE,CAAC;AAAA,MAC7E,OAAa;AACL,eAAO,OAAO,gBAAgB,mBAAmB,EAAE;AAAA,MACpD;AAAA,IACF;AAAA,EACF;AACD,QAAM,cAAc,OAAO;AAC3B,MAAI,aAAa;AACf,WAAO,GAAG,IAAI,IAAI,WAAW;AAAA,EAC9B;AACD,SAAO;AACT;AACO,SAAS,iBAAiB,QAAQ,aAAa,eAAe;AACnE,QAAM,UAAU;AAChB,QAAM,OAAO,gBAAgB,QAAQ,SAAS,aAAa;AAC3D,MAAI,CAAC;AACH,WAAO;AACT,SAAO,CAAC,EAAE,CAAC,WAAW,GAAG,YAAY,KAAK,aAAa,KAAI,CAAE;AAC/D;AACO,SAAS,SAAS,QAAQ,aAAa,eAAe;AAC3D,QAAM,UAAU;AAChB,QAAM,OAAO,gBAAgB,QAAQ,SAAS,aAAa;AAC3D,MAAI,CAAC;AACH,WAAO;AACT,SAAO,CAAC,EAAE,CAAC,WAAW,GAAG,eAAe,UAAU,UAAU,SAAS,KAAI,CAAE;AAC7E;AACO,SAAS,mBAAmB,eAAe,YAAY,aAAa;AACzE,MAAI,CAAC,iBAAiB,CAAC;AACrB,WAAO;AACT,SAAO,CAAC,EAAE,CAAC,WAAW,GAAG,WAAW,UAAU,aAAa,SAAS,kBAAkB,UAAU,EAAC,CAAE;AACrG;AACO,SAAS,sBAAsB,SAAS,YAAY,aAAa;AACtE,QAAM,mBAAmB,QAAQ,OAAO,CAAC,WAAW,OAAO,OAAO,OAAO,QAAQ,UAAU;AAC3F,SAAO,iBAAiB,IAAI,CAAC,YAAY;AAAA,IACvC,CAAC,WAAW,GAAG,eAAe,OAAO,GAAG;AAAA,IACxC,UAAU;AAAA,IACV,SAAS,kBAAkB,OAAO,GAAG;AAAA,EACtC,EAAC;AACJ;AACA,SAAS,kBAAkB,KAAK;AAC9B,UAAQ,OAAO,IAAI,QAAQ,MAAM,GAAG;AACtC;AACA,SAAS,cAAc,WAAW,SAAS;AACzC,MAAI,UAAU,MAAM,cAAc;AAChC,WAAO;AACT,SAAO,QAAQ,SAAS,SAAS;AACnC;AC9HgB,SAAA,WAAW,MAAM,QAAQ;AAChC,SAAA,sBAAsB,MAAM,aAAa,MAAM;AACxD;AACgB,SAAA,gBAAgB,MAAM,QAAQ;AACrC,SAAA,sBAAsB,MAAM,mBAAmB,MAAM;AAC9D;AAIgB,SAAA,mBAAmB,MAAM,QAAQ,UAAU;AACzD,SAAO,sBAAsB,MAAM,sBAAsB,QAAQ,QAAQ;AAC3E;AACA,SAAS,uBAAuB,MAAM,WAAW,WAAW,SAAS,SAAS;AAC5E,SAAO,sBAAsB,MAAM,0BAA0B,WAAW,WAAW,SAAS,OAAO;AACrG;AACgB,SAAA,mBAAmB,MAAM,WAAW,WAAW;AAC7D,SAAO,sBAAsB,MAAM,sBAAsB,WAAW,SAAS;AAC/E;AAIO,SAAS,4BAA4B,MAAM;AACzC,SAAA;AAAA,IACL,MAAM,QAAQ,WAAA,EAAa;AAAA,IAC3B,QAAQ,UAAU;AAAA,IAClB,eAAe,iCAAiB;AAAA,IAChC,WAAW,SAAS,kBAAkB,OAAO,CAAG,EAAA;AAAA,EAAA;AAEpD;AACA,eAAsB,iBAAiB,WAAW,MAAM,aAAa,UAAU,OAAO;AACpF,QAAM,EAAE,kBAAkB,6BAA6B,KAAA,IAAS;AAC1D,QAAA,OAAO,6BAA6B,WAAW;AACrD,QAAM,UAAU;AACV,QAAA,YAAY,UAAU,IAAI;AAC1B,QAAAH,eAAc,eAAe,IAAI;AAC9B,WAAA,WAAW,SAAS,WAAW;AAClC,QAAA,SAAS,SAAS,CAAC,KAAK;AAC1B;AACE,QAAA;AACF;AACF,oBAAgB,MAAM,MAAM;AAAA,EAC9B;AAEA,MAAI,CAAC,WAAW;AACH;AACJ,WAAA;AAAA,EACT;AACI,MAAA,CAAC,WAAW,kBAAkB;AACrB;AACJ,WAAA;AAAA,EACT;AACA,MAAI,cAAc,WAAW;AAChB;AACJ,WAAA;AAAA,EACT;AACA,QAAM,iBAAiB,MAAM,uBAAuB,MAAM,WAAW,WAAW,SAAS,OAAO;AAChG,MAAI,kBAAkBA,aAAY,SAAS,cAAc,GAAG;AAC1D,QAAI,cAAc,gBAAgB;AACrB;AACJ,aAAA;AAAA,IACT;AACY,gBAAA;AAAA,EACd;AACA,MAAI,MAAM;AACF,UAAA,sBAAsB,wBAAwB,MAAM,gBAAgB;AAC1E,UAAM,SAAS,CAAC,QAAQ,YAAY,mBAAmB,MAAM,QAAQ,OAAO;AAC5E,QAAI,qBAAqB;AACvB,YAAM,kBAAkB,wBAAwB,qBAAqB,CAAC,SAAS,CAAC;AAC1E,YAAA,QAAQ,IAAI,gBAAgB,IAAI,CAAC,WAAW,WAAW,QAAQ,eAAe,MAAM,CAAC,CAAC;AAAA,IAC9F;AACM,UAAA,WAAW,WAAW,eAAe,MAAM;AAAA,EACnD;AACA,MAAI,6BAA6B;AACxB,WAAA;AAAA,EACT;AACA,aAAW,SAAS;AACpB,YAAU,MAAM,SAAS;AACnB,QAAA,mBAAmB,MAAM,WAAW,SAAS;AAC5C,SAAA;AACT;AACO,SAAS,aAAa,OAAO,mBAAmB,sBAAsB,qBAAqB,qBAAqB,aAAa;AAClI,QAAM,EAAE,UAAU,eAAe,iBAAA,IAAqB;AAChD,QAAA,yBAAyB,6BAA6B,WAAW;AACvE,QAAM,gBAAgB,WAAW,mBAAmB,IAAI,wBAAwB;AAEhF,QAAM,EAAE,KAAK,UAAU,aAAa,iBAAiB;AAE/C,QAAA;AAAA,IACJ,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,EAAA,IACE,yBAAyB,sBAAsB,OAAO,sBAAsB,qBAAqB,aAAa,IAAI;AAQtH,MAAI,WAAW,wBAAwB;AAC9B,WAAA;AAAA,EACT;AACA,OAAK,SAAS,yBAAyB,SAAS,YAAY,SAAS,eAAe,eAAe;AAC1F,WAAA;AAAA,EACT;AACA,MAAI,cAAc;AAElB,MAAI,CAAC,aAAa;AAChB,QAAI,kBAAkB;AACN,oBAAA,gBAAgB,mBAAmB,UAAU,KAAK;AAAA,IAAA,WACvD,aAAa,aAAa;AACnC,oBAAc,kBAAkB,KAAK;AAAA,IAAA,OAChC;AACL,UAAI,CAAC,wBAAwB;AACb,sBAAA;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAMA,MAAI,CAAC,eAAe,0BAA0B,uBAAuB,WAAW;AAC9E,kBAAc,gBAAgB;AAAA,EAChC;AAEA,MAAI,CAAC,aAAa;AAChB,kBAAc,iBAAiB;AAAA,EACjC;AAEO,SAAA;AACT;AACO,SAAS,eAAe;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA,oBAAoB;AACtB,GAAG;AACe,aAAW;AAC3B,QAAM,SAAS;AACf,QAAM,EAAE,UAAU,iBAAqB,IAAA,OAAO,cAAc,OAAO;AAInE,MAAI,eAAe;AACnB,QAAM,EAAE,UAAU,eAAe,MAAM;AASvC,OAAK,oBAA6B,UAAuB,kBAAkB,MAAM,EAAE,MAAM,cAAc;AACrG,UAAM,YAAY,iBAAiB,QAAQ,cAAc,MAAM,EAAE;AAEjE,QAAI,SAAS,SAAS,KAAK,aAAa,CAAC,QAAQ,WAAW,UAAU,KAAK,CAAC,UAAU,WAAW,IAAI,GAAG;AACvF,qBAAA;AAAA,IACjB;AAAA,EACF;AACO,SAAA;AACT;AACA,SAAS,sBAAsB,cAAc;AAC3C,SAAO,SAAS,YAAY,KAAK,UAAU,gBAAgB,gBAAgB;AAC7E;AACA,MAAM,mBAAmB,MAAM,SAAS,sBAAsB,aAAa,MAAM,EAAE;AACnF,SAAS,UAAU,cAAc,QAAQ;AACvC,SAAO,WAAW,cAAc,EAAE,cAAc,OAAQ,CAAA;AAC1D;AACsB,eAAA,SAAS,MAAM,EAAE,SAAS,KAAK,iBAAiB,MAAU,IAAA,IAAI;AAClF,QAAM,EAAE,SAAS,MAAM,QAAQ,UAAU;AACzC,QAAM,EAAE,cAAc,kBAAkB,gCAAgC,QAAQ,QAAQ,OAAO;AAC3F,MAAA,EAAE,aAAiB,IAAA;AAUnB,MAAA,MAAM,SAAS,OAAO,cAAc;AAClC,QAAA,SAAS,YAAY,GAAG;AAC1B,qBAAe,MAAM;AAAA,IAAA,WACZ,sBAAsB,YAAY,GAAG;AAC9C,qBAAe,MAAM,aAAa;AAClC,eAAS,aAAa;AAAA,IACxB;AACe,mBAAA,QAAQ,YAAY,cAAc,MAAM;AAEhD,WAAA,UAAU,cAAc,MAAM;AAAA,EACvC;AAUA,MAAI,CAAC,kBAAkB;AACrB,QAAI,cAAc;AACT,aAAA,UAAU,cAAc,MAAM;AAAA,IACvC;AAAA,EAAA,OACK;AACL,UAAM,QAAQ;AAEd,QAAI,MAAM,SAAS,MAAM,UAAU,cAAc;AAIhB;AAE7B,cAAM,QAAQ;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AACF;AACgB,SAAA,kBAAkB,MAAM,MAAM;AAC5C,eAAa,MAAM,SAAS,cAAc,IAAI,CAAC;AAC/C,eAAa,MAAM,qBAAqB,eAAe,gBAAgB,CAAC;AACxE,eAAa,MAAM,eAAe,eAAe,UAAU,CAAC;AAC5D,eAAa,MAAM,gBAAgB,eAAe,WAAW,CAAC;AAC9D,eAAa,MAAM,qBAAqB,eAAe,gBAAgB,CAAC;AACxE,eAAa,MAAM,eAAe,eAAe,UAAU,CAAC;AAC9D;AACgB,SAAA,iBAAiB,gBAAgB,oCAAoB;AACnE,SAAO,CAAC,SAAS;AAEf,WAAO,kBAAkB,IAAI,KAAK,CAAC,cAAc,OAAO,KAAK;AAAA,EAAA;AAEjE;AACgB,SAAA,kCAAkC,gBAAgB,oCAAoB;AAC7E,SAAA,CAAC,MAAM,WAAW;AACnB,QAAA,cAAc,OAAO,KAAK,kBAAkB;AACxC,YAAA,SAAS,oBAAoB,MAAM;AAEzC,UAAI,QAAQ;AACH,eAAA,QAAQ,QAAQ,IAAI;AAAA,MAAA,OACtB;AACE,eAAA;AAAA,MACT;AAAA,IAAA,OACK;AACE,aAAA,mCAAmC,IAAY;AAAA,IACxD;AAAA,EAAA;AAEJ;AACO,SAAS,gBAAgB;AAC9B,SAAO,MAAM;AACX,UAAM,MAAM;AACZ,UAAM,EAAE,SAAS,eAAe,qBAAqB,IAAI,QAAQ,OAAO;AACpE,QAAA,WAAW,OAAO,GAAG;AACjB,YAAA,gBAAgB,QAAQ,GAAG;AAE1B,aAAA;AAAA,IACT;AACA,UAAM,aAAa,WAAW,aAAa,IAAI,kBAAkB;AACjE,QAAI,oBAAoB,YAAY;AAC5B,YAAA,SAAS,oBAAoB,UAAU;AAC7C,UAAI,QAAQ;AAEH,eAAA;AAAA,MACT;AAAA,IACF;AACA,QAAI,SAAS;AAEJ,aAAA;AAAA,IACT;AACO,WAAA;AAAA,EAAA;AAEX;ACpSO,SAAS,cAAc,SAAS;AACrC,SAAO,sBAAsB,MAAM;AACrC;AACgB,SAAA,sBAAsB,MAAMnE,UAAS,MAAM;AACnD,QAAA,SAAS,cAAc,IAAI;AAC3B,QAAA,CAAC,KAAK,MAAM,IAAI,CAAC,QAAQ,OAAOA,KAAI,CAAC;AAC3C,SAAO,QAAQ,MAAM,QAAQ,KAAK,CAAC,GAAG,IAAI,CAAC;AAC7C;AACgB,SAAA,wBAAwB,MAAMA,OAAM;AAC5C,QAAA,SAAS,cAAc,IAAI;AAC1B,SAAA,MAAM,OAAOA,KAAI,CAAC;AAC3B;AACgB,SAAA,aAAa,KAAK,KAAK,KAAK;AAC1C,SAAO,eAAe,KAAK,KAAK,EAAE,KAAK,MAAM,KAAK;AACpD;AACO,SAAS,eAAe,IAAI,SAAS,+BAA+B;AACzE,SAAO,IAAI,SAAS,GAAG,QAAQ,GAAG,IAAI;AACxC;AACO,SAAS,oBAAoB,OAAO;AACzC,SAAO,MAAM,MAAM,GAAG,EAAE,IAAI,CAAC,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC;AACxD;AACO,SAAS,mBAAmB;AAC7B,MAAA;AAM2B;AAC7B,UAAM,SAAS,kBAAkB,CAAC,iBAAiB,CAAC;AAE9C,UAAA,SAAS,OAAO,iBAAiB;AACvC,QAAI,QAAQ;AACV,YAAM,kBAAkB,mBAAmB,oBAAoB,MAAM,CAAC;AAAA,IAExE;AAAA,EACF;AACO,SAAA;AACT;AACO,SAAS,gBAAgB;AAC9B,QAAM,SAAS;AACT,QAAA,YAAY,UAAU,OAAO,aAAa;AAC1C,QAAA,2BAA2B;AACjC,QAAM,gBAAgB;AAAA,IACpB,SAAS,IAAI,KAAK,KAAK,QAAQ,KAAK,QAAA,IAAY,GAAG,CAAC;AAAA,IACpD,MAAM;AAAA,IACN,UAAU,UAAU,OAAO,oBAAoB,SAAS;AAAA,IACxD,QAAQ,UAAU,OAAO,qBAAqB,UAAU,OAAO;AAAA,EAAA;AAE7D,MAAA,UAAU,OAAO,cAAc;AACjC,kBAAc,SAAS,OAAO;AAAA,EAChC;AACO,SAAAuE,UAAc,WAAW,aAAa;AAC/C;AACgB,SAAA,gBAAgB,WAAW,QAAQ,eAAe;AAMhE,MAAI,WAAW,SAAS,CAAC,OAAO,WAAW;AACzC;AAAA,EACF;AACM,QAAA,aAAa,UAAU,SAAS;AAEtC,MAAI,cAAc,MAAM;AAEtB;AAAA,EACF;AACI,MAAA,YAAY,SAAS,UAAU,GAAG;AAE7B,WAAA;AAAA,EACT;AACA,MAAI,eAAe;AAIjB,cAAU,QAAQ;AACX,WAAA;AAAA,EACT;AAEA,YAAU,QAAQ;AAClB;AACF;AACgB,SAAA,gBAAgB,WAAW,QAAQ,QAAQ;AACzD,MAAI,WAAW,SAAS,CAAC,OAAO,WAAW;AACzC;AAAA,EACF;AACA,YAAU,QAAQ;AACpB;AACO,MAAM,yCAAyC;AAAA,EACpD,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,MAAM;AACR;AACO,SAAS,sBAAsB,OAAO,sBAAsB,qBAAqB,SAAS,IAAI;AACnG,QAAM,EAAE,SAAa,KAAA,iCAAA,GAAmB,OAAO;AAC/C,QAAM,EAAE,KAAK,UAAU,aAAa,iBAAiB;AAEjD,MAAS,aAAa,eAAgB,MAA6C;AACrF,WAAO,EAAE,QAAQ,IAAI,MAAM,MAAM,QAAQ;EAC3C;AACA,MAAI,CAAC,aAAa;AACT,WAAA,EAAE,QAAQ,aAAa,cAAc,SAAS,IAAI,MAAM,OAAO,QAAQ;EAChF;AACA,QAAM,EAAE,YAAY,gBAAgB,WAAAC,YAAW,eAAA,IAAmB;AAClE,QAAM,OAAO,SAAS,KAAK,IAAI,QAAQ,MAAM;AAS7C,MAAI,aAAa,aAAa;AAC5B,QAAI,eAAe,QAAQ;AACzB,UAAI,SAAS,KAAK;AAEhB,eAAO,EAAE,QAAQ,IAAI,MAAM,OAAO,QAAQ;MAC5C;AAAA,IAAA,WACS,eAAe,aAAa;AAErC,UAAI,CAAC,kBAAkB,KAAK,MAAM,gBAAgB,WAAW,CAAC,GAAG;AAC/D,eAAO,EAAE,QAAQ,IAAI,MAAM,OAAO,QAAQ;MAC5C;AAAA,IACF;AAAA,EACF;AACA,MAAI,aAAa;AACb,MAAA;AACA,MAAA;AACJ,MAAIA,YAAW;AACb,oBAAgB,eAAe;AAClB,iBAAA;AAAA,EAEf;AACA,MAAI,CAAC,eAAe;AAClB,oBAAgB,iBAAiB;AACpB,iBAAA;AAAA,EAEf;AAOA,QAAM,cAAc,iBAAiB;AACjC,MAAA,CAAC,iBAAiB,gBAAgB;AACvB,iBAAA;AAAA,EACf;AAOA,QAAM,gBAAgB,UAAU;AAEhC,MAAI,gBAAgB,CAACA,cAAa,kBAAkB,CAAC,eAAe;AAClE,QAAI,aAAa,aAAa;AAC5B,aAAO,EAAE,QAAQ,aAAa,MAAM,MAAM,MAAM;IAAW,OACtD;AACL,UAAI,aAAa,SAAS;AACxB,YAAI,gBAAgB,eAAe;AAEjC,iBAAO,EAAE,QAAQ,aAAa,MAAM,MAAM,MAAM;QAClD;AAAA,MACF;AACA,UAAI,gBAAgB;AAClB,cAAM,iBAAiB,SAAS;AAChC,cAAM,gBAAgB,eAAe;AAC/B,cAAA,qBAAqB,eAAe,eAAe,CAAC,KAAK,MAAM,gBAAgB,WAAW,CAAC;AAO7F,YAAA,kBAAkB,iBAAiB,oBAAoB;AACzD,iBAAO,EAAE,QAAQ,aAAa,MAAM,MAAM,MAAM;QAClD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACI,MAAA,QAAQ,eAAe,aAAa;AACtC,WAAO,EAAE,QAAQ,aAAa,MAAM,MAAM,MAAM;EAClD;AACA,OAAK,eAAe,yBAAyB,eAAe,aAAa,aAAa;AACpF,WAAO,EAAE,QAAQ,aAAa,MAAM,MAAM,MAAM;EAClD;AACA,SAAO,EAAE,QAAQ,IAAI,MAAM,OAAO,QAAQ;AAC5C;AACO,SAAS,UAAU;AACpB,MAAA;AAG2B;AAC7B,UAAM,SAAS,kBAAkB,CAAC,oBAAoB,MAAM,CAAC;AACzD,QAAA;AACJ,QAAI,sBAAsB,QAAQ;AAChC,qBAAe,OAAO,kBAAkB;AAAA,IAAA,WAC/B,UAAU,QAAQ;AAC3B,qBAAe,OAAO,MAAM;AAAA,IAC9B;AACA,WAAO,QAAQ,YAAY,IAAI,aAAa,CAAC,IAAI;AAAA,EACnD;AACO,SAAA;AACT;AACgB,SAAA,gBAAgB,SAAS,UAAU,OAAO;AACpD,MAAA,OAAO,QAAa,KAAA;AACxB,MAAI,MAAM;AAOJ,QAAA;AACJ,UAAM,kBAAkB,QAAQ,OAAO,CAAC,WAAW;AAC7C,UAAA,UAAU,OAAO,QAAQ;AAC3B,YAAI,SAAS,OAAO;AAChB,YAAA,YAAY,OAAO,MAAM,GAAG;AAC9B,mBAAS,OAAO,OAAO,QAAQ,qBAAqB,EAAE;AAAA,QACxD;AACA,eAAO,WAAW;AAAA,MACpB;AACO,aAAA;AAAA,IAAA,CACR;AACG,QAAA,gBAAgB,WAAW,GAAG;AAChC,uBAAiB,gBAAgB,CAAC;AAAA,IAAA,WAEzB,gBAAgB,SAAS,GAAG;AACrC,UAAI,aAAa,aAAa;AACpB,gBAAA;AAAA,UACN;AAAA,YACE;AAAA,UACF;AAAA,QAAA;AAEF,yBAAiB,gBAAgB,CAAC;AAAA,MAAA,OAC7B;AACL,YAAI,OAAO;AACH,gBAAA,YAAY,SAAS,KAAK,IAAI,MAAM,OAAO,SAAS,KAAK,IAAI,QAAQ;AAEvE,cAAA,aAAa,cAAc,IAAI;AAC3B,kBAAA,UAAU,UAAU,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC/E,gBAAA,WAAW,QAAQ,SAAS,GAAG;AAChB,+BAAA,gBAAgB,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ,CAAC,CAAC;AAAA,YAKpE;AAAA,UACF;AAAA,QACF;AACA,YAAI,CAAC,gBAAgB;AACnB,2BAAiB,gBAAgB,KAAK,CAAC,MAAM,EAAE,aAAa;AAAA,QAK9D;AAAA,MACF;AAAA,IACF;AACA,QAAI,gBAAgB;AAClB,aAAO,eAAe;AAAA,IAAA,OACjB;AACE,aAAA;AAAA,IACT;AAAA,EACF;AACO,SAAA;AACT;AACO,SAAS,oBAAoB,YAAY;;AAC9C,QAAM,gBAAgB;AACtB,QAAM,UAAU;AACV,QAAA,SAAS,cAAc,OAAO;AACpC,QAAM,OAAO,kBAAkB,KAAK,CAAC,WAAW,OAAO,SAAS,UAAU;AAC1E,QAAM,WAAS,4CAAQ,YAAR,mBAAkB,gBAAlB,mBAA+B,YAAU,6BAAM;AAC9D,MAAI,QAAQ;AACV,QAAI,YAAY,QAAQ,EAAE,QAAQ,KAAM,CAAA,GAAG;AAClC,aAAA;AAAA,IACT;AACI,QAAA;AACoB;AAChB,YAAA;AAAA,QACJ,MAAM,EAAE,IAAI;AAAA,MAAA,IACV,gBAAgB,OAAO;AAC3B,iBAAW,OAAO,QAAQ,GAAG,IAAI,WAAW;AAAA,IAG9C;AACA,WAAO,WAAW,OAAO;AAAA,EAC3B;AACA,UAAQ,KAAK,cAAc,2CAA2C,UAAU,CAAC;AACnF;AACO,MAAM,+BAA+B,CAAC,QAAO,iCAAiB,GAAE,OAAO,SAAS;AACrF,OAAI,6BAAM,2BAA0B;AAC3B,WAAA;AACT,SAAO,6BAAM;AACf;ACzLO,SAAS,sBAAsB;AACpC,SAAO,eAAe,gBAAgB;AACxC;ACrHO,SAAS,WAAW,MAAM;AAAA,EAC/B,UAAU,CAAE;AAAA,EACZ,aAAAL,eAAc,CAAE;AAAA,EAChB,UAAU;AAAA,EACV,QAAQ,CAAE;AAAA,EACV,UAAU,CAAE;AACd,IAAI,IAAI;AACN,QAAM,QAAQ;AACd,QAAM,aAAa,KAAK;AACxB,OAAK,UAAU,CAAC,QAAQ,YAAY;AAClC,UAAM,gBAAgB,gBAAgB,QAAQ,CAAC,CAAC,IAAI,OAAO,IAAI,QAAQ,CAAC,CAAC,IAAI,EAAE,QAAQ,KAAI;AAC3F,QAAI,cAAc,UAAU,MAAM;AAChC,oBAAc,SAAS;AAAA,IACxB;AACD,UAAM,oBAAoB,cAAc;AACxC,kBAAc,mBAAmB,CAAC,kBAAkB;AAClD,YAAM,kBAAkB,YAAY,IAAI;AACxC,oBAAc,UAAU,SAAS,MAAM,gBAAgB,QAAQ,KAAK;AACpE,oBAAc,cAAc,SAAS,MAAM,gBAAgB,YAAY,KAAK;AAC5E,oBAAc,UAAU,SAAS,MAAM,gBAAgB,QAAQ,KAAK;AACpE,UAAI;AACJ,UAAI,WAAW,iBAAiB,GAAG;AACjC,6BAAqB,QAAQ,MAAM,mBAAmB,eAAe,CAAC,aAAa,CAAC;AAAA,MACrF;AACD,aAAO,MAAM;AACX,8BAAsB,mBAAkB;AAAA,MAChD;AAAA,IACA;AACI,QAAI,KAAK,SAAS,UAAU;AAC1B,YAAM,mBAAmB,cAAc;AACvC,oBAAc,kBAAkB,CAAC,YAAY;AAC3C,sBAAc,SAAS,MAAM,eAAe;AAC5C,YAAI;AACJ,YAAI,WAAW,gBAAgB,GAAG;AAChC,8BAAoB,QAAQ,MAAM,kBAAkB,eAAe,CAAC,OAAO,CAAC;AAAA,QAC7E;AACD,eAAO,MAAM;AACX,+BAAqB,kBAAiB;AAAA,QAChD;AAAA,MACA;AAAA,IACK;AACD,YAAQ,CAAC,IAAI;AACb,YAAQ,MAAM,YAAY,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;AACjD,UAAM,iBAAiB,YAAY,IAAI;AACvC,UAAM,IAAI,MAAM;AACd,qBAAe,gBAAgB,EAAE,SAAS,aAAAA,cAAa,SAAS,OAAO,QAAO,CAAE;AAChF,UAAI,KAAK,SAAS,YAAY,UAAU,KAAK,MAAM,GAAG;AACpD,sBAAc,KAAK,QAAQ,MAAM,eAAe;AAAA,MACjD;AAAA,IACP,CAAK;AACD,UAAM,MAAM;AACZ,UAAM,WAAW,KAAK,SAAS,gBAAgB,IAAI,OAAO,iBAAiB,QAAQ;AACnF,QAAI,UAAU;AACZ,2BAAqB,UAAU,gBAAgB,MAAM,sBAAsB;AAAA,IAC5E;AACD,QAAI,cAAc,QAAQ;AACxB,YAAM,SAAS,4BAA4B,IAAI;AAC/C,UAAI,MAAM;AAAA,QACR,SAAS;AAAA,UACP,kBAAkB,eAAe,kBAAkB,MAAM;AAAA,UACzD,cAAc,eAAe,cAAc,MAAM;AAAA,UACjD,YAAY,eAAe,YAAY,MAAM;AAAA,UAC7C,aAAa,eAAe,aAAa,MAAM;AAAA,UAC/C,gBAAgB,eAAe,gBAAgB,MAAM;AAAA,UACrD,kBAAkB,eAAe,kBAAkB,MAAM;AAAA,UACzD,YAAY,eAAe,YAAY,MAAM;AAAA,QAC9C;AAAA,MACT,CAAO;AAAA,IACF;AACD,QAAI,IAAI,SAAS;AACf,YAAM,aAAa,IAAI;AACvB,UAAI,UAAU,MAAM;AAClB,cAAM,KAAI;AACV;MACR;AAAA,IACK;AAAA,EACL;AACE,SAAO;AACT;AACA,SAAS,eAAe,UAAU,SAAS;AACzC,QAAM,EAAE,SAAS,aAAAA,cAAa,SAAS,QAAO,IAAK;AACnD,QAAM,WAAW,IAAI,OAAO;AAC5B,QAAM,eAAe,IAAIA,YAAW;AACpC,QAAM,WAAW,IAAI,EAAE;AACvB,WAAS,UAAU,SAAS,MAAM,SAAS,KAAK;AAChD,WAAS,cAAc,SAAS,MAAM,aAAa,KAAK;AACxD,WAAS,UAAU,SAAS,MAAM,SAAS,KAAK;AASzC;AACL,aAAS,QAAQ,eAAe,SAAS,OAAO;AAAA,EACjD;AACD,MAAI,QAAQ,SAAS,QAAQ,MAAM,kBAAkB;AACnD,YAAQ,MAAM,iBAAiB,QAAQ;AAAA,EACxC;AACH;AACA,SAAS,0BAA0B,UAAU,UAAU,MAAM;AAC3D,QAAM,aAAa;AAAA,IACjB;AAAA,MACE,SAAS;AAAA,QACP,MAAM;AACJ,iBAAO,SAAS,QAAQ;AAAA,QACzB;AAAA,MACF;AAAA,MACD,aAAa;AAAA,QACX,MAAM;AACJ,iBAAO,SAAS,YAAY;AAAA,QAC7B;AAAA,MACF;AAAA,MACD,SAAS;AAAA,QACP,MAAM;AACJ,iBAAO,SAAS,QAAQ;AAAA,QACzB;AAAA,MACF;AAAA,IACF;AAAA,EACL;AACE,UAAQ,WAAW,KAAK,KAAK,QAAQ,CAAC;AACtC,aAAW,YAAY,YAAY;AACjC,eAAW,CAAC,KAAK,UAAU,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACxD,aAAO,eAAe,UAAU,KAAK,UAAU;AAAA,IAChD;AAAA,EACF;AACH;AACA,SAAS,qBAAqB,UAAU,GAAG,MAAM;AAC/C,4BAA0B,GAAG,UAAU,IAAI;AAC7C;AACA,SAAS,cAAc,SAAS,MAAM;AACpC,QAAM,IAAI,YAAY,OAAO;AAC7B,4BAA0B,GAAG,SAAS,IAAI;AAC5C;AACA,SAAS,gBAAgB,SAAS;AAChC,SAAO,SAAS,OAAO,MAAM,YAAY,WAAW,sBAAsB,WAAW,qBAAqB;AAC5G;AClJA,MAAM,UAAU,CAAC,WAAW,WAAW,WAAW,WAAW;AACtD,SAAS,gBAAgB,MAAM;;AACpC,QAAM,UAAU,OAAO,KAAK,KAAK,SAAS,CAAC,MAAM,WAAW,KAAK,IAAK,IAAG;AACzE,MAAI,OAAO,KAAK,CAAC,MAAM,UAAU;AAC/B,SAAK,QAAQ,OAAO;AAAA,EACrB;AACD,MAAI,CAAC,KAAK,UAAU,UAAU,CAAE,CAAA,IAAI;AACpC,MAAI,OAAO,QAAQ,UAAU;AAC3B,UAAM,IAAI,UAAU,0CAA0C;AAAA,EAC/D;AACD,MAAI,OAAO,aAAa,YAAY;AAClC,UAAM,IAAI,UAAU,gDAAgD;AAAA,EACrE;AACD,QAAM,UAAU;AAChB,QAAM,UAAgC,CAAC,YAAY,aAAa,GAAC,aAAQ,eAAR,mBAAoB,yBAAwB,WAAW,MAAM;AAC5H,UAAM,QAAQ,QAAQ,WAAW,sBAAsB,IAAI,GAAG;AAC9D,QAAI,OAAO;AACT,aAAO;AAAA,IACR;AACD,UAAM,UAAU,QAAQ,UAAU,KAAK,MAAM,QAAQ,eAAe,QAAQ,CAAC;AAC7E,YAAQ,WAAW,sBAAsB,IAAI,KAAK,OAAO;AACzD,WAAO;AAAA,EACX;AACE,QAAM,aAAa,MAAM,kBAAkB;AAC3C,QAAM,uBAAuB,MAAM,QAAQ,cAAc,QAAQ,QAAQ,KAAK,GAAG,IAAI,QAAQ,OAAO,KAAK,GAAG;AAC5G,UAAQ,SAAS,QAAQ,UAAU;AACnC,UAAQ,UAAU,QAAQ,WAAW;AACrC,UAAQ,gBAAgB,QAAQ,iBAAiB;AACjD,UAAQ,OAAO,QAAQ,QAAQ;AAC/B,UAAQ,YAAY,QAAQ,aAAa;AACzC,UAAQ,OAAO,QAAQ,QAAQ,kBAAkB;AACjD,UAAQ,SAAS,QAAQ,UAAU;AAInC,QAAM,gBAAgB,MAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AACnE,MAAI,CAAC,QAAQ,WAAW,GAAG,KAAK,CAAC,QAAQ,WAAW;AAClD,kBAAQ,QAAQ,SAAhB,mBAAiC,kBAAkB;AACnD,UAAM,OAAO,QAAQ,OAAO,MAAM;AAClC,YAAQ,WAAW,GAAG,IAAI;AAAA,MACxB,MAAM,KAAK,QAAQ,cAAc,KAAK,OAAO,KAAK,QAAQ,SAAS;AAAA,MACnE,SAAS,IAAI,CAAC,eAAe;AAAA,MAC7B,OAAO,MAAM,QAAQ,QAAQ,SAAS,GAAG;AAAA,MACzC,QAAQ,IAAI,MAAM;AAAA,MAClB,UAAU,QAAQ;AAAA,IACxB;AAAA,EACG;AACD,QAAM,YAAY,EAAE,GAAG,QAAQ,WAAW,GAAG,EAAC;AAC9C,SAAO,UAAU;AACjB,YAAU,UAAU,UAAU,UAAU,CAAC,OAAO,CAAA,MAAO;AACrD,QAAI,QAAQ,mBAAmB,GAAG,GAAG;AACnC,UAAI,QAAQ,KAAK,UAAU,QAAQ,MAAM,GAAG;AAC1C,eAAO,QAAQ,mBAAmB,GAAG;AAAA,MACtC;AACD,cAAQ,mBAAmB,GAAG,EAAE,YAAY;AAAA,IAC7C;AACD,SAAK,KAAK,YAAY,QAAQ,eAAe,KAAK,aAAa,UAAU,iBAAiB;AACxF,aAAO,QAAQ,QAAQ,QAAQ,cAAc,KAAK,OAAO,CAAC;AAAA,IAC3D;AACD,cAAU,QAAQ,QAAQ;AAC1B,cAAU,OAAO,QAAQ;AACzB,UAAM,UAAU,IAAI;AAAA,MAClB,CAAChD,UAAS,WAAW;AACnB,YAAI;AACF,UAAAA,SAAQ,QAAQ,OAAO,CAAC;AAAA,QACzB,SAAQ,KAAK;AACZ,iBAAO,GAAG;AAAA,QACX;AAAA,MACF;AAAA,IACP,EAAM,KAAK,OAAO,YAAY;AACxB,UAAI,QAAQ,WAAW;AACrB,eAAO,QAAQ,mBAAmB,GAAG;AAAA,MACtC;AACD,UAAI,SAAS;AACb,UAAI,QAAQ,WAAW;AACrB,iBAAS,MAAM,QAAQ,UAAU,OAAO;AAAA,MACzC;AACD,UAAI,QAAQ,MAAM;AAChB,iBAAS,KAAK,QAAQ,QAAQ,IAAI;AAAA,MACnC;AAID,cAAQ,QAAQ,KAAK,GAAG,IAAI;AAC5B,gBAAU,KAAK,QAAQ;AACvB,gBAAU,MAAM,QAAQ,kBAAkB;AAC1C,gBAAU,OAAO,QAAQ;AAAA,IAC/B,CAAK,EAAE,MAAM,CAAC,UAAU;AAClB,UAAI,QAAQ,WAAW;AACrB,eAAO,QAAQ,mBAAmB,GAAG;AAAA,MACtC;AACD,gBAAU,MAAM,QAAQ,YAAY,KAAK;AACzC,gBAAU,KAAK,QAAQ,MAAM,QAAQ,QAAO,CAAE;AAC9C,gBAAU,OAAO,QAAQ;AAAA,IAC/B,CAAK,EAAE,QAAQ,MAAM;AACf,UAAI,QAAQ,WAAW;AACrB;AAAA,MACD;AACD,gBAAU,QAAQ,QAAQ;AAC1B,aAAO,QAAQ,mBAAmB,GAAG;AAAA,IAC3C,CAAK;AACD,YAAQ,mBAAmB,GAAG,IAAI;AAClC,WAAO,QAAQ,mBAAmB,GAAG;AAAA,EACzC;AACE,YAAU,QAAQ,MAAM,mBAAmB,SAAS,GAAG;AACvD,QAAM,eAAe,MAAM,UAAU,QAAQ,EAAE,UAAU,KAAI,CAAE;AAC/D,QAAM,gBAAgB,QAAQ,WAAW,SAAS,QAAQ,QAAQ;AAClE,MAA0B,iBAAiB,QAAQ,WAAW;AAC5D,UAAM,UAAU;AAChB,QAAI,mBAAkB,GAAI;AACxB,uBAAiB,MAAM,OAAO;AAAA,IACpC,OAAW;AACL,cAAQ,KAAK,eAAe,YAAY;AACtC,cAAM;AAAA,MACd,CAAO;AAAA,IACF;AAAA,EACF;AAyCD,QAAM,mBAAmB,QAAQ,QAAQ,QAAQ,mBAAmB,GAAG,CAAC,EAAE,KAAK,MAAM,SAAS;AAC9F,SAAO,OAAO,kBAAkB,SAAS;AACzC,SAAO;AACT;AAgDA,SAAS,mBAAmB,SAAS,KAAK;AACxC,MAAI,OAAO,QAAQ,QAAQ,MAAM;AAC/B,YAAQ,QAAQ,KAAK,GAAG,IAAI;AAAA,EAC7B;AACD,MAAI,OAAO,QAAQ,QAAQ,SAAS;AAClC,YAAQ,QAAQ,QAAQ,GAAG,IAAI,kBAAkB;AAAA,EAClD;AACD,MAAI,QAAQ,WAAW,GAAG,GAAG;AAC3B,YAAQ,WAAW,GAAG,EAAE,KAAK,QAA6C,QAAQ,WAAW,GAAG,EAAE;AAClG,YAAQ,WAAW,GAAG,EAAE,MAAM,QAAQ,kBAAkB;AACxD,YAAQ,WAAW,GAAG,EAAE,QAAQ,QAAQ;AACxC,YAAQ,WAAW,GAAG,EAAE,OAAO,QAAQ;AAAA,EACxC;AACD,MAAI,OAAO,QAAQ,oBAAoB;AACrC,QAAI,QAAQ,mBAAmB,GAAG,GAAG;AACnC,cAAQ,mBAAmB,GAAG,EAAE,YAAY;AAAA,IAC7C;AACD,YAAQ,mBAAmB,GAAG,IAAI;AAAA,EACnC;AACH;AACA,SAAS,KAAK,KAAK,MAAM;AACvB,QAAM,SAAS,CAAA;AACf,aAAW,OAAO,MAAM;AACtB,WAAO,GAAG,IAAI,IAAI,GAAG;AAAA,EACtB;AACD,SAAO;AACT;AC7OO,MAAM,mBAAmB,OAAO,IAAI,kBAAkB;AAC7D,MAAA,uBAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,cAAc;AAAA,EACd,OAAO,CAAC,YAAY,eAAe,kBAAkB,aAAa;AAAA,EAClE,MAAM,GAAG,EAAE,OAAO,MAAK,GAAI;AACzB,UAAM,UAAU,IAAI,KAAK;AASzB,YAAQ,kBAAkB,IAAI;AAC9B,WAAO,CAAC,UAAU;;AAChB,UAAI,QAAQ,OAAO;AACjB,gBAAO,WAAM,YAAN;AAAA,MACR;AACD,YAAM,OAAO,MAAM,YAAY,MAAM;AACrC,UAAI,MAAM;AACR,eAAO,KAAI;AAAA,MACZ;AACD,YAAM,cAAc,MAAM,YAAY,MAAM,eAAe;AAC3D,YAAM,cAAc,MAAM,eAAe,MAAM,kBAAkB;AACjE,aAAO,mBAAmB,aAAa,OAAO,WAAW;AAAA,IAC/D;AAAA,EACG;AACH,CAAC;ACxBD,MAAM,oBAAoB,IAAI,SAAS,KAAK,KAAK,CAAC,QAAQ,QAAQ,MAAM;AAAA;AAGjE,SAAS,eAAe,SAAS;AAChC,QAAA,gBAAgB,QAAQ,iBAAiB;AAMtC,WAAA,6BAA6B,IAAIA,UAAS;AACjD,QAAI,CAAC,MAAM,QAAQ,kBAAkB,YAAY,QAAQ,kBAAkB,UAAU;AAC5E,aAAA;AAAA,IACT;AACI,QAAA,OAAO,OAAO,UAAU;AACnB,aAAA,2BAA2B,IAAI,QAAQ,aAAa;AAAA,IAC7D;AACM,UAAA,OAAO,UAAU,MAAM,GAAG,SAAS,SAAS,GAAG,OAAOA,SAAQ,EAAE,EAAE;AACxE,UAAM,eAAe;AAAA,MACnB,GAAG;AAAA,MACH,MAAM;AAAA;AAAA,MAEN,MAAM,2BAA2B,MAAM,QAAQ,aAAa;AAAA,IAAA;AAEvD,WAAA;AAAA,EACT;AACA,WAAS,YAAY,OAAO;AAC1B,UAAM,SAAS;AACf,UAAM,SAAS;AACT,UAAA,YAAY,SAAS,MAAM,CAAC,CAAC,MAAM,UAAU,MAAM,WAAW,OAAO;AACrE,UAAA,gBAAgB,SAAS,MAAM;AACnC,YAAM,OAAO,MAAM,MAAM,MAAM,QAAQ;AAChC,aAAA,OAAO,SAAS,YAAY,YAAY,MAAM,EAAE,gBAAgB,MAAM;AAAA,IAAA,CAC9E;AACK,UAAA,oBAAoB,iBAAiB,YAAY;AACvD,UAAM,iBAAiB,qBAAqB,OAAO,sBAAsB,WAAW,kBAAkB,UAAU;AAC1G,UAAA,aAAa,SAAS,MAAM;AAChC,UAAI,MAAM,UAAU;AACX,eAAA;AAAA,MACT;AACA,YAAM,OAAO,MAAM,MAAM,MAAM,QAAQ;AACnC,UAAA,OAAO,SAAS,UAAU;AACrB,eAAA;AAAA,MACT;AACO,aAAA,SAAS,MAAM,cAAc;AAAA,IAAA,CACrC;AACK,UAAA,KAAK,SAAS,MAAM;AAExB,YAAM,OAAO,MAAM,MAAM,MAAM,QAAQ;AACvC,UAAI,WAAW,OAAO;AACb,eAAA;AAAA,MACT;AACO,aAAA,6BAA6B,MAAM,OAAO,OAAO;AAAA,IAAA,CACzD;AACK,UAAA,OAAO,WAAW,QAAQ,SAAS,iDAAiB,EAAE,GAAG,OAAO,GAAA;AAChE,UAAA,OAAO,SAAS,MAAM;;AAC1B,UAAI,CAAC,GAAG,SAAS,cAAc,OAAO;AACpC,eAAO,GAAG;AAAA,MACZ;AACA,UAAI,WAAW,OAAO;AACpB,cAAM,OAAO,OAAO,GAAG,UAAU,YAAY,UAAU,GAAG,QAAQ,mBAAmB,GAAG,KAAK,IAAI,GAAG;AAC9F,cAAA,QAAQ,OAAO,SAAS,WAAW,OAAO,QAAQ,IAAI,EAAE,OAAO;AAC9D,eAAA;AAAA,UACL;AAAA,UACA,OAAO;AAAA;AAAA,QAAA;AAAA,MAGX;AACI,UAAA,OAAO,GAAG,UAAU,UAAU;AAChC,iBAAO,YAAO,QAAQ,GAAG,KAAK,MAAvB,mBAA0B,SAAQ;AAAA,MAC3C;AACO,aAAA;AAAA,QACL,QAAQ,OAAO,IAAI,SAAS,GAAG,KAAK;AAAA,QACpC,OAAO;AAAA;AAAA,MAAA;AAAA,IAET,CACD;AACM,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MAEA;AAAA,MACA,WAAU,6BAAM,aAAY,SAAS,MAAM,GAAG,UAAU,OAAO,aAAa,MAAM,IAAI;AAAA,MACtF,gBAAe,6BAAM,kBAAiB,SAAS,MAAM,GAAG,UAAU,OAAO,aAAa,MAAM,IAAI;AAAA,MAChG,QAAO,6BAAM,UAAS,SAAS,MAAM,OAAO,QAAQ,GAAG,KAAK,CAAC;AAAA,MAC7D,MAAM,WAAW;AACf,cAAM,WAAW,KAAK,OAAO,EAAE,SAAS,MAAM,SAAS,UAAU,WAAW,SAAS,UAAU,MAAO,CAAA;AAAA,MACxG;AAAA,IAAA;AAAA,EAEJ;AACA,SAAO,gBAAgB;AAAA,IACrB,MAAM;AAAA,IACN,OAAO;AAAA;AAAA,MAEL,IAAI;AAAA,QACF,MAAM,CAAC,QAAQ,MAAM;AAAA,QACrB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,QACJ,MAAM,CAAC,QAAQ,MAAM;AAAA,QACrB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA;AAAA,MAEA,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,KAAK;AAAA,QACH,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,OAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA;AAAA,MAEA,UAAU;AAAA,QACR,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,YAAY;AAAA,QACV,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA;AAAA,MAEA,aAAa;AAAA,QACX,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,kBAAkB;AAAA,QAChB,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,iBAAiB;AAAA,QACf,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA;AAAA,MAEA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,kBAAkB;AAAA,QAChB,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA;AAAA,MAEA,UAAU;AAAA,QACR,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA;AAAA,MAEA,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,SAAS;AAAA,IACT,MAAM,OAAO,EAAE,SAAS;AACP,gBAAU;AACnB,YAAA,EAAE,IAAI,MAAM,UAAAsD,WAAU,YAAY,WAAW,cAAkB,IAAA,YAAY,KAAK;AAChF,YAAA,aAAa,IAAI,KAAK;AAC5B,YAAM,KAA0B;AAChC,YAAM,QAA6B;AAgDnC,aAAO,MAAM;;AACX,YAAI,CAAC,WAAW,SAAS,CAAC,UAAU,OAAO;AACzC,gBAAM,kBAAkB;AAAA,YACtB,KAAK;AAAA,YACL,IAAI,GAAG;AAAA,YACP,aAAa,MAAM,eAAe,QAAQ;AAAA,YAC1C,kBAAkB,MAAM,oBAAoB,QAAQ;AAAA,YACpD,SAAS,MAAM;AAAA,YACf,kBAAkB,MAAM;AAAA,YACxB,QAAQ,MAAM;AAAA,UAAA;AAEZ,cAAA,CAAC,MAAM,QAAQ;AACjB,gBAAI,WAAW,OAAO;AACJ,8BAAA,QAAQ,MAAM,mBAAmB,QAAQ;AAAA,YAC3D;AACgB,4BAAA,MAAM,MAAM,OAAO;AAAA,UACrC;AACO,iBAAA;AAAA,YACL,iBAAiB,YAAY;AAAA,YAC7B;AAAA,YACA,MAAM;AAAA,UAAA;AAAA,QAEV;AACM,cAAA,SAAS,MAAM,UAAU;AAE/B,cAAM,MAAM;AAAA;AAAA,UAEV,MAAM,QAAQ,KAAK,MAAM;AAAA,UACzB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,UAKR,cAAc,SAAS,UAAU,QAAQ,wBAAwB;AAAA,QAC9D,KAAA;AACL,YAAI,MAAM,QAAQ;AACZ,cAAA,CAAC,MAAM,SAAS;AACX,mBAAA;AAAA,UACT;AACA,iBAAO,MAAM,QAAQ;AAAA,YACnB,MAAM,KAAK;AAAA,YACX,UAAAA;AAAA,YACA,IAAI,QAAQ;AACN,kBAAA,CAAC,KAAK,OAAO;AACR,uBAAA;AAAA,cACT;AACM,oBAAA,MAAM,IAAI,IAAI,KAAK,OAAmD,kBAAkB;AACvF,qBAAA;AAAA,gBACL,MAAM,IAAI;AAAA,gBACV,UAAU,IAAI;AAAA,gBACd,IAAI,QAAQ;AACH,yBAAA,WAAW,IAAI,MAAM;AAAA,gBAC9B;AAAA,gBACA,MAAM,IAAI;AAAA,gBACV,QAAQ,CAAC;AAAA,gBACT,MAAM;AAAA,gBACN,SAAS,CAAC;AAAA,gBACV,gBAAgB;AAAA,gBAChB,MAAM,CAAC;AAAA,gBACP,MAAM,KAAK;AAAA,cAAA;AAAA,YAEf;AAAA,YACA;AAAA,YACA;AAAA,YACA,YAAY,WAAW,SAAS,UAAU;AAAA,YAC1C,UAAU;AAAA,YACV,eAAe;AAAA,UAAA,CAChB;AAAA,QACH;AACA,eAAO,EAAE,KAAK,EAAE,KAAK,IAAI,MAAM,KAAK,SAAS,MAAM,KAAK,OAAA,IAAU,WAAM,YAAN,8BAAiB;AAAA,MAAA;AAAA,IAEvF;AAAA,EAAA,CACD;AACH;AACA,MAAA,qDAA8C,gBAAgB;AAC9D,SAAS,2BAA2B,IAAI,eAAe;AAC/C,QAAA,cAAc,kBAAkB,WAAW,oBAAoB;AACrE,QAAM,+BAA+B,YAAY,EAAE,KAAK,CAAC,GAAG,WAAW,MAAM;AAC7E,MAAI,8BAA8B;AACzB,WAAA;AAAA,EACT;AACO,SAAA,YAAY,IAAI,IAAI;AAC7B;ACxTA,MAAA,OAAe,gBAAgB;AAAA,EAC7B,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,aAAa;AAAA,EACb,SAAS;AAAA,EACT,WAAW;AAAA,EACX,eAAe;AAAA,IACb,cAAc;AAAA,IACd,aAAa;AAAA,IACb,aAAa;AAAA,IACb,qBAAqB;AAAA,IACrB,SAAS;AAAA,IACT,qBAAqB;AAAA,IACrB,sCAAsC;AAAA,IACtC,+BAA+B;AAAA,IAC/B,oBAAoB;AAAA,IACpB,WAAW;AAAA;AAAA,EACb;AACF,CAAC;ACnBD,MAAM,eAAe;AAAA,EACnB,QAAQ,CAAC;AAAA,EACT,QAAQ;AAAA,IACN,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,WAAW,CAAC;AAAA,IACZ,sBAAsB;AAAA,IACtB,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,IACrB,kBAAkB;AAAA,IAClB,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,eAAe;AAAA,IACjB;AAAA,IACA,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,91,92,96,97]}